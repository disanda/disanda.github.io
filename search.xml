<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2.Python流程控制</title>
    <url>/2017/12/01/Python/2.%20Python%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="第二章-流程控制"><a href="#第二章-流程控制" class="headerlink" title="第二章 流程控制"></a>第二章 流程控制</h1><p> Python原创教程，持续更新</p>
<span id="more"></span>

<h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><blockquote>
<p>流程控制指程序设计中语言<em>最基础</em>的运行流程,主要包括三种结构，顺序结构，分支结构，循环结构。</p>
</blockquote>
<blockquote>
<p>每种结构的实现语句在所有编程语言中都大致相同，主要是分支结构的if判断语句，和循环结构的while语句和for语句。</p>
</blockquote>
<ul>
<li><p>顺序结构</p>
<p>  正常程序的顺序</p>
</li>
<li><p>分支结构</p>
<p>  <strong>if判断语句</strong></p>
</li>
<li><p>循环结构</p>
<p><strong>while循环语句</strong></p>
<p> <strong>for循环语句</strong></p>
</li>
</ul>
<h2 id="2-2-if语句"><a href="#2-2-if语句" class="headerlink" title="2.2  if语句"></a>2.2  if语句</h2><h3 id="2-2-1-逻辑表达式"><a href="#2-2-1-逻辑表达式" class="headerlink" title="2.2.1 逻辑表达式"></a>2.2.1 逻辑表达式</h3><blockquote>
<p>逻辑表达式是条件判断的方法。通过逻辑运算符两边数字<strong>等于</strong>、<strong>大于</strong>、<strong>小于</strong>或<strong>不等于</strong>等。若关系式条件成立，则返回bool值true，否则返回bool值false</p>
</blockquote>
<p>逻辑运算符主要有:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">&gt; 大于</span><br><span class="line">#  5 &gt; 4</span><br><span class="line">#  条件成立，返回ture</span><br><span class="line"></span><br><span class="line">&lt; 小于</span><br><span class="line"># 5 &lt; 4</span><br><span class="line"># 条件不成立，返回false</span><br><span class="line"></span><br><span class="line"><span class="section">== 等于</span></span><br><span class="line">&gt;= 大于或等于</span><br><span class="line">&lt;= 小于或等于</span><br><span class="line">!= 不等于</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-if判断语句"><a href="#2-2-2-if判断语句" class="headerlink" title="2.2.2 if判断语句"></a>2.2.2 if判断语句</h3><p>判断语句通过逻辑表达式(condition)的返回值，选择语句往返回值true处执行或false处执行</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># 公式</span></span><br><span class="line"><span class="attr">if 条件判断:</span></span><br><span class="line"><span class="attr">    表达式</span></span><br><span class="line"><span class="attr">    #  若 条件判断 返回值为true执行 表达式</span></span><br><span class="line"><span class="attr">elif condition_2</span>:</span><br><span class="line">    stateme<span class="symbol">nt_block_2</span></span><br><span class="line">    <span class="attr"># 若condition_2</span>返回值为true执行stateme<span class="symbol">nt_block_2</span></span><br><span class="line">else:</span><br><span class="line">    stateme<span class="symbol">nt_block_3</span></span><br><span class="line">    <span class="attr"># # 若condition_3</span>返回值为flase执行stateme<span class="symbol">nt_block_3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"># 示例</span><br><span class="line"><span class="built_in">var1</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">var1</span>&gt;<span class="number">100</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - if 表达式条件为 true&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (<span class="built_in">var1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">var1</span>+<span class="string">&quot;&lt;100&quot;</span>)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h2 id="2-3-while语句"><a href="#2-3-while语句" class="headerlink" title="2.3 while语句"></a>2.3 while语句</h2><h3 id="2-3-1-while循环"><a href="#2-3-1-while循环" class="headerlink" title="2.3.1 while循环"></a>2.3.1 while循环</h3><blockquote>
<p>循环是重复执行某一段代码的程序语句，一般通过条件判断的结果执行循环，当条件为true时执行循环，当条件为false时循环结束。</p>
</blockquote>
<blockquote>
<p>python中没有do..while循环</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">公式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while 判断语句：</span><br><span class="line">    判断成立就执行循环语句</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash"><span class="keyword">while</span>惯例是提前定义一个变量，用于执行<span class="keyword">while</span>的判断，并在循环语句中改变这个变量,以便判断语句能在循环一定次数后停止</span></span><br></pre></td></tr></table></figure>



<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 用while求一个1，2，3...100相加的结果</span></span><br><span class="line"><span class="keyword">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">1</span> <span class="meta"># 提前定义的变量 </span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">sum</span> = <span class="keyword">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span> <span class="meta">#通过自加改变这个变量,自加到100时循环停止</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="keyword">sum</span>))</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-while-else循环"><a href="#2-3-2-while-else循环" class="headerlink" title="2.3.2 while..else循环"></a>2.3.2 while..else循环</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">count</span> &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   <span class="keyword">count</span> = <span class="keyword">count</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="keyword">count</span>, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="while简单形式"><a href="#while简单形式" class="headerlink" title="while简单形式"></a>while简单形式</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">flag = 1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (flag): <span class="built_in">print</span> (<span class="string">&#x27;欢迎访问菜鸟教程!&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Good bye!&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-4-for循环"><a href="#2-4-for循环" class="headerlink" title="2.4 for循环"></a>2.4 for循环</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="symbol">&lt;variable&gt;</span> in <span class="symbol">&lt;sequence&gt;</span>:</span><br><span class="line">    <span class="symbol">&lt;statements&gt;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="symbol">&lt;statements&gt;</span></span><br><span class="line">#<span class="symbol">&lt;variable&gt;</span>是自定义的变量</span><br><span class="line">#<span class="symbol">&lt;sequence&gt;</span>是一组数，可以是集合，列表，元祖等</span><br></pre></td></tr></table></figure>
<ul>
<li>range(函数):生成一组数<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">range</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#数字0-9</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">range</span>(<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line"><span class="comment">#数字10-15</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">range</span>(<span class="number">10</span>,<span class="number">100</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#生成10-100的数，每个数相差(步调为)5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>for实例</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [1,2,3,4,5]:</span><br><span class="line">   <span class="built_in">print</span>(x)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(10,100,5)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>1.Python变量</title>
    <url>/2017/12/01/Python/1.Python%E5%8F%98%E9%87%8F(%E5%8C%85%E5%90%AB1.1%E5%92%8C1.2)/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第一章-变量"><a href="#第一章-变量" class="headerlink" title="第一章 变量"></a>第一章 变量</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>学习一门编程语言，首先要知道编程语言的作用，编程语言简单来说，就是用来写<strong>程序</strong>的，程序是计算机应用的载体，程序员通过编写程序进而操作计算机。</p>
<p>这里和我们平时操作计算机不同，我们操作计算机更多的是使用程序，但编写程序的目的更多是制作程序，所以有必要更全面深入的了解计算机。</p>
<p>计算机本质就是完成数据的计算，这里包括对数据的存储，对数据的计算，最后把计算的结果进行传输，对应这些功能的计算机三大部件如下：</p>
<table>
<thead>
<tr>
<th>计算</th>
<th>存储</th>
<th>IO</th>
</tr>
</thead>
<tbody><tr>
<td>cpu:运算器ALU</td>
<td>cpu寄存器</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>高速缓存</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>内存: 物理内存、虚拟内存</td>
<td>-</td>
</tr>
<tr>
<td>-</td>
<td>外存：硬盘、移动存储(U盘，移动硬盘)、ROM BIOS</td>
<td>-</td>
</tr>
</tbody></table>
<p>计算、存储、IO称为CPU三大核心部件，也是编程所主要涉及到的三大部件。其中程序语言的<strong>变量</strong>是放在计算机存储的部件中，循环和判断等<strong>流程控制</strong>语句是靠cpu去完成相应控制和计算。</p>
<h2 id="1-2-基础变量介绍"><a href="#1-2-基础变量介绍" class="headerlink" title="1.2 基础变量介绍"></a>1.2 基础变量介绍</h2><p><strong>变量是编程语言存储数据的方式</strong>，编程语言中把变量按不同类型进行分类，每一种变量存储不同类型的数据，不同的变量是不同的数据结构。</p>
<p><strong>数据结构</strong>是计算机存储数据时，数据的组成方式，也是计算机软件开发的基础学科。</p>
<p>基础变量是最基本的数据结构，常见的有数字(包括整数，浮点数)，字符串，数组等。</p>
<p>python中定义基础变量不需要声明类型（系统自动判断），每个变量使用前必须被赋值</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line"><span class="comment">#其他语言要指定变量类型:int counter = 100</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line"><span class="keyword">name</span>    = <span class="string">&quot;runoob&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量</span></span><br><span class="line"><span class="literal">print</span>(counter)</span><br><span class="line"><span class="literal">print</span>(miles)</span><br><span class="line"><span class="literal">print</span>(<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure>
<h2 id="1-3-基础数据类型"><a href="#1-3-基础数据类型" class="headerlink" title="1.3 基础数据类型"></a>1.3 基础数据类型</h2><ul>
<li><p>数字(包括整型和浮点型)</p>
</li>
<li><p>字符串</p>
</li>
</ul>
<blockquote>
<p>用单引号，或者双引号扩起来</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">n1 = <span class="number">123</span></span><br><span class="line">n2 = <span class="number">123.123</span></span><br><span class="line">s1 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">s2 = <span class="string">&quot;abc&quot;</span></span><br><span class="line">n1  #python通过‘#’号注释代码</span><br><span class="line">n2  </span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s1)</span></span> #在python中通过<span class="built_in">print</span>()函数可以输出变量，直接输出亦可</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(s2)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>列表</strong></li>
</ul>
<p>列表是集合类数据结构，类似数组，它主要存储多个数据，每个数据也称为一个元素。列表内数组的元素类型可以不同,用中括号定义。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">l1</span> = [<span class="number">1</span>,<span class="string">&quot;2a&quot;</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>列表里面的元素也可以是列表，这样就构成多维列表</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># 列生成表达式</span><br><span class="line"># 生成m*n行列表</span><br><span class="line"># test = [[0 for i in range(m)] for j in range(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">test </span>= [[0 for i in range(5)] for j in range(5)] #生成5*5的列表，元素值都是0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>元组</li>
</ul>
<p>元组类似列表，但元组里的元素不可改变，但可以包含可变对象，例如列表。元组用小括号定义。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">tup1</span> = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>集合</li>
</ul>
<p>是一种无序且不重复的序列，基本功能是成员包含测试或者去重，可以使用大括号或者set（）生成元组。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="attribute">b</span>=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#结果相同</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字典</li>
</ul>
<p>列表是有序对象的结合，<strong>字典</strong>是无序对象的集合。字典通过键值存取数据，列表通过位移偏移量存取。</p>
<p>a.键必须唯一</p>
<p>b.键必须是不可变数据类型</p>
<p>c.通过大括号和“：”来定义字典，或通过下标索引定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line">dict2[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;a1&quot;</span> <span class="comment"># 为字典dict2添加键为字符串“one”，值为字符串“a1”的值</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&#x27;a2&#x27;</span> <span class="comment"># 为字典dict2添加键为数字2，值为字字符串“2”的值</span></span><br></pre></td></tr></table></figure>
<p>d. 其他构建字典的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="title function_">dict</span>(<span class="params">[(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)]</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; &#123;<span class="attr">x</span>: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; <span class="title function_">dict</span>(<span class="params">Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span></span>)</span><br><span class="line">&#123;<span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>e. 字典结构自带的常用函数</p>
<p>1.get()：获得键的值<br>2.items()：以列表方式获得字典</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dict1<span class="selector-class">.get</span>(<span class="string">&#x27;name&#x27;</span>)  #获取字典dict1中键为字符串<span class="string">&#x27;name&#x27;</span>的值，效果等同于dict1<span class="selector-attr">[<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line"></span><br><span class="line">list = dict1<span class="selector-class">.items</span>() #返回字典的列表格式，并把它赋值给list变量</span><br></pre></td></tr></table></figure>


<h3 id="1-3-1-数据类型转换"><a href="#1-3-1-数据类型转换" class="headerlink" title="1.3.1 数据类型转换"></a>1.3.1 数据类型转换</h3><blockquote>
<p>不同数据类型之间，有的可以相互转换，有的不能,python常用自带函数进行转换，常见实例如下:</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="attr">x</span> = <span class="string">&#x27;178&#x27;</span> <span class="comment">#将字符串中的数字转换为整形</span></span><br><span class="line"><span class="attr">y</span> = int(x)</span><br><span class="line"><span class="comment"># x = &#x27;178a&#x27;</span></span><br><span class="line"><span class="comment"># y =int(x)</span></span><br><span class="line"><span class="comment"># 报错,字符型不能转换为int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="attr">x2</span> = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="attr">y2</span> =list(x2) <span class="comment">#将字符串转换为list</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-3-2-列表详解"><a href="#1-3-2-列表详解" class="headerlink" title="1.3.2 列表详解"></a>1.3.2 列表详解</h3><blockquote>
<p>列表是python中最常见的数据结构，类似数组。其中一些自带的函数具有代表性，用于其他各类数据结构中。</p>
</blockquote>
<blockquote>
<p>包括列表的添加，删除，索引，切片</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">la</span> = [<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,&#123;<span class="string">&#x27;a&#x27;</span>&#125;,&#123;<span class="number">1</span>:<span class="string">&#x27;a&#x27;</span>&#125;,True,[<span class="number">1</span>,<span class="number">2</span>],<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">#常见操作</span><br><span class="line"><span class="built_in">len</span>(<span class="keyword">la</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="built_in">count</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="built_in">index</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>+<span class="keyword">la</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">#添加删除操作</span><br><span class="line"><span class="keyword">la</span>.<span class="keyword">append</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="built_in">extend</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="keyword">insert</span>(<span class="number">3</span>,<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="built_in">remove</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="built_in">remove</span>(<span class="keyword">la</span>[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">la</span>.<span class="keyword">pop</span>()</span><br><span class="line"></span><br><span class="line">del <span class="keyword">la</span>[<span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中切片和索引是列表操作的精髓，其同样可以用到字符串和很多类似的一维数据结构中</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">la</span>[<span class="number">0</span>] #第<span class="number">1</span>个元素</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[-<span class="number">1</span>] #倒数第<span class="number">1</span>个元素</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[<span class="number">2</span>:<span class="number">5</span>] #第<span class="number">2</span>到第<span class="number">4</span>个元素</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[<span class="number">2</span>:] #第<span class="number">2</span>到最后一个元素(终点默认，不包括最后一个)</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[:<span class="number">5</span>] #第<span class="number">1</span>个元素到最后<span class="number">1</span>个元素(起点默认)</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>] #<span class="number">2</span>到<span class="number">5</span>个元素，步跳为<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[::<span class="number">2</span>] #第一个到最后一个元素，步跳为<span class="number">2</span>(起点和终点默认)</span><br><span class="line"></span><br><span class="line"><span class="attribute">la</span>[::-<span class="number">1</span>] #列表反转，步跳为-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>列表推导，一种通过循环来定义数据的方式</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">b</span> = [a*<span class="number">60</span> for i in a]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-字符串的其他操作"><a href="#1-3-3-字符串的其他操作" class="headerlink" title="1.3.3 字符串的其他操作"></a>1.3.3 字符串的其他操作</h3><blockquote>
<p>分割字符串split()</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;a:b&#x27;</span></span><br><span class="line">x,y=s.<span class="built_in">split</span>(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;a:b:c&#x27;</span></span><br><span class="line">x,y,z=s.<span class="built_in">split</span>(<span class="string">&#x27;:&#x27;</span>,<span class="number">2</span>) <span class="comment">#第二个参数代表两个分割(分为三个部分)，默认是一个分割</span></span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line">z</span><br></pre></td></tr></table></figure>

<blockquote>
<p>列表插入函数,join()</p>
</blockquote>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="string">&#x27;x&#x27;</span>.join(list)</span></span><br><span class="line"><span class="meta">#表示把x插入到list的每个元素之间，形成一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#1</span></span><br><span class="line">x3 =[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">y3 =<span class="string">&#x27;&#x27;</span>.join(x3)</span><br><span class="line">y3</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;1ab2&#x27;</span> <span class="meta">#输出字符串 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Python函数</title>
    <url>/2017/12/02/Python/3.%20%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="第三章-函数"><a href="#第三章-函数" class="headerlink" title="第三章 函数"></a>第三章 函数</h1><blockquote>
<p>Python原创教程，持续更新</p>
</blockquote>
<span id="more"></span>

<h2 id="3-1-函数本质"><a href="#3-1-函数本质" class="headerlink" title="3.1 函数本质"></a>3.1 函数本质</h2><blockquote>
<p>函数，也称方法，是一系列运算集合,一个函数本质由以下要素构成:</p>
</blockquote>
<ul>
<li><p>名字</p>
</li>
<li><p>参数</p>
</li>
<li><p>运算流程(方法体内)</p>
</li>
<li><p>返回值</p>
</li>
</ul>
<blockquote>
<p>其中参数和返回值是可选的</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无参数，无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span></span>:</span><br><span class="line">    print(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有两个参数x，y</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(x,y)</span></span>:</span><br><span class="line">    z=x+y</span><br><span class="line">    print(z)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 无参数，有返回值    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span></span>:</span><br><span class="line">    z=<span class="number">100</span></span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 有参数，有返回值(最常见的函数)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">(x,y,z)</span></span>:</span><br><span class="line">    w=x+y*z</span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>10. 字符串</title>
    <url>/2018/09/21/Python/10.%20%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第十章-文件与异常"><a href="#第十章-文件与异常" class="headerlink" title="第十章 文件与异常"></a>第十章 文件与异常</h1><h2 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1.文件操作"></a>1.文件操作</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 1.txt 文件内容</span></span><br><span class="line"><span class="symbol">a:</span> aaa</span><br><span class="line"><span class="symbol">b:</span> bbb</span><br><span class="line"><span class="symbol">c:</span> ccc</span><br><span class="line"><span class="symbol">d:</span> ddd :d222</span><br></pre></td></tr></table></figure>


<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">data1 = <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>) <span class="comment">#open函数生成一个文件对象</span></span><br><span class="line"></span><br><span class="line">data2 = <span class="built_in">open</span>(<span class="string">&#x27;2.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#w是从头开始写，a是从文件尾开始写 参数‘w’，代表可写，无该文件时会创建该文件，默认为r</span></span><br><span class="line"></span><br><span class="line">data2.<span class="built_in">write</span>(<span class="string">&#x27;hello /n world /n&#x27;</span>) <span class="comment">#将字符串写入文件中</span></span><br><span class="line"></span><br><span class="line">data1.<span class="built_in">close</span>() <span class="comment">#关闭文件</span></span><br><span class="line"></span><br><span class="line">data2.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> = open(&#x27;1.<span class="title">txt&#x27;</span>)</span></span><br><span class="line"><span class="title">for</span> i <span class="keyword">in</span> <span class="class"><span class="keyword">data</span></span></span><br><span class="line">    print(i)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>




<h2 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2.异常处理"></a>2.异常处理</h2><ul>
<li>1<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">    code1</span><br><span class="line"><span class="symbol">except:</span></span><br><span class="line">    code2 <span class="meta">#如果code1出现错误，执行code2部分</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li>2</li>
</ul>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    code1</span><br><span class="line"><span class="keyword">except</span> <span class="type">ValueError</span>: </span><br><span class="line">    code2 <span class="comment">#如果code1出现ValueError错误，执行code2部分   </span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 错误类型有很多，例如IOError()</span></span><br></pre></td></tr></table></figure>
<ul>
<li>3</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">try:</span></span><br><span class="line">    code1</span><br><span class="line"><span class="symbol">except:</span></span><br><span class="line">    code2</span><br><span class="line"><span class="symbol">finally:</span></span><br><span class="line">    code3 <span class="meta">#code3是无论是否出错，都会执行的代码块,例如文件关闭</span></span><br></pre></td></tr></table></figure>
<ul>
<li>4</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;It;s...&#x27;</span>,file=data)</span><br><span class="line">exceot IOError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;File error&#x27;</span>+<span class="built_in">str</span>(err))</span><br><span class="line"></span><br><span class="line"><span class="comment">#省去finnaly，with可以妥善关闭一个文件</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>3.2 重要关键字</title>
    <url>/2018/05/30/Python/3.1%20%E9%87%8D%E8%A6%81%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h2 id="3-2-与函数有关的重要关键字"><a href="#3-2-与函数有关的重要关键字" class="headerlink" title="3.2 与函数有关的重要关键字"></a>3.2 与函数有关的重要关键字</h2><h3 id="3-2-1-lambda表达式"><a href="#3-2-1-lambda表达式" class="headerlink" title="3.2.1 lambda表达式"></a>3.2.1 lambda表达式</h3><blockquote>
<p>一种函数的简写形式,类似匿名函数</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">func</span> = lambda x:x+<span class="number">1</span></span><br><span class="line"><span class="attribute">func</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#func为函数名，x为参数， :后是表达式</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">func2</span> = lambda x,y,z:x+y+z</span><br><span class="line"><span class="attribute">func2</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#匿名函数的形式</span></span><br><span class="line"><span class="attribute">def</span> f(x):</span><br><span class="line">    <span class="attribute">return</span> lambda y:x+y</span><br><span class="line"><span class="attribute">a</span> = f(<span class="number">2</span>) # a是一个函数对象</span><br><span class="line"><span class="attribute">a</span>(<span class="number">22</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-global关键字"><a href="#3-2-2-global关键字" class="headerlink" title="3.2.2 global关键字"></a>3.2.2 global关键字</h3><p>在编写程序的时候，如果想为一个在函数外的变量重新赋值，并且这个变量会作用于许多函数中时，就需要告诉python这个变量的作用域是全局变量。此时用global语句就可以变成这个任务，也就是说没有用global语句的情况下，是不能修改全局变量的。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"># coding:utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> = <span class="number">0</span></span><br><span class="line">def <span class="function"><span class="title">fun</span><span class="params">()</span></span>:</span><br><span class="line">    global <span class="keyword">var</span> # 此处是global对<span class="keyword">var</span>的声明，只有声明后，才可以在这个函数中改变<span class="keyword">var</span>的值</span><br><span class="line">    <span class="keyword">var</span> = <span class="number">5</span></span><br><span class="line">print <span class="keyword">var</span> # <span class="number">0</span></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span></span><br><span class="line">print <span class="keyword">var</span> # <span class="number">5</span></span><br><span class="line">#如果不加global声明， 第二次打印<span class="keyword">var</span>还是<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h3 id="3-2-3-yield关键字-生成器"><a href="#3-2-3-yield关键字-生成器" class="headerlink" title="3.2.3 yield关键字(生成器)"></a>3.2.3 yield关键字(生成器)</h3><blockquote>
<p>迭代器和生成器的概念</p>
</blockquote>
<pre><code>1.迭代器协议
</code></pre>
<ul>
<li><p>对象需要提供next方法，它要么返回迭代中的下一项，要么就引起一个StopIteration异常，以终止迭代 </p>
</li>
<li><p>可迭代对象就是：实现了迭代器协议的对象</p>
</li>
<li><p>协议是一种约定，可迭代对象实现迭代器协议，Python的内置工具(如for循环，sum，min，max函数等)使用迭代器协议访问对象</p>
</li>
<li><p>通过dir()查看是否实现__iter__即迭代器协议</p>
<p>  2.生成器协议</p>
</li>
<li><p>生成器可以不立即返回全部结果，而是需要的适合逐个返回结果，因此生成器自动实现迭代器协议</p>
</li>
<li><p>生成器函数，通过在函数里添加yield代替return，yield一次返回一个结果</p>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">N</span>):</span><br><span class="line">    res=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        res.append(i*i)</span><br><span class="line">    rerurn res</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> g(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">N</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成器表达式，类似列表推导，返回一个迭代器，而不是全部结果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares1 = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]<span class="comment">#结果，一个列表</span></span><br><span class="line">squares2 = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))<span class="comment">#生成器</span></span><br><span class="line"><span class="built_in">next</span>(squares2)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用yield改写函数</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">fab</span><span class="params">(max)</span>: </span></span><br><span class="line"><span class="function">   n, a, b =</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">   <span class="keyword">while</span> n &lt; max: </span><br><span class="line">       print b </span><br><span class="line">       a, b = b, a + b </span><br><span class="line">       n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">fab</span><span class="params">(max)</span>: </span></span><br><span class="line"><span class="function">    n, a, b =</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">    <span class="keyword">while</span> n &lt; max: </span><br><span class="line">        yield b </span><br><span class="line">        <span class="meta"># print b </span></span><br><span class="line">        a, b = b, a + b </span><br><span class="line">        n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>a.yield 的作用就是把一个函数变成一个generator，带有yield的函数不再是一个普通函数，Python解释器会将其视为一个generator，调用fab(5)不会执行 fab 函数，<strong>而是返回一个 iterable 对象！</strong></p>
<p>b.在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。</p>
<p>c.改写fab函数如果通过返回List能满足复用性的要求，但是更有经验的开发者会指出，该函数在运行中占用的内存会随着参数max的增大而增大，如果要控制内存占用，最好不要用List来保存中间结果，而是通过 iterable 对象来迭代。</p>
]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>5.面向对象</title>
    <url>/2018/09/21/Python/5.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-2/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第五章-面向对象"><a href="#第五章-面向对象" class="headerlink" title="第五章 面向对象"></a>第五章 面向对象</h1><h2 id="5-1-继承"><a href="#5-1-继承" class="headerlink" title="5.1 继承"></a>5.1 继承</h2><ul>
<li>继承实现子类继承父类的方法和属性</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print(<span class="string">&quot;%s 吃 &quot;</span>%<span class="keyword">self</span>.name）</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print(<span class="string">&quot;%s 喝 &quot;</span> %<span class="keyword">self</span>.name)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="title">Animal</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.breed ＝ <span class="string">&#x27;猫&#x27;</span></span><br><span class="line">        <span class="comment">#属性不必再单独定义</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="string">&#x27;喵喵叫&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">Animal</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.breed ＝ <span class="string">&#x27;狗&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cry</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="string">&#x27;汪汪叫&#x27;</span></span><br></pre></td></tr></table></figure>


<h3 id="5-5-1-多继承"><a href="#5-5-1-多继承" class="headerlink" title="5.5.1 多继承"></a>5.5.1 多继承</h3><ul>
<li>可以继承多个类</li>
<li>继承类分为<strong>经典类</strong>和<strong>新式类</strong></li>
<li>当前类或者父类继承了object类，那么该类便是新式类，否则便是经典类。</li>
<li>经典类时，多继承会按照深度优先查找覆盖方法</li>
<li>新式类时，多继承会按照广度优先查找覆盖方法</li>
<li>子类中，super()可以调用父类的属性和方法</li>
</ul>
<blockquote>
<p>调用super()的实例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.parent = <span class="string">&#x27;I\&#x27;m the parent.&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Parent&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self,message</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%s from Parent&quot;</span> %message)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#super(FooChild,self).__init__() //python2语法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()  </span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Child&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bar</span>(<span class="params">self,message</span>):</span><br><span class="line">        <span class="comment">#super(FooChild, self).bar(message)//这里是python2的语法</span></span><br><span class="line">        <span class="built_in">super</span>().bar(message)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;Child bar fuction&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (self.parent) <span class="comment">#继承父类属性</span></span><br><span class="line">        </span><br><span class="line">C = Child()</span><br><span class="line">C.bar(<span class="string">&#x27;HelloWorld&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果:</span></span><br><span class="line"><span class="comment">#Parent</span></span><br><span class="line"><span class="comment">#Child</span></span><br><span class="line"><span class="comment">#HelloWorld from Parent</span></span><br><span class="line"><span class="comment">#Child bar function</span></span><br><span class="line"><span class="comment">#I&#x27;m the parent</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多继承顺序实例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A Hello:&quot;</span>, self)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B Eating:&quot;</span>, self)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;C Eating:&quot;</span>, self)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(B, C):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">super</span>().say()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;D Hello:&quot;</span>, self)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dinner</span>(<span class="params">self</span>):  </span><br><span class="line">        self.say()  </span><br><span class="line">        <span class="built_in">super</span>().say()  </span><br><span class="line">        self.eat()  </span><br><span class="line">        <span class="built_in">super</span>().eat()  </span><br><span class="line">        C.eat(self) </span><br><span class="line">        </span><br><span class="line">d = D() </span><br><span class="line">d.eat()  </span><br><span class="line">C.eat(d) </span><br><span class="line">D.__mro__ <span class="comment">#类的一个继承顺序</span></span><br><span class="line">d.dinner() </span><br></pre></td></tr></table></figure>
<h2 id="5-2-封装"><a href="#5-2-封装" class="headerlink" title="5.2 封装"></a>5.2 封装</h2><ul>
<li>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别。</li>
<li>将内容封装到类</li>
<li>从某处调用被封装的内容(通过对象或者self)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="comment">#构造方法，根据类创建对象时自动执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,age)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(<span class="keyword">self</span>)</span></span>： </span><br><span class="line">        print(<span class="keyword">self</span>.name,<span class="keyword">self</span>.name)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#自动执行__init__方法</span></span><br><span class="line">obj1 = B(<span class="string">&#x27;anda&#x27;</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">print(obj1.name) <span class="comment">#直接调用对象属性</span></span><br><span class="line"></span><br><span class="line">obj1.f1() <span class="comment">#obj1将self作为参数传递给f1(),因此self就是obj1，实现self的间接调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-3-多态"><a href="#5-3-多态" class="headerlink" title="5.3 多态"></a>5.3 多态</h2><ul>
<li>多态是同一个行为具有多个不同表现形式或形态的能力。</li>
<li>多态就是同一个接口，使用不同的实例而执行不同操作</li>
<li>实现多态的三要素(继承、重写、父类引用指向子类对象)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">F1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S1</span>(<span class="title class_ inherited__">F1</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;S1.show&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S2</span>(<span class="title class_ inherited__">F1</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;S2.show&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 由于在Java或C#中定义函数参数时，必须指定参数的类型</span></span><br><span class="line"><span class="comment"># 为了让Func函数既可以执行S1对象的show方法，又可以执行S2对象的show方法，所以，定义了一个S1和S2类的父类</span></span><br><span class="line"><span class="comment"># 而实际传入的参数是：S1对象和S2对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Func</span>(<span class="params">F1 obj</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Func函数需要接收一个F1类型或者F1子类的类型&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span> obj.show()</span><br><span class="line"> </span><br><span class="line">s1_obj = S1()</span><br><span class="line">Func(s1_obj) <span class="comment"># 在Func函数中传入S1类的对象 s1_obj，执行 S1 的show方法，结果：S1.show</span></span><br><span class="line"> </span><br><span class="line">s2_obj = S2()</span><br><span class="line">Func(s2_obj) <span class="comment"># 在Func函数中传入Ss类的对象 ss_obj，执行 Ss 的show方法，结果：S2.show</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-4-type-产生对象"><a href="#5-4-type-产生对象" class="headerlink" title="5.4 type()产生对象"></a>5.4 type()产生对象</h2><blockquote>
<p>Python中一切事物都是对象,类也是</p>
</blockquote>
<blockquote>
<p>类可由type类实力化产生</p>
</blockquote>
<blockquote>
<p>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象</p>
</blockquote>
<ul>
<li>创建类的两种方式:</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">case</span> <span class="number">1</span>:普通方式</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Foo</span>(<span class="symbol">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">func</span>(<span class="symbol">self</span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">hello</span> <span class="symbol">wupeiqi</span>&#x27;</span><br><span class="line">        </span><br><span class="line"># <span class="symbol">case</span> <span class="symbol">2:</span>特殊方式</span><br><span class="line"></span><br><span class="line"><span class="symbol">def</span> <span class="symbol">func</span>(<span class="symbol">self</span>):</span><br><span class="line">    <span class="symbol">print</span> &#x27;<span class="symbol">hello</span> <span class="symbol">wupeiqi</span>&#x27;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">Foo</span> = <span class="symbol">type</span>(&#x27;<span class="symbol">Foo</span>&#x27;,(<span class="symbol">object,</span>), &#123;<span class="string">&#x27;func&#x27;</span>: func&#125;)</span><br><span class="line">#type第一个参数：类名</span><br><span class="line">#type第二个参数：当前类的基类</span><br><span class="line">#type第三个参数：类的成员</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-5-类的特殊成员"><a href="#5-5-类的特殊成员" class="headerlink" title="5.5 类的特殊成员"></a>5.5 类的特殊成员</h2><p>1.__ doc__:表示类的描述</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 描述类信息，这是用于看片的神奇 &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(Foo.__doc__)</span><br><span class="line"><span class="comment">#输出：类的描述信息</span></span><br></pre></td></tr></table></figure>

<p>2.__ module__:表示当前操作对象在哪个模块</p>
<blockquote>
<p>模块:组织函数和类的单位(类似java的一类一文件，有时不同模块可能有同名函数),例如Django</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(obj.__module__)</span></span> #输出对象所在模块</span><br></pre></td></tr></table></figure>


<p>3.__ class__：表示当前操作对象的是什么</p>
<blockquote>
<p>类</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(obj.__class__)</span></span> #输出对象所在类</span><br></pre></td></tr></table></figure>

<p>4.__ init(self,..)__:<br>构造方法、类创建对象时自动执行</p>
<p>5.__ del(self,..)__:<br>析构方法、当对象在内存释放时、自动触发执行。</p>
<blockquote>
<p>此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以，析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p>
</blockquote>
<p>6.__ call(self,..)__:<br>除析构方法外，执行对象的另一种特殊方法,对象加括号执行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Foo:</span></span><br><span class="line"><span class="symbol"> </span></span><br><span class="line"><span class="symbol">    <span class="symbol">def</span></span> <span class="symbol">__init__</span>(<span class="symbol">self</span>):</span><br><span class="line">        <span class="symbol">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__call__</span>(<span class="symbol">self, </span>*<span class="symbol">args, </span>**<span class="symbol">kwargs</span>):</span><br><span class="line"> </span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__call__</span>&#x27;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">obj</span> = <span class="symbol">Foo</span>() # 执行 <span class="symbol">__init__</span></span><br><span class="line"><span class="symbol">obj</span>()       # 执行 <span class="symbol">__call__</span></span><br></pre></td></tr></table></figure>

<p>7.__ dict__:<br>显示类(静态变量、方法)和对象(普通字段)的所以成员</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Province:</span><br><span class="line"> </span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> __init__(self, name, <span class="keyword">count</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="keyword">count</span> = <span class="keyword">count</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> func(self, *args, **kwargs):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"> </span><br><span class="line"># 获取类的成员，即：静态字段、方法、</span><br><span class="line"><span class="keyword">print</span> Province.__dict__</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;func&#x27;</span>: , <span class="string">&#x27;__init__&#x27;</span>: , <span class="string">&#x27;__doc__&#x27;</span>: None&#125;</span><br><span class="line"> </span><br><span class="line">obj1 = Province(<span class="string">&#x27;HeBei&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">print</span> obj1.__dict__</span><br><span class="line"># 获取 对象obj1 的成员</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">10000</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HeBei&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">obj2 = Province(<span class="string">&#x27;HeNan&#x27;</span>, <span class="number">3888</span>)</span><br><span class="line"><span class="keyword">print</span> obj2.__dict__</span><br><span class="line"># 获取 对象obj1 的成员</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">3888</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HeNan&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>__ str__:如果一个类中定义了__str__方法，那么在打印(print)对象时，默认输出该方法的返回值。</li>
</ol>
<p>9.__ getitem__、__ setitem__、__ delitem__</p>
<blockquote>
<p>用于对象的索引操作，如字典。以上分别表示获取、设置、删除数据</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Foo</span>(<span class="symbol">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__getitem__</span>(<span class="symbol">self, <span class="symbol">key</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__getitem__</span>&#x27;,<span class="symbol">key</span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__setitem__</span>(<span class="symbol">self, <span class="symbol">key</span>, <span class="symbol">value</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__setitem__</span>&#x27;,<span class="symbol">key,<span class="symbol">value</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__delitem__</span>(<span class="symbol">self, <span class="symbol">key</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__delitem__</span>&#x27;,<span class="symbol">key</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">obj</span> = <span class="symbol">Foo</span>()</span><br><span class="line"> </span><br><span class="line"><span class="symbol">result</span> = <span class="symbol">obj</span>[&#x27;<span class="symbol">k1</span>&#x27;]      # 自动触发执行 <span class="symbol">__getitem__</span></span><br><span class="line"><span class="symbol">obj</span>[&#x27;<span class="symbol">k2</span>&#x27;] = &#x27;<span class="symbol">wupeiqi</span>&#x27;   # 自动触发执行 <span class="symbol">__setitem__</span></span><br><span class="line"><span class="symbol">del</span> <span class="symbol">obj</span>[&#x27;<span class="symbol">k1</span>&#x27;]           # 自动触发执行 <span class="symbol">__delitem__</span></span><br></pre></td></tr></table></figure>

<p>10.<strong>getslice__、__setslice__、__delslice</strong></p>
<blockquote>
<p>用于对象的分片操作(如列表)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getslice__</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__getslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setslice__</span>(<span class="params">self, i, j, sequence</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__setslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delslice__</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__delslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line">obj[-<span class="number">1</span>:<span class="number">1</span>]                   <span class="comment"># 自动触发执行 __getslice__</span></span><br><span class="line">obj[<span class="number">0</span>:<span class="number">1</span>] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]    <span class="comment"># 自动触发执行 __setslice__</span></span><br><span class="line"><span class="keyword">del</span> obj[<span class="number">0</span>:<span class="number">2</span>]                <span class="comment"># 自动触发执行 __delslice__</span></span><br></pre></td></tr></table></figure>
<p>11.__ iter__:迭代器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##case 1:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 报错：TypeError: &#x27;Foo&#x27; object is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## case 2:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 报错：TypeError: iter() returned non-iterator of type &#x27;NoneType&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## case 3:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sq</span>):</span><br><span class="line">        self.sq = sq</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.sq)</span><br><span class="line"> </span><br><span class="line">obj = Foo([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure>
<p>迭代的变种</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">obj = iter([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line">for i <span class="keyword">in</span> obj:</span><br><span class="line">    print i</span><br><span class="line"></span><br><span class="line">############################</span><br><span class="line">obj = iter([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line">while <span class="literal">True</span>:</span><br><span class="line">    val = obj.next()</span><br><span class="line">    print val</span><br></pre></td></tr></table></figure>


<p>12.__new__方法</p>
<ul>
<li><p>继承自object的新式类才有__new__</p>
</li>
<li><p>__new__方法接受的参数虽然也是和__init__一样，但__init__是在类实例创建之后调用，而 __new__方法正是创建这个类实例的方法。</p>
</li>
<li><p>依照Python官方文档，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。</p>
</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># 创建一个类，继承<span class="built_in">int</span>，并返回绝对值</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PositiveInteger(<span class="params">int</span>)</span>:</span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">value</span>)</span>:</span><br><span class="line">        super(PositiveInteger, self).<span class="constructor">__init__(<span class="params">self</span>, <span class="params">abs</span>(<span class="params">value</span>)</span>)</span><br><span class="line"> </span><br><span class="line">i = <span class="constructor">PositiveInteger(-3)</span></span><br><span class="line">print i</span><br><span class="line">#结果还是-<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PositiveInteger(<span class="params">int</span>)</span>:</span><br><span class="line">    def <span class="constructor">__new__(<span class="params">cls</span>, <span class="params">value</span>)</span>:</span><br><span class="line">        return super(PositiveInteger, cls).<span class="constructor">__new__(<span class="params">cls</span>, <span class="params">abs</span>(<span class="params">value</span>)</span>)</span><br><span class="line"> </span><br><span class="line">i = <span class="constructor">PositiveInteger(-3)</span></span><br><span class="line">print i</span><br><span class="line">#结果是 <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为类的每一次实例化都是通过__new__实现的,通过重载类来实现单例</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Singleton</span>(<span class="title">object</span>):</span></span><br><span class="line"><span class="class">    def __new__(<span class="title">cls</span>):</span></span><br><span class="line"><span class="class">        # 关键在于这，每一次实例化的时候，我们都只会返回这同一个<span class="keyword">instance</span>对象</span></span><br><span class="line"><span class="class">        if not hasattr(<span class="title">cls</span>, &#x27;<span class="title">instance&#x27;</span>):</span></span><br><span class="line"><span class="class">            cls.<span class="keyword">instance</span> = super(<span class="type">Singleton</span>, <span class="title">cls</span>).__new__(<span class="title">cls</span>)</span></span><br><span class="line"><span class="class">        return cls.<span class="keyword">instance</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">obj1 = <span class="type">Singleton</span>()</span></span><br><span class="line"><span class="class">obj2 = <span class="type">Singleton</span>()</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">obj1.attr1 = &#x27;value1&#x27;</span></span><br><span class="line"><span class="class">print obj1.attr1, obj2.attr1</span></span><br><span class="line"><span class="class">print obj1 is obj2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>6.类的系统成员</title>
    <url>/2018/09/21/Python/6.%20%E7%B1%BB%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%88%90%E5%91%98(%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7)/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第六章-类的系统成员-内置属性"><a href="#第六章-类的系统成员-内置属性" class="headerlink" title="第六章 类的系统成员(内置属性)"></a>第六章 类的系统成员(内置属性)</h1><h2 id="name-和-main"><a href="#name-和-main" class="headerlink" title="__ name__和 __ main__"></a>__ name__和 __ main__</h2><blockquote>
<p>Python使用缩进对齐组织代码的执行，所有没有缩进的代码，都会在载入时自动执行。每个文件（模块）都可以任意写一些没有缩进的代码，并在载入时自动执行。为了区分 主执行代码和被调用文件，Python引入了变量：__ name__。</p>
</blockquote>
<ul>
<li><p>当文件是被调用时，__ name__的值为模块名</p>
</li>
<li><p>当文件被执行时，__ name__的值为 ‘__ main__’</p>
</li>
</ul>
<h2 id="init-和-new-和-call"><a href="#init-和-new-和-call" class="headerlink" title="__ init__和__ new__和__ call__"></a>__ init__和__ new__和__ call__</h2><blockquote>
<p>__ new__： 对象的创建，是一个静态方法，第一个参数是cls。(想想也是，不可能是self，对象还没创建，哪来的self)</p>
</blockquote>
<blockquote>
<p>__ init__ ： 对象的初始化， 是一个实例方法，第一个参数是self。</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Foo</span>(<span class="symbol">object</span>):  </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__new__</span>(<span class="symbol">cls, </span>*<span class="symbol">args, </span>**<span class="symbol">kwargs</span>):  </span><br><span class="line">        <span class="symbol">print</span>(&#x27;<span class="symbol">a</span>&#x27;)</span><br><span class="line">  </span><br><span class="line"><span class="symbol">Foo</span>()</span><br><span class="line">#输出<span class="symbol">a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>__ call__ ： python中函数是一个对象，类也是一个对象，可以通过__ call__方法调用对象(如调用函数一样)</p>
</blockquote>
<p>例1</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Foo</span>(<span class="symbol">object</span>):  </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__call__</span>(<span class="symbol">self</span>):  </span><br><span class="line">        <span class="symbol">print</span>(&#x27;<span class="symbol">b</span>&#x27;)  </span><br><span class="line">  </span><br><span class="line"><span class="symbol">f</span> = <span class="symbol">Foo</span>()#类<span class="symbol">Foo</span>可<span class="symbol">call</span>  </span><br><span class="line"><span class="symbol">f</span>()#对象<span class="symbol">f</span>可<span class="symbol">call</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, friend</span>):</span><br><span class="line">        <span class="built_in">print</span>（<span class="string">&#x27;My name is %s...&#x27;</span>%self.name）</span><br><span class="line">        <span class="built_in">print</span>（<span class="string">&#x27;My gender is %s...&#x27;</span>%self.gender</span><br><span class="line">        <span class="built_in">print</span>（<span class="string">&#x27;My friend is %s...&#x27;</span>%friend）</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&#x27;anda&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">p(<span class="string">&#x27;Tim&#x27;</span>) <span class="comment">#call方法调用对象(函数的方法)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在python中，类的行为就是这样，__new__、__init__、__call__等方法不是必须写的，会默认调用，如果自己定义了，就是override,可以custom。既然override了，通常也会显式调用进行补偿以达到extend的目的。</p>
</blockquote>
<h2 id="str-amp-rept-amp-repr"><a href="#str-amp-rept-amp-repr" class="headerlink" title="__ str__ &amp; __ rept__ &amp;__ repr__"></a>__ str__ &amp; __ rept__ &amp;__ repr__</h2><blockquote>
<p>__ str__让对象返回字符串的形式</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(Person: %s, %s)&#x27;</span><span class="string">%(self.name, self.gender)</span></span><br><span class="line">p = Person(<span class="string">&#x27;anda&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">print(p) <span class="comment"># __str__()</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>__ repr__ 返回一个可以用来表示对象的可打印字符串：</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name, gender)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(Person: %s, %s)&#x27;</span><span class="string">%(self.name, self.gender)</span></span><br><span class="line">    __repr__=__str__</span><br><span class="line">p = Person(<span class="string">&#x27;anda&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">p <span class="comment">#__repr__()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        pass</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(<span class="keyword">self</span>,num)</span></span>:</span><br><span class="line">        a,b = <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">self</span>.l=[]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range (num):</span><br><span class="line">            <span class="keyword">self</span>.l.append(a)</span><br><span class="line">            a,b= b,a+b</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.l</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> str(<span class="keyword">self</span>.l)</span><br><span class="line">    __repr__=__str__</span><br><span class="line">    </span><br><span class="line">f = Fib()</span><br><span class="line">f(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>



<h2 id="setitem-amp-getitem-amp-delitem"><a href="#setitem-amp-getitem-amp-delitem" class="headerlink" title="__ setitem__&amp;__ getitem__&amp;__ delitem()"></a>__ setitem__&amp;__ getitem__&amp;__ delitem()</h2><blockquote>
<p>使得对象和字典功能对应</p>
</blockquote>
<ul>
<li><p>__ setitem__:每当属性被赋值的时候都会调用该方法，因此不能再该方法内赋值 self.name &#x3D; value 会死循环</p>
</li>
<li><p>__ getitem__:当访问不存在的属性时会调用该方法</p>
</li>
<li><p>__ delitem__:当删除属性时调用该方法</p>
</li>
<li><p>__ dict__:对象的字典值</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        self[<span class="string">&#x27;B&#x27;</span>] = <span class="string">&quot;BB&quot;</span>  </span><br><span class="line">        self[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&quot;DD&quot;</span>  </span><br><span class="line">        <span class="keyword">del</span> self[<span class="string">&#x27;D&#x27;</span>]  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self,name,value</span>):  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">        @summary: 每当属性被赋值的时候都会调用该方法，因此不能再该方法内赋值 self.name = value 会死循环 </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;__setitem__:Set %s Value %s&quot;</span>%(name,value)  </span><br><span class="line">        self.__dict__[name] = value  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self,name</span>):  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="string">        @summary: 当访问不存在的属性时会调用该方法 </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;__getitem__:No attribute named &#x27;%s&#x27;&quot;</span>%name  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self,name</span>):  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="string">        @summary: 当删除属性时调用该方法 </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;__delitem__:Delect attribute &#x27;%s&#x27;&quot;</span>%name  </span><br><span class="line">        <span class="keyword">del</span> self.__dict__[name]  </span><br><span class="line">        <span class="built_in">print</span> self.__dict__  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">X = A()</span><br><span class="line">X[<span class="string">&#x27;a&#x27;</span>]=<span class="string">&#x27;aa&#x27;</span></span><br><span class="line">X[<span class="string">&#x27;b&#x27;</span>]=<span class="string">&#x27;bb&#x27;</span></span><br><span class="line">X.__dict__</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>4. 类与对象</title>
    <url>/2018/09/21/Python/4.%20%E7%B1%BB-1/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第四章-类与对象"><a href="#第四章-类与对象" class="headerlink" title="第四章 类与对象"></a>第四章 类与对象</h1><h2 id="4-1-类简述"><a href="#4-1-类简述" class="headerlink" title="4.1 类简述"></a>4.1 类简述</h2><ul>
<li>类是一个“模版”，可以包含<strong>变量</strong>和<strong>函数</strong>(即类是属性和方法的集合)</li>
<li>对象是类创建的实例，通过实例可以调用变量和函数</li>
<li>类中普通函数的必须有第一个参数，来代表该类调用函数的具体对象(一般取名为self)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类的基本语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    x = <span class="string">&#x27;x&#x27;</span> <span class="comment">#静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>: <span class="comment">#构造函数</span></span><br><span class="line">            <span class="keyword">self</span>.y = <span class="string">&#x27;y&#x27;</span> <span class="comment">#普通变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(<span class="keyword">self</span>)</span></span>: <span class="comment">#普通函数，无参数</span></span><br><span class="line">        print(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(<span class="keyword">self</span>,name)</span></span>: <span class="comment">#普通函数，有参数</span></span><br><span class="line">        print(<span class="string">&#x27;my name is %s&#x27;</span>%name)</span><br><span class="line">    </span><br><span class="line">obj1 = A() <span class="comment">#实例化对象，对象变量为obj1</span></span><br><span class="line">obj1.f1()  <span class="comment">#对象调用函数f1()</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-类成员"><a href="#4-2-类成员" class="headerlink" title="4.2 类成员"></a>4.2 类成员</h2><blockquote>
<p>类的结构图，其中变量也称属性，函数也称方法</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A<span class="function"><span class="params">(类成员)</span>--&gt;</span>B(变量)</span><br><span class="line">A--&gt;C(函数)</span><br><span class="line">A--&gt;D(方法属性)</span><br><span class="line">B--&gt;普通变量</span><br><span class="line">B--&gt;静态变量</span><br><span class="line">C--&gt;普通函数</span><br><span class="line">C--&gt;类函数</span><br><span class="line">C--&gt;静态函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="4-3-变量-属性"><a href="#4-3-变量-属性" class="headerlink" title="4.3 变量(属性)"></a>4.3 变量(属性)</h2><blockquote>
<p>类中的变量也叫属性，亦可叫字段，是类这种数据结构中保存多样数据的方式</p>
</blockquote>
<ul>
<li>普通字段属于对象(每个对象都存一份)</li>
<li>静态字段属于类(就类存有一份)</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Province</span>:</span></span><br><span class="line">    <span class="comment">#静态字段</span></span><br><span class="line">    country = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</span><br><span class="line">        <span class="comment">#普通字段</span></span><br><span class="line">        <span class="keyword">self</span>.name=name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Province(<span class="string">&#x27;河北省&#x27;</span>)</span><br><span class="line">访问普通字段</span><br><span class="line">print obj.name</span><br><span class="line"></span><br><span class="line">访问静态字段</span><br><span class="line">Province.country</span><br></pre></td></tr></table></figure>

<h2 id="4-4-函数-方法"><a href="#4-4-函数-方法" class="headerlink" title="4.4 函数(方法)"></a>4.4 函数(方法)</h2><blockquote>
<p>函数在类中也叫方法。通过方法，让类这种数据结构具有“运动”的特征，即类不仅可以保存数据，以可以操作处理数据，其中操作处理数据就是通过类方法实现。</p>
</blockquote>
<ul>
<li>普通方法:对象调用，至少一个self参数，执行方法自动调用具体对象给该方法</li>
<li>类方法:由类调用，至少一个cls参数，执行时自动调用cls给该方法</li>
<li>静态方法:由类调用，无默认参数</li>
</ul>
<blockquote>
<p>三种方法都存于类</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ord_func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print(普通方法)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line">    <span class="variable">@classemethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_func</span><span class="params">(cls)</span></span>:</span><br><span class="line">        print(类方法)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#定义静态方法</span></span><br><span class="line">    <span class="variable">@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_func</span><span class="params">()</span></span>:</span><br><span class="line">        print(静态方法)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用普通方法</span></span><br><span class="line">f = Foo()</span><br><span class="line">f.ord_func()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br></pre></td></tr></table></figure>

<h3 id="4-4-1-函数属性化"><a href="#4-4-1-函数属性化" class="headerlink" title="4.4.1 函数属性化"></a>4.4.1 函数属性化</h3><blockquote>
<p>通过装饰器，函数可以像属性一样调用</p>
</blockquote>
<ul>
<li>用@property装饰器定义</li>
<li><strong>仅有</strong>一个self参数</li>
<li>调用时无需括号</li>
</ul>
<blockquote>
<p>经典类(python2中常用)</p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">################ 定义 ###############</span><br><span class="line"><span class="keyword">class</span> Foo:</span><br><span class="line"> </span><br><span class="line">    def func(self):</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line">    # 定义属性</span><br><span class="line">    @property</span><br><span class="line">    def prop(self):</span><br><span class="line">        print(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">################ 调用 ###############</span><br><span class="line">foo_obj = Foo()</span><br><span class="line"> </span><br><span class="line">foo_obj.func()</span><br><span class="line">foo_obj.prop   #调用属性</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新式类</p>
</blockquote>
<p>由于新式类中具有三种访问方式，我们可以根据他们几个属性的访问特点，分别将三个方法定义为对同一个属性：</p>
<ul>
<li>获取</li>
<li>修改</li>
<li>删除</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># ############### 定义 ###############</span><br><span class="line"><span class="keyword">class</span> Goods(object):</span><br><span class="line"> </span><br><span class="line">    @property</span><br><span class="line">    def price(self):</span><br><span class="line">        print <span class="string">&#x27;@property&#x27;</span></span><br><span class="line"> </span><br><span class="line">    @price.setter</span><br><span class="line">    def price(self, value):</span><br><span class="line">        print <span class="string">&#x27;@price.setter&#x27;</span></span><br><span class="line"> </span><br><span class="line">    @price.deleter</span><br><span class="line">    def price(self):</span><br><span class="line">        print <span class="string">&#x27;@price.deleter&#x27;</span></span><br><span class="line"> </span><br><span class="line"># ############### 调用 ###############</span><br><span class="line">obj = Goods()</span><br><span class="line"> </span><br><span class="line">obj.price          # 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span><br><span class="line"> </span><br><span class="line">obj.price = <span class="number">123</span>    # 自动执行 @price.setter 修饰的 price 方法，并将  <span class="number">123</span> 赋值给方法的参数</span><br><span class="line"> </span><br><span class="line">del obj.price      # 自动执行 @price.deleter 修饰的 price 方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下是property的构造方法(静态变量的方式)中有个四个参数</p>
</blockquote>
<ul>
<li>第一个参数是方法名，调用 对象.属性 时自动触发执行方法</li>
<li>第二个参数是方法名，调用 对象.属性 ＝ XXX 时自动触发执行方法</li>
<li>第三个参数是方法名，调用 del 对象.属性 时自动触发执行方法</li>
<li>第四个参数是字符串，调用 对象.属性.<strong>doc</strong> ，此参数是该属性的描述信息</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>：</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bar</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wupeiqi&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># *必须两个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_bar</span><span class="params">(<span class="keyword">self</span>, value)</span></span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">return</span> <span class="string">&#x27;set value&#x27;</span> + value</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_bar</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;wupeiqi&#x27;</span></span><br><span class="line"> </span><br><span class="line">    BAR ＝ property(get_bar, set_bar, del_bar, <span class="string">&#x27;description...&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line">obj.BAR              <span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR = <span class="string">&quot;alex&quot;</span>     <span class="comment"># 自动调用第二个参数中定义的方法：set_bar方法，并将“alex”当作参数传入</span></span><br><span class="line">del Foo.BAR          <span class="comment"># 自动调用第三个参数中定义的方法：del_bar方法</span></span><br><span class="line">obj.BAE.__doc__      <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br></pre></td></tr></table></figure>

<h2 id="4-5-类变量-属性-扩展"><a href="#4-5-类变量-属性-扩展" class="headerlink" title="4.5 类变量(属性)扩展"></a>4.5 类变量(属性)扩展</h2><ul>
<li>静态变量(保存在类中)：在任何对方都能访问</li>
<li>私有静态变量(变量前加__)：只有在类的内部能访问</li>
<li>普通变量(在函数里的变量):对象可以访问、类内部可以访问、派生类中可以访问</li>
<li>普通私有变量(变量前加__):仅类内部能访问</li>
</ul>
<ol>
<li>静态变量：类可以访问、类内部可以访问、派生类中可以访问</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"> </span><br><span class="line">    name = <span class="string">&quot;全局变量&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print C.name</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="title">C</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print C.name</span><br><span class="line"> </span><br><span class="line">C.name         <span class="comment"># 类访问</span></span><br><span class="line"> </span><br><span class="line">obj = C()</span><br><span class="line">obj.func()     <span class="comment"># 类内部可以访问</span></span><br><span class="line"> </span><br><span class="line">obj_son = D()</span><br><span class="line">obj_son.show() <span class="comment"># 派生类中可以访问</span></span><br></pre></td></tr></table></figure>

<p>2.私有静态变量：仅类内部可以访问</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"> </span><br><span class="line">    __name = <span class="string">&quot;私有静态变量&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print C.__name</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="title">C</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print C.__name</span><br><span class="line"> </span><br><span class="line">C.__name       <span class="comment"># 类访问            错误</span></span><br><span class="line"> </span><br><span class="line">obj = C()</span><br><span class="line">obj.func()     <span class="comment"># 类内部可以访问    正确</span></span><br><span class="line"> </span><br><span class="line">obj_son = D()</span><br><span class="line">obj_son.show() <span class="comment"># 派生类中可以访问   错误</span></span><br></pre></td></tr></table></figure>

<p>3.普通变量</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.foo = <span class="string">&quot;普通变量&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="keyword">self</span>.foo 　<span class="comment">#　类内部访问</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="title">C</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="keyword">self</span>.foo　＃　派生类中访问</span><br><span class="line"> </span><br><span class="line">obj = C()</span><br><span class="line"> </span><br><span class="line">obj.foo     <span class="comment"># 通过对象访问</span></span><br><span class="line">obj.func()  <span class="comment"># 类内部访问</span></span><br><span class="line"> </span><br><span class="line">obj_son = D();</span><br><span class="line">obj_son.show()  <span class="comment"># 派生类中访问</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.私有字段</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.__foo = <span class="string">&quot;私有字段&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="keyword">self</span>.foo 　<span class="comment">#　类内部访问</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="title">C</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(<span class="keyword">self</span>)</span></span>:</span><br><span class="line">        print <span class="keyword">self</span>.foo　＃　派生类中访问</span><br><span class="line"> </span><br><span class="line">obj = C()</span><br><span class="line"> </span><br><span class="line">obj.__foo     <span class="comment"># 通过对象访问    错误</span></span><br><span class="line">obj.func()  <span class="comment"># 类内部访问        正确</span></span><br><span class="line"> </span><br><span class="line">obj_son = D();</span><br><span class="line">obj_son.show()  <span class="comment"># 派生类中访问  错误</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果想要强制访问私有字段，可以通过 【对象._类名__私有字段明 】访问（如：obj._C__foo），不建议强制访问私有成员。</p>
</blockquote>
<h2 id="4-6-类的特殊成员"><a href="#4-6-类的特殊成员" class="headerlink" title="4.6 类的特殊成员"></a>4.6 类的特殊成员</h2><blockquote>
<p>类的特殊成员包括特殊变量和特殊方法，其是系统定义的，不需要用户定义，一般具有普通变量和方法所不具有的特殊功能</p>
</blockquote>
<p>1.__ doc__:表示类的描述</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 描述类信息，这是用于看片的神奇 &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(Foo.__doc__)</span><br><span class="line"><span class="comment">#输出：类的描述信息</span></span><br></pre></td></tr></table></figure>

<p>2.__ module__:表示当前操作对象在哪个模块</p>
<blockquote>
<p>模块:组织函数和类的单位(类似java的一类一文件，有时不同模块可能有同名函数),例如Django</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(obj.__module__)</span></span> #输出对象所在模块</span><br></pre></td></tr></table></figure>


<p>3.__ class__：表示当前操作对象的是什么</p>
<blockquote>
<p>类</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print</span><span class="params">(obj.__class__)</span></span> #输出对象所在类</span><br></pre></td></tr></table></figure>

<p>4.__ init(self,..)__:<br>构造方法、类创建对象时自动执行</p>
<p>5.__ del(self,..)__:<br>析构方法、当对象在内存释放时、自动触发执行。</p>
<blockquote>
<p>此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以，析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p>
</blockquote>
<p>6.__ call(self,..)__:<br>除析构方法外，执行对象的另一种特殊方法,对象加括号执行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Foo:</span></span><br><span class="line"><span class="symbol"> </span></span><br><span class="line"><span class="symbol">    <span class="symbol">def</span></span> <span class="symbol">__init__</span>(<span class="symbol">self</span>):</span><br><span class="line">        <span class="symbol">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__call__</span>(<span class="symbol">self, </span>*<span class="symbol">args, </span>**<span class="symbol">kwargs</span>):</span><br><span class="line"> </span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__call__</span>&#x27;</span><br><span class="line"> </span><br><span class="line"><span class="symbol">obj</span> = <span class="symbol">Foo</span>() # 执行 <span class="symbol">__init__</span></span><br><span class="line"><span class="symbol">obj</span>()       # 执行 <span class="symbol">__call__</span></span><br></pre></td></tr></table></figure>

<p>7.__ dict__:<br>显示类(静态变量、方法)和对象(普通字段)的所以成员</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Province:</span><br><span class="line"> </span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> __init__(self, name, <span class="keyword">count</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="keyword">count</span> = <span class="keyword">count</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> func(self, *args, **kwargs):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;func&#x27;</span></span><br><span class="line"> </span><br><span class="line"># 获取类的成员，即：静态字段、方法、</span><br><span class="line"><span class="keyword">print</span> Province.__dict__</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;China&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;func&#x27;</span>: , <span class="string">&#x27;__init__&#x27;</span>: , <span class="string">&#x27;__doc__&#x27;</span>: None&#125;</span><br><span class="line"> </span><br><span class="line">obj1 = Province(<span class="string">&#x27;HeBei&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">print</span> obj1.__dict__</span><br><span class="line"># 获取 对象obj1 的成员</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">10000</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HeBei&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">obj2 = Province(<span class="string">&#x27;HeNan&#x27;</span>, <span class="number">3888</span>)</span><br><span class="line"><span class="keyword">print</span> obj2.__dict__</span><br><span class="line"># 获取 对象obj1 的成员</span><br><span class="line"># 输出：&#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">3888</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;HeNan&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>__ str__:如果一个类中定义了__str__方法，那么在打印(print)对象时，默认输出该方法的返回值。</li>
</ol>
<p>9.__ getitem__、__ setitem__、__ delitem__</p>
<blockquote>
<p>用于对象的索引操作，如字典。以上分别表示获取、设置、删除数据</p>
</blockquote>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf<span class="number">-8</span> -*-</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Foo</span>(<span class="symbol">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__getitem__</span>(<span class="symbol">self, <span class="symbol">key</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__getitem__</span>&#x27;,<span class="symbol">key</span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__setitem__</span>(<span class="symbol">self, <span class="symbol">key</span>, <span class="symbol">value</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__setitem__</span>&#x27;,<span class="symbol">key,<span class="symbol">value</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">__delitem__</span>(<span class="symbol">self, <span class="symbol">key</span></span>):</span><br><span class="line">        <span class="symbol">print</span> &#x27;<span class="symbol">__delitem__</span>&#x27;,<span class="symbol">key</span></span><br><span class="line"> </span><br><span class="line"><span class="symbol">obj</span> = <span class="symbol">Foo</span>()</span><br><span class="line"> </span><br><span class="line"><span class="symbol">result</span> = <span class="symbol">obj</span>[&#x27;<span class="symbol">k1</span>&#x27;]      # 自动触发执行 <span class="symbol">__getitem__</span></span><br><span class="line"><span class="symbol">obj</span>[&#x27;<span class="symbol">k2</span>&#x27;] = &#x27;<span class="symbol">wupeiqi</span>&#x27;   # 自动触发执行 <span class="symbol">__setitem__</span></span><br><span class="line"><span class="symbol">del</span> <span class="symbol">obj</span>[&#x27;<span class="symbol">k1</span>&#x27;]           # 自动触发执行 <span class="symbol">__delitem__</span></span><br></pre></td></tr></table></figure>

<p>10.<strong>getslice__、__setslice__、__delslice</strong></p>
<blockquote>
<p>用于对象的分片操作(如列表)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getslice__</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__getslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setslice__</span>(<span class="params">self, i, j, sequence</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__setslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delslice__</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;__delslice__&#x27;</span>,i,j</span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line">obj[-<span class="number">1</span>:<span class="number">1</span>]                   <span class="comment"># 自动触发执行 __getslice__</span></span><br><span class="line">obj[<span class="number">0</span>:<span class="number">1</span>] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]    <span class="comment"># 自动触发执行 __setslice__</span></span><br><span class="line"><span class="keyword">del</span> obj[<span class="number">0</span>:<span class="number">2</span>]                <span class="comment"># 自动触发执行 __delslice__</span></span><br></pre></td></tr></table></figure>
<p>11.__ iter__:迭代器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##case 1:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 报错：TypeError: &#x27;Foo&#x27; object is not iterable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## case 2:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">obj = Foo()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 报错：TypeError: iter() returned non-iterator of type &#x27;NoneType&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## case 3:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sq</span>):</span><br><span class="line">        self.sq = sq</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.sq)</span><br><span class="line"> </span><br><span class="line">obj = Foo([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure>
<p>迭代的变种</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">obj = iter([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line">for i <span class="keyword">in</span> obj:</span><br><span class="line">    print i</span><br><span class="line"></span><br><span class="line">############################</span><br><span class="line">obj = iter([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line"> </span><br><span class="line">while <span class="literal">True</span>:</span><br><span class="line">    val = obj.next()</span><br><span class="line">    print val</span><br></pre></td></tr></table></figure>

<h2 id="4-7-旧式类和新式类"><a href="#4-7-旧式类和新式类" class="headerlink" title="4.7 旧式类和新式类"></a>4.7 旧式类和新式类</h2><blockquote>
<p>从Python2.2开始，Python 引入了 new style class（新式类）</p>
</blockquote>
<ul>
<li>新式类类似Java，有一个根类object，所有类都继承自根类object</li>
<li>新式类跟经典类的差别主要是以下几点:</li>
</ul>
<p>a.新式类对象可以直接通过__class__属性获取自身类型:type</p>
<p>b.继承搜索的顺序发生了改变,经典类多继承属性搜索顺序: 先深入继承树左侧，再返回，开始找右侧;新式类多继承属性搜索顺序: 先水平搜索，然后再向上移动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	新式类</span></span><br><span class="line"><span class="string">    作为所有类的基类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;class A&quot;</span> </span><br><span class="line">		</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span>():  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	经典类</span></span><br><span class="line"><span class="string">    作为所有类的基类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;class A1&quot;</span>  </span><br><span class="line">		</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span>(<span class="title class_ inherited__">A1</span>):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">A</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;class D&quot;</span>  </span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D1</span>(<span class="title class_ inherited__">A1</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;class D1&quot;</span>  </span><br><span class="line">		</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(C, D):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E1</span>(C1, D1):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">e = E()</span><br><span class="line">e.foo()</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">e1 = E1()</span><br><span class="line">e1.foo()</span><br></pre></td></tr></table></figure>

<p>c.新式类增加了__slots__内置属性，可以把实例属性的种类锁定到__slots__规定的范围之中。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#比如只允许对A实例添加name和age属性</span></span><br><span class="line"><span class="meta"># -*- coding:utf-8 -*-  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(object):  </span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span>():  </span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) </span><br><span class="line">	</span><br><span class="line">a1 = A1()</span><br><span class="line">a = A()</span><br><span class="line"> </span><br><span class="line">a1.name1 = <span class="string">&quot;a1&quot;</span></span><br><span class="line">a.name1 = <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#A是新式类添加了__slots__ 属性,所以只允许添加 name age</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#A1经典类__slots__ 属性没用</span></span><br></pre></td></tr></table></figure>

<p>d.新式类增加了__getattribute__方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">A(<span class="params">object</span>)</span>:  </span><br><span class="line">    def <span class="constructor">__getattribute__(<span class="params">self</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:  </span><br><span class="line">	    print <span class="string">&quot;A.__getattribute__&quot;</span></span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">A1()</span>:  </span><br><span class="line">    def <span class="constructor">__getattribute__(<span class="params">self</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:  </span><br><span class="line">	    print <span class="string">&quot;A1.__getattribute__&quot;</span></span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">a1 = <span class="constructor">A1()</span></span><br><span class="line">a = <span class="constructor">A()</span></span><br><span class="line"> </span><br><span class="line">a.test</span><br><span class="line">print <span class="string">&quot;=========&quot;</span></span><br><span class="line">a1.test</span><br><span class="line"></span><br><span class="line">#A是新式类，每次通过实例访问属性，都会经过__getattribute__函数,</span><br><span class="line"></span><br><span class="line">#A1不会调用__getattribute__所以出错了</span><br></pre></td></tr></table></figure>


<h2 id="4-8-类的实例化"><a href="#4-8-类的实例化" class="headerlink" title="4.8 类的实例化"></a>4.8 类的实例化</h2><ul>
<li>__call__方法</li>
</ul>
<blockquote>
<p>类的实例化主要通过__init__()函数和__call__()函数实现，其中__init__()较为常用，<strong>call</strong>()函数是一种让类像函数一样使用的特殊方法。</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">MyType(<span class="params">type</span>)</span>:</span><br><span class="line"> </span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">what</span>, <span class="params">bases</span>=None, <span class="params">dict</span>=None)</span>:</span><br><span class="line">        super(MyType, self).<span class="constructor">__init__(<span class="params">what</span>, <span class="params">bases</span>, <span class="params">dict</span>)</span></span><br><span class="line"> </span><br><span class="line">    def <span class="constructor">__call__(<span class="params">self</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:</span><br><span class="line">        obj = self.<span class="constructor">__new__(<span class="params">self</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span></span><br><span class="line"> </span><br><span class="line">        self.<span class="constructor">__init__(<span class="params">obj</span>)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Foo(<span class="params">object</span>)</span>:</span><br><span class="line"> </span><br><span class="line">    __metaclass__ = MyType</span><br><span class="line"> </span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">name</span>)</span>:</span><br><span class="line">        self.name = name</span><br><span class="line"> </span><br><span class="line">    def <span class="constructor">__new__(<span class="params">cls</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:</span><br><span class="line">        return <span class="keyword">object</span>.<span class="constructor">__new__(<span class="params">cls</span>, <span class="operator">*</span><span class="params">args</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span></span><br><span class="line"> </span><br><span class="line"># 第一阶段：解释器从上到下执行代码创建Foo类</span><br><span class="line"># 第二阶段：通过Foo类创建obj对象</span><br><span class="line">obj = <span class="constructor">Foo()</span></span><br></pre></td></tr></table></figure>
<ul>
<li>__new__方法</li>
</ul>
<p>继承自object的新式类才有__new__</p>
<blockquote>
<p>__new__方法接受的参数虽然也是和__init__一样，但__init__是在类实例创建之后调用，而 __new__方法正是创建这个类实例的方法。</p>
</blockquote>
<p>依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># 创建一个类，继承<span class="built_in">int</span>，并返回绝对值</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PositiveInteger(<span class="params">int</span>)</span>:</span><br><span class="line">    def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">value</span>)</span>:</span><br><span class="line">        super(PositiveInteger, self).<span class="constructor">__init__(<span class="params">self</span>, <span class="params">abs</span>(<span class="params">value</span>)</span>)</span><br><span class="line"> </span><br><span class="line">i = <span class="constructor">PositiveInteger(-3)</span></span><br><span class="line">print i</span><br><span class="line">#结果还是-<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PositiveInteger(<span class="params">int</span>)</span>:</span><br><span class="line">    def <span class="constructor">__new__(<span class="params">cls</span>, <span class="params">value</span>)</span>:</span><br><span class="line">        return super(PositiveInteger, cls).<span class="constructor">__new__(<span class="params">cls</span>, <span class="params">abs</span>(<span class="params">value</span>)</span>)</span><br><span class="line"> </span><br><span class="line">i = <span class="constructor">PositiveInteger(-3)</span></span><br><span class="line">print i</span><br><span class="line">#结果是 <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为类的每一次实例化都是通过__new__实现的,通过重载类来实现单例</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Singleton</span>(<span class="title">object</span>):</span></span><br><span class="line"><span class="class">    def __new__(<span class="title">cls</span>):</span></span><br><span class="line"><span class="class">        # 关键在于这，每一次实例化的时候，我们都只会返回这同一个<span class="keyword">instance</span>对象</span></span><br><span class="line"><span class="class">        if not hasattr(<span class="title">cls</span>, &#x27;<span class="title">instance&#x27;</span>):</span></span><br><span class="line"><span class="class">            cls.<span class="keyword">instance</span> = super(<span class="type">Singleton</span>, <span class="title">cls</span>).__new__(<span class="title">cls</span>)</span></span><br><span class="line"><span class="class">        return cls.<span class="keyword">instance</span></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">obj1 = <span class="type">Singleton</span>()</span></span><br><span class="line"><span class="class">obj2 = <span class="type">Singleton</span>()</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">obj1.attr1 = &#x27;value1&#x27;</span></span><br><span class="line"><span class="class">print obj1.attr1, obj2.attr1</span></span><br><span class="line"><span class="class">print obj1 is obj2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>7. 字符串</title>
    <url>/2018/09/21/Python/7.%20%E7%89%B9%E6%AE%8A%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第七章-类方法中的特殊参数"><a href="#第七章-类方法中的特殊参数" class="headerlink" title="第七章 类方法中的特殊参数"></a>第七章 类方法中的特殊参数</h1><h2 id="类参数self-amp-cls"><a href="#类参数self-amp-cls" class="headerlink" title="类参数self&amp;cls"></a>类参数self&amp;cls</h2><ul>
<li>staticmethod(静态方法):可以没有self，当普通函数使用</li>
<li>classmethod(类方法):第一个参数是cls，代表类本身</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,self)</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo3</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>,cls)</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.foo1()          <span class="comment">#最常见的调用方式，但与下面的方式相同</span></span><br><span class="line">Hello &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x9f6abec</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.foo1(a)         <span class="comment">#这里传入实例a，相当于普通方法的self</span></span><br><span class="line">Hello &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x9f6abec</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.foo2()          <span class="comment">#这里，由于静态方法没有参数，故可以不传东西</span></span><br><span class="line">hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.foo3()          <span class="comment">#这里，由于是类方法，因此，它的第一个参数为类本身。</span></span><br><span class="line">hello &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.A&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A                 <span class="comment">#可以看到，直接输入A，与上面那种调用返回同样的信息。</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.A&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="函数参数（-args-amp-kwargs）"><a href="#函数参数（-args-amp-kwargs）" class="headerlink" title="函数参数（*args &amp; **kwargs）"></a>函数参数（*args &amp; **kwargs）</h2><blockquote>
<p>*args 其中args只是个名字，可以是其他字母</p>
</blockquote>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">*args表示函数可以接受多个参数</span></span><br></pre></td></tr></table></figure>

<p>实例1</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def test_args(normal_arg, <span class="number">*a</span>rgs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first normal arg:&quot;</span> + normal_arg)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;another arg through *args :&quot;</span> + arg)</span><br><span class="line"></span><br><span class="line">test_args(<span class="string">&quot;normal&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;C#&quot;</span>)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>**kwargs意思相同，但参数形式是字典形式</p>
</blockquote>
<p>实例2</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def <span class="keyword">fun</span><span class="constructor">_kwargs(<span class="params">farg</span>, <span class="operator">**</span><span class="params">kwargs</span>)</span>:  </span><br><span class="line">    print <span class="string">&quot;arg:&quot;</span>, farg  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:  </span><br><span class="line">        print <span class="string">&quot;another key and arg: %s: %s&quot;</span> % (key, kwargs<span class="literal">[<span class="identifier">key</span>]</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">fun</span><span class="constructor">_kwargs(<span class="params">farg</span>=1, <span class="params">myarg2</span>=<span class="string">&quot;two&quot;</span>, <span class="params">myarg3</span>=3)</span>  </span><br><span class="line">  </span><br><span class="line">dic = &#123;<span class="string">&quot;args2&quot;</span>:<span class="string">&quot;two&quot;</span>, <span class="string">&quot;args3&quot;</span>:<span class="number">3</span>&#125;  </span><br><span class="line"><span class="keyword">fun</span><span class="constructor">_kwargs(<span class="params">fargs</span>=1, <span class="operator">**</span><span class="params">dic</span>)</span> #调用方式<span class="number">1</span>  </span><br></pre></td></tr></table></figure>
<p>实例3</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def <span class="keyword">fun</span><span class="constructor">_kwargs1(<span class="params">arg1</span>, <span class="params">arg2</span>, <span class="params">arg3</span>)</span>:  </span><br><span class="line">    print <span class="string">&quot;arg1:&quot;</span>, arg1  </span><br><span class="line">    print <span class="string">&quot;arg2:&quot;</span>, arg2  </span><br><span class="line">    print <span class="string">&quot;arg3:&quot;</span>, arg3  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">kwargs = &#123;<span class="string">&quot;arg2&quot;</span>:<span class="string">&quot;two&quot;</span>, <span class="string">&quot;arg3&quot;</span>:<span class="number">3</span>&#125;  </span><br><span class="line"><span class="keyword">fun</span><span class="constructor">_kwargs1(1, <span class="operator">**</span><span class="params">kwargs</span>)</span>  </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>对AI初学者和学生的若干学习建议</title>
    <url>/2023/05/30/AI/AI_Beginner/</url>
    <content><![CDATA[<h1 id="对AI初学者和学生的若干学习建议："><a href="#对AI初学者和学生的若干学习建议：" class="headerlink" title="对AI初学者和学生的若干学习建议："></a>对AI初学者和学生的若干学习建议：</h1><p>写这篇文章的起因是想给新入门或即将入学的AI专业学生一些学习建议。</p>
<p>核心思想包括：注重实践，夯实基础，聚焦前沿</p>
<span id="more"></span>

<h2 id="1-实践"><a href="#1-实践" class="headerlink" title="1. 实践"></a>1. 实践</h2><p>AI是一个多学科交叉方向，其核心由计算机学(Computer Science, CS)发展而来，所以有CS基础的学生会好上手一些。没有CS基础一般需要补一下编程，unix知识。但是AI和CS是有很大不同的，兴趣和方向才是未来发展的根本。</p>
<p> 这里说一下为什么重实践，如何实践。</p>
<h3 id="1-1-注重代码的学习"><a href="#1-1-注重代码的学习" class="headerlink" title="1.1 注重代码的学习"></a>1.1 注重代码的学习</h3><p>AI无论在科研和就业上都继承了CS的特性，包括:</p>
<pre><code>- ‘Show me the code’
</code></pre>
<blockquote>
<p>这句话省略了前半句，大意是空说没用，用代码证明，其涵盖了这个学科的精髓，就是任何想法和改变只有现实中能使用才有价值。</p>
</blockquote>
<h3 id="1-2-开源精神"><a href="#1-2-开源精神" class="headerlink" title="1.2 开源精神"></a>1.2 开源精神</h3><pre><code>- Open Source 
</code></pre>
<blockquote>
<p>即源代码公开，是一种软件发布模式。 早在1998年就被提出，开源运动涵盖了Unix等自由软件的发展。开源不仅是种行为，更是一种精神：</p>
</blockquote>
<pre><code>a.知识共享，互惠互利。

b.扶弱济困，先进带动后进。

c.公正公开，维护开发者与使用者利益。
</code></pre>
<p>大意是：提倡自由，创新，互助，进取。反对垄断，封闭，排异，畏缩。避免造成弱者恒弱，强者恒强的局面。</p>
<p>AI技术整体是学术和产业高度整合的，好的研究工作会同时受到企业和高校的关注，因此开源也是一种默契。大家在积极依靠开源的同时，自己也要有开源的勇气和并保持开放的心态。</p>
<h2 id="2-基础"><a href="#2-基础" class="headerlink" title="2. 基础"></a>2. 基础</h2><p>基础非常重要，很多方向和应用所需的知识是相通的，当前AI的基本任务大体可分为机器视觉(CV)和自然语言处理任务(NLP)。所用到的技能主要是机器学习，特别是深度学习这一块。近年来随着大模型的突破，更多前沿任务是以跨模态（CV+NLP）的形式出现。</p>
<p>如何打好基础，是个系统而长期的问题，取决于个人的天赋、努力和学习效率。这里只能给大家一些建议。</p>
<ul>
<li>掌握编程基础和机器学习&#x2F;深度学习框架</li>
</ul>
<blockquote>
<p>当前主要用Python语言，其特性是极简的面向对象编程和丰富的库支持(胶水语言)</p>
</blockquote>
<p>a. 编程基础：</p>
<blockquote>
<p>面向过程编程(基础变量，集合变量，条件控制，函数等)</p>
</blockquote>
<blockquote>
<p>面向对象编程(对象, 类，构造函数等），这个精髓是一种编程思想</p>
</blockquote>
<p>b. 机器学习框架：</p>
<p>总的来说要掌握熟悉各类常见库，包括：</p>
<blockquote>
<p>算法库sklearn，数据结构和处理库numpy, pandas, 以及一些作图库：matplotlib，opencv，imageio等</p>
</blockquote>
<p>c.深度学习框架:  </p>
<p>当前Pytorch为主要深度学习框架，其次是tensorflow。另外框架就是个工具，用好工具的关键还是工具后面的“技术”。</p>
<ul>
<li>学习方法</li>
</ul>
<p>除了个别关键库有时需要去阅读和查阅分析外（pytorch，numpy，sklearn）。其他库没有必要刻意去学习，主要通过实践去学习。这里建议如下学习方法：</p>
<blockquote>
<p>可以通过一些小项目，模型demo，代码片段调试，去掌握核心代码含义。</p>
</blockquote>
<blockquote>
<p>通过调试一些感兴趣的视频(b站），帖子（知乎，csdn），开源代码（github）的代码去学习</p>
</blockquote>
<p>tips: 注重学习的质而非量，一定要深入搞懂核心功能，结构，梳理关键代码</p>
<h2 id="3-前沿"><a href="#3-前沿" class="headerlink" title="3. 前沿"></a>3. 前沿</h2><h3 id="3-1-研究方向"><a href="#3-1-研究方向" class="headerlink" title="3.1 研究方向"></a>3.1 研究方向</h3><p>AI发展非常快，当前以ChatGPT等大语言模型(LLM)从发布到现在只有很短的时间，但却产生深刻的影响，造成广泛行业变革，有未来新一代科技革命的可能性。因此聚焦前沿是AI最重要能力之一。</p>
<p>当前可以关注的大模型技术包括：</p>
<ul>
<li><p>NLP模型结构GPT：</p>
<p>  GPT一般人没有设备和资源去跑或者之间参与训练工作，能做的是在大模型基础上做微调和应用，只要熟悉深度学习（这里主要是attention-transformer结构），搞懂大模型的一些基本原理，在预训练模型下加一些改进结构（涉及迁移学习和知识蒸馏），或者在熟悉大模型框架下将其应用到一个特殊的领域（比如医疗，法务，教育等等）</p>
</li>
<li><p>CV视觉大模型（StyleGAN, 扩散模型）</p>
<p>  原理同GPTs，这里主要是cnn等结构和相关模型，包括常见的resnet, u-net, yolo等</p>
</li>
<li><p>跨模态应用</p>
<p>  就是结合CV和GPT进行完成更加智能和有挑战性的AI任务，包括图像理解（描述图像，编辑），语言问答（专家系统：专业知识问答如医疗诊断），音视频生成和编辑（如音乐和视频的创作）。</p>
</li>
</ul>
<p>tips：有一个普遍困难是觉得大模型需要大量设备或者大量数据，其实这是一个误区。一方面是大模型都倾向小型化并部署在消费级显卡上（比如12gb显存，或者24gb显存下）。而且有众繁多开源的预训练模型直接加载使用，并不需要个人消耗资源和时间训练，因此最最关键是搞懂深度学习基础，会用，然后稍微改或调一下大模型，即可达到画龙点睛的效果。</p>
<h3 id="3-2-研究方法"><a href="#3-2-研究方法" class="headerlink" title="3.2 研究方法"></a>3.2 研究方法</h3><p>这里主要指发表论文，专利等成果的研究。因此需要在大量调试代码，得到各类实验结果的基础上，整理研究思路，总结研究成果，并最终撰写论文，大体方法和建议是：</p>
<pre><code>a.泛读论文
</code></pre>
<blockquote>
<p>通过大量阅读前沿和高质量领域相关论文，能从”没吃过猪肉，但见猪跑“的情况下逐渐积累研究内容，方法。同时积累写作方法和经验，这是一个漫长的积累过程。</p>
</blockquote>
<pre><code>b.精读论文
</code></pre>
<blockquote>
<p>谈到具体研究，方向众多，思路多样。因此你需要聚焦，聚焦是你在大量阅读和了解大方向和领域的基础上提炼并关注一个可行的小方向，这里有1-2篇关键的论文是你感兴趣并且深入了解的，并以此作为研究基础就行改进和突破，它们最好是好的工作，前沿的工作，有广泛的影响，开源和可复现的，那么你就可以站在它们的肩膀上做出好的成果。</p>
</blockquote>
<pre><code>c.不断实验
</code></pre>
<blockquote>
<p>这是最关键的一步，真正的创新一般都不容易，你会有一个想法，但这个想法往往和现实有很大差距，你可能需要不断试错，改进，但是请相信越困难的事情往往也是收获和成长最大的时候。有时运气和心态也很重要的，包括你的热爱。</p>
</blockquote>
<pre><code>d.论文写作，投稿交流
</code></pre>
<blockquote>
<p>这里包括与合作者，导师等完成论文写作，制定投稿目标，期刊或者会议。投稿目的更多是学术交流，同行专家匿名评审（review），在得到专家指导修改或者建议后，最终认可的学术手稿会批准出版。</p>
</blockquote>
<p>如何高效学习打好基础，并逐步聚焦前沿某一领域，实现研究和项目突破，是AI方向出成果的关键</p>
<h2 id="4-补充内容"><a href="#4-补充内容" class="headerlink" title="4.补充内容"></a>4.补充内容</h2><ul>
<li>github</li>
</ul>
<blockquote>
<p>包括基本的unix命令，git命令(涉及一点操作系统的知识)</p>
</blockquote>
<blockquote>
<p>基本的github功能，比如团队协作维护同一个开源项目的命令</p>
</blockquote>
<ul>
<li>huggingface</li>
</ul>
<p>现在很多新模型的预训练模型都在上面，一些基本操作需要掌握</p>
<p><a href="https://huggingface.co/">https://huggingface.co/</a></p>
<ul>
<li>aminer</li>
</ul>
<p>这个是学术机构清华办的，主要分享和整理优秀AI论文</p>
<p><a href="https://www.aminer.cn/topic">https://www.aminer.cn/topic</a></p>
<ul>
<li>paperswithcode</li>
</ul>
<p>介绍AI主流公认的研究成果（baseline），一般是论文都配套开源复现代码，可用于借鉴和改进当前优秀工作</p>
<p><a href="https://paperswithcode.com/">https://paperswithcode.com/</a></p>
<p>tips：对于学生而言，如何充分利用时间高效学习和成长，把握短暂的3-4年校园学习时光，是决定你未来发展和高度的关键因素。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI学习建议</tag>
      </tags>
  </entry>
  <entry>
    <title>8.正则表达式</title>
    <url>/2018/05/30/Python/8.%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第八章-正则表达式"><a href="#第八章-正则表达式" class="headerlink" title="第八章 正则表达式"></a>第八章 正则表达式</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote>
<p>对字符串匹配的一套规则</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#正则表达式的包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;\d+\.\d+&#x27;</span>) <span class="comment">#创建一个正则表达式对象</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;1.12321, 432423.32 abc 123.123 342&quot;</span></span><br><span class="line">result = pattern.findall(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">result = re.findall(<span class="string">&#x27;\d+\.\d+&#x27;</span>,<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>compile()</p>
<blockquote>
<p>编译正则表达式,返回一个正则表达式对象</p>
</blockquote>
</li>
<li><p>findall()</p>
<blockquote>
<p>找到字符串中所有的匹配(以空格为间隔)</p>
</blockquote>
</li>
<li><p>search()</p>
<blockquote>
<p>匹配整个字符串，直到找到一个匹配</p>
</blockquote>
</li>
<li><p>match()</p>
<blockquote>
<p>从开始匹配字符串是否符合正则表达式</p>
</blockquote>
</li>
<li><p>split()</p>
<blockquote>
<p>将匹配到的字符串当做分割点,对字符串进行分割，最终分割成列表</p>
</blockquote>
</li>
<li><p>sub()</p>
<blockquote>
<p>替换</p>
</blockquote>
</li>
</ul>
<h2 id="字符串前缀"><a href="#字符串前缀" class="headerlink" title="字符串前缀"></a>字符串前缀</h2><ul>
<li><p>u&#x2F;U:</p>
<blockquote>
<p>表示unicode字符串 </p>
</blockquote>
<p>  1.不是仅仅是针对中文, 可以针对任何的字符串，代表是对字符串进行unicode编码。<br>  2.一般英文字符在使用各种编码下, 基本都可以正常解析, 所以一般不带u；但是中文, 必须表明所需编码, 否则一旦编码转换就会出现乱码。<br>  3.建议所有编码方式采用utf8</p>
</li>
<li><p>r&#x2F;R:</p>
<blockquote>
<p>非转义的原始字符串 </p>
</blockquote>
<p>  1.与普通字符相比，其他相对特殊的字符，其中可能包含转义字符，即那些，\反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的”\n”表示换行，”\t”表示Tab等。<br>  2.而如果是以r开头，那么说明后面的字符，都是普通的字符了，即如果是“\n”那么表示一个反斜杠字符，一个字母n，而不是表示换行了。<br>  3.以r开头的字符，常用于正则表达式，对应着re模块。</p>
</li>
<li><p>b:</p>
<blockquote>
<p>bytes </p>
</blockquote>
<p>  1.python3.x里默认的str是(py2.x里的)unicode,<br>  2.bytes是(py2.x)的str, b”“前缀代表的就是bytes<br>  3.python2.x里,b前缀没什么具体意义，只是为了兼容python3.x的这种写法</p>
</li>
</ul>
<h2 id="正则表达式表"><a href="#正则表达式表" class="headerlink" title="正则表达式表"></a>正则表达式表</h2><ul>
<li>字符</li>
</ul>
<table>
<thead>
<tr>
<th>header 1</th>
<th>header 2</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>任意字符</td>
</tr>
<tr>
<td>row 1 col 1</td>
<td>row 1 col 2</td>
</tr>
<tr>
<td>row 2 col 1</td>
<td>row 2 col 2</td>
</tr>
</tbody></table>
<ul>
<li>位置</li>
</ul>
<table>
<thead>
<tr>
<th>位置</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结尾</td>
</tr>
</tbody></table>
<ul>
<li>预定义字符集</li>
</ul>
<table>
<thead>
<tr>
<th>预定义字符</th>
<th>-</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>数字:[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字:[^\d]</td>
</tr>
<tr>
<td>\w</td>
<td>字母数字</td>
</tr>
<tr>
<td>\W</td>
<td>非字母数字</td>
</tr>
</tbody></table>
<ul>
<li>数量词</li>
</ul>
<table>
<thead>
<tr>
<th>数量词</th>
<th>-</th>
</tr>
</thead>
</table>
<ul>
<li>| 匹配前一个字符0次或无限次</li>
</ul>
<ul>
<li>| 匹配前一个字符1次或无限次<br>？| 匹配前一个字符0次或1次<br>{m}|匹配前一个字符m次<br>{m,n}|匹配前一个字符m至n次，m和n可以省略，上下界默认为0和无穷</li>
</ul>
<ul>
<li>括号</li>
</ul>
<table>
<thead>
<tr>
<th>括号</th>
<th>header 2</th>
</tr>
</thead>
<tbody><tr>
<td>（）</td>
<td>表示一个组，匹配结果缩小为()里面的组(不能匹配换行符)</td>
</tr>
<tr>
<td>ex:</td>
<td>gr(a|e)y,匹配a或e</td>
</tr>
<tr>
<td>[…]</td>
<td>表示一个字符，ex:[akj]表示a或k或j</td>
</tr>
<tr>
<td>[^…]</td>
<td>表示不在里面的一个字符</td>
</tr>
<tr>
<td>{m}</td>
<td>匹配前一个字符m次</td>
</tr>
<tr>
<td>{m,n}</td>
<td>匹配前一个字符m至n次，m和n可以省略，上下界默认为0和无穷</td>
</tr>
</tbody></table>
<h2 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h2><ul>
<li>.* 和 .*?<blockquote>
<p>前者匹配结果重复最大的字符串，后者匹配结果重复 的最小字符串</p>
</blockquote>
</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">s</span> = <span class="string">&#x27;aabab&#x27;</span></span><br><span class="line"><span class="attr">r1</span> = re.search(<span class="string">&#x27;a.*b&#x27;</span>,s) <span class="comment">#结果为aabab</span></span><br><span class="line"><span class="attr">r2</span> = re.search(<span class="string">&#x27;a.*?b&#x27;</span>,s) <span class="comment">#结果为aab</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>匹配反斜杆</p>
<blockquote>
<p>需要4个反斜杆才能匹配1个反斜杆</p>
</blockquote>
</li>
<li><p>匹配换行符</p>
<blockquote>
<p>compile函数加参数re.DOTALL</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>((?:.|\n)*?)其中(?:.)是非捕获组</p>
</blockquote>
]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>9.常用函数</title>
    <url>/2018/09/21/Python/9.%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>Python 原创基础教程</p>
<span id="more"></span>

<h1 id="第九章-常用函数"><a href="#第九章-常用函数" class="headerlink" title="第九章 常用函数"></a>第九章 常用函数</h1><ul>
<li><p>iter()&amp;next()</p>
<blockquote>
<p>迭代器和生成器</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">a=iter(x) <span class="regexp">//</span>生成一个迭代器</span><br><span class="line"></span><br><span class="line"><span class="keyword">next</span>(a）</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>range()</p>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从0到10</span></span><br><span class="line"><span class="attribute">range</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从1到11</span></span><br><span class="line"><span class="attribute">range</span>(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从1到11，步长为3</span></span><br><span class="line"><span class="attribute">range</span>(<span class="number">1</span>,<span class="number">11</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>list()<blockquote>
<p>把变量转换为list</p>
</blockquote>
</li>
<li>map()<blockquote>
<p>map(fuciton,iterable,…),第一个参数是一个函数，以后的参数的列表，map把列表中的值带入到函数(第一个参数)并输出值</p>
</blockquote>
</li>
</ul>
<p>map()的值在python2中是一个列表，在python3中是一个迭代器</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;def square(x) :            # 计算平方数</span><br><span class="line"><span class="meta">...</span> <span class="language-python">    <span class="keyword">return</span> x ** <span class="number">2</span></span></span><br><span class="line"><span class="meta">...</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment"># 计算列表各个元素的平方</span></span></span><br><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 使用 lambda 匿名函数</span></span></span><br><span class="line">[1, 4, 9, 16, 25]</span><br><span class="line"> </span><br><span class="line"># 提供了两个列表，对相同位置的列表数据进行相加</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span></span><br><span class="line">[3, 7, 11, 15, 19]</span><br></pre></td></tr></table></figure>


<ul>
<li>filter()<blockquote>
<p>filter(function, iterable)函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。<br>function是过滤条件，iterable是可迭代对象。</p>
</blockquote>
</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">def is_odd(n):<span class="type"></span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span><span class="type">list</span> = filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">print(<span class="keyword">new</span><span class="type">list</span>)</span><br><span class="line"><span class="meta">#过滤奇数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">def is_sqr(x):<span class="type"></span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x) % <span class="number">1</span> == <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span><span class="type">list</span> = filter(is_sqr, range(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line">print(<span class="keyword">new</span><span class="type">list</span>) <span class="meta">#python2使用，返回列表</span></span><br><span class="line">list(<span class="keyword">new</span><span class="type">list</span>)</span><br><span class="line"><span class="keyword">new</span><span class="type">list</span>.__next__()<span class="meta">#python3使用，返回迭代器</span></span><br><span class="line"><span class="meta">#过滤平方根是整数的数</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>初等函数</title>
    <url>/2017/11/22/math/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h1><span id="more"></span>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/mkzP.R7yz3b4E0G62Ni6Dp2HZ7YxiEE3jWjpAlr3Fzs!/b/dPIAAAAAAAAA&bo=hwSAAgAAAAARBzE!&rf=viewer_4"></p>
<h3 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h3><p>$sina^2+cos^2&#x3D;1 $</p>
<p>$tana^2+1&#x3D;seca^2$</p>
<p>$1+cot^2&#x3D;csca^2$</p>
<h3 id="角度转换"><a href="#角度转换" class="headerlink" title="角度转换"></a>角度转换</h3><p><img src="https://github.com/disanda/markdownPhoto/blob/master/media%20copy/math1/%E8%A7%92%E5%BA%A6%E8%BD%AC%E6%8D%A21.jpg?raw=true"><br><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/t3SBPFoxXzLGZ0h9h87Oz0BFRkhjslFdu0uOGIrB*5Y!/b/dPIAAAAAAAAA&bo=ZgGqAAAAAAARAPo!&rf=viewer_4">／／2<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/BYw3I0bVGfest14HY4J4u8iwnsodDsgnX6X9TFz.3Vc!/b/dPMAAAAAAAAA&bo=XAHYAAAAAAARB7U!&rf=viewer_4">／／3<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/TRlFYPtNjmLEcLtIWnxZcoOWQeqD0w5cTQ8PFffJXO4!/b/dPMAAAAAAAAA&bo=PgGoAAAAAAARAKA!&rf=viewer_4">／／4</p>
<h3 id="奇偶关系"><a href="#奇偶关系" class="headerlink" title="奇偶关系"></a>奇偶关系</h3><p>除了$cos a$是偶函数外，其他三个是奇函数</p>
<h3 id="二倍角关系"><a href="#二倍角关系" class="headerlink" title="二倍角关系"></a>二倍角关系</h3><p><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/Znmofb3Mkl08wgYurSBJPYFlqnB1AB322c8ytxUiKpw!/b/dD4BAAAAAAAA&bo=IANyAAAAAAARB2E!&rf=viewer_4">／／二倍角1</p>
<h3 id="和差角公式"><a href="#和差角公式" class="headerlink" title="和差角公式"></a>和差角公式</h3><p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/BydUFiyd2y3zWBCwTVyeS4qZeTZs59Enxzea7SC7sTI!/b/dPIAAAAAAAAA&bo=dAJ8AAAAAAARBzo!&rf=viewer_4">／／2</p>
<h3 id="正切函数"><a href="#正切函数" class="headerlink" title="正切函数"></a>正切函数</h3><p>$\tan a$<br><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/ZEQvP64eeI4yRnpP*R3s2JKOzPccE1IwzE3UFFmXYB8!/b/dPIAAAAAAAAA&bo=lgKAAgAAAAARByY!&rf=viewer_4">&#x2F;&#x2F;正切</p>
<h3 id="余切函数"><a href="#余切函数" class="headerlink" title="余切函数"></a>余切函数</h3><p>$cos a$<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/6coVtzm1D4H.8rD1sUUzeuSweD1rz*BJiDO.YbrnJoM!/b/dPMAAAAAAAAA&bo=OgOAAgAAAAARB4s!&rf=viewer_4">／／余切</p>
<h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><p>$y&#x3D;\log_ax$<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/o0ZGnFFbwz1.MN6R7yKruew7WTDXuxob.9XaPdWUunc!/b/dPMAAAAAAAAA&bo=gALXAgAAAAARB2c!&rf=viewer_4">／／</p>
<h2 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h2><p>$y&#x3D;x^a $(a为有理数)</p>
<p>y&#x3D;x ,y&#x3D;$x^3$为奇函数</p>
<p>y&#x3D;$x^2$,y&#x3D;$x^4$为偶函数</p>
<p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/AUW7F*2yG1U.Pp5O8UTybSNdkk*ZSoDEEeE**JhdpZw!/b/dA0BAAAAAAAA&bo=RgOAAgAAAAARB*c!&rf=viewer_4"></p>
<h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p>$y&#x3D;a^x$(a为常数，且 a&gt;0,a$\neq$1)<br>定义域为R,<br><strong>常数</strong>是指固定不变的数值<br><img src="http://a2.qpic.cn/psb?/V13eBt6k40tVED/ixjeaLeALlTMYjb.6jOSJ1.Zr0TFEud3kr2prMNbKNY!/b/dOIAAAAAAAAA&bo=wgOAAgAAAAARB3M!&rf=viewer_4"></p>
]]></content>
      <categories>
        <category>高数基础</category>
      </categories>
      <tags>
        <tag>公式</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>数学公式</title>
    <url>/2017/11/08/math/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Latex编辑方式"><a href="#Latex编辑方式" class="headerlink" title="Latex编辑方式"></a>Latex编辑方式</h1><span id="more"></span>

<p>1.$\log_2 10$</p>
<p><code>$\log_2 10$</code><br><br></p>
<p>2.$\sin x$<br><code>$\sin x$</code><br><br></p>
<p>3.$\frac{7x+5}{1+y^2}$<br><code>$\frac&#123;7x+5&#125;&#123;1+y^2&#125;$</code><br><br></p>
<p>4.$s&#x3D;\sum_1^n{n_i}$<br><code>$s=\sum_1^n&#123;n_i&#125;$</code><br><br></p>
<p>5.$\int_{1}^{a}$</p>
<p><code>$\int_&#123;1&#125;^&#123;a&#125;$</code><br><br></p>
<p>6.$\infty$<br><code>$\infty$</code><br><br></p>
<p>7.$\sqrt[x+1]{x^2}$<br><code>$\sqrt[x+1]&#123;x^2&#125;$</code><br><br></p>
<h1 id="hexo配置方法"><a href="#hexo配置方法" class="headerlink" title="hexo配置方法"></a>hexo配置方法</h1><p>a.直接在<strong>主题</strong>中的配置mathjax，把flase改为ture即可<br>b.不用像网上说的那样安装math，更换渲染引擎，复杂且各种bug，<br>归其原因：引擎和math包是安装在hexo下，但是hexo主题next已集成了math和引擎（就像两个配置文件，两个node.modules）,hexo安装的包理论上没什么用，除非不用next自带的,<br>其他主题也是一样的道理。</p>
]]></content>
      <categories>
        <category>高数基础</category>
      </categories>
      <tags>
        <tag>公式</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>概率</title>
    <url>/2017/11/22/math/%E6%A6%82%E7%8E%87/</url>
    <content><![CDATA[<h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><span id="more"></span>
<h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>$ A_n^m &#x3D; \frac{n!}{(n-m)!} $</p>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>a. $ C_n^m &#x3D; \frac{n!}{m!(n-m)!} $</p>
<p>b.$ C_n^m &#x3D;C_n^t (t&#x3D;n-m)$</p>
<p>c.$ C_{n+1}^m &#x3D; C_n^m + C_n^{m-1}$</p>
<p>d.$ C_n^0+C_n^1+\ldots +C_n^n &#x3D; 2^n $</p>
<p>e.$ C_n^m &#x3D; \frac{A_n^m}{m!} $</p>
<h2 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h2><p>通项公式：$a_n &#x3D; a_1 + (n-1)*d$<br>求和公式：$S&#x3D;\frac{n(a_1+a_n)}{2}$</p>
<h2 id="样本方差"><a href="#样本方差" class="headerlink" title="样本方差"></a>样本方差</h2><p>总体各单位变量值与其算术平均数的离差的平方，然后再对此变量取平均数，就叫做样本方差。样本方差用来表示一列数的变异程度。</p>
]]></content>
      <categories>
        <category>高数基础</category>
      </categories>
      <tags>
        <tag>公式</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>初等函数图形</title>
    <url>/2017/11/22/math/%E5%9B%BE%E5%BD%A2/</url>
    <content><![CDATA[<h1 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h1><span id="more"></span>
<h2 id="1-直线"><a href="#1-直线" class="headerlink" title="1.直线"></a>1.直线</h2><p>a.斜率（切线）<br>b.截距<br>c.直线上的点<br>d.平行，相交</p>
<h2 id="2-圆锥曲线"><a href="#2-圆锥曲线" class="headerlink" title="2.圆锥曲线"></a>2.圆锥曲线</h2><h3 id="2-1椭圆"><a href="#2-1椭圆" class="headerlink" title="2.1椭圆"></a>2.1椭圆</h3><p>椭圆（Ellipse）是平面内到定点F1、F2的距离之和等于常数（大于|F1F2|）的动点P的轨迹，F1、F2称为椭圆的两个焦点。<br>其数学表达式为：|PF1|+|PF2|&#x3D;2a（2a&gt;|F1F2|）。<br><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/T06setj.LFlOSrJCtcx2KwwvaxE0H.HGvKKvzSv8.WQ!/b/dG0BAAAAAAAA&bo=*gKAAgAAAAARB04!&rf=viewer_4"></p>
<p>a.设椭圆中心点为(h,k)<br>椭圆公式为:$\frac{(x-h)^2}{a^2}+\frac{(y-k)^2}{b^2}&#x3D;1$<br>(焦点在a，b中的较大的点)<br>b.其中$c^2&#x3D;a^2-b^2$(2c为两焦点的距离，简称焦距)<br>c.离心率e&#x3D;c&#x2F;a,其中$e\in(0,1)$,椭圆越扁，离心率越大;</p>
<h3 id="2-2抛物线"><a href="#2-2抛物线" class="headerlink" title="2.2抛物线"></a>2.2抛物线</h3><p>平面内，到定点与定直线的距离相等的点的轨迹叫做抛物线。其中定点叫抛物线的焦点，定直线叫抛物线的准线。<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/zrxX.3w7l0BZPMzcmKcOo7ZOM1*m01GRvQ.ZFcBBVSE!/b/dN4AAAAAAAAA&bo=HgNIAgAAAAARB2c!&rf=viewer_4"></p>
<p>标准方程：<br><img src="http://a2.qpic.cn/psb?/V13eBt6k40tVED/k1YgV4ofbNn2oYJQPXe1KLT9aKUgk7OYliYu4.kjkGQ!/b/dGwBAAAAAAAA&bo=eAGCAQAAAAARAM0!&rf=viewer_4"><br>特点：<br><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/NqEaWOjJoixArCMlDHc*SasE6PRqukO93kHdqDv18t0!/b/dN4AAAAAAAAA&bo=3ARSAQAAAAARALw!&rf=viewer_4"></p>
<h3 id="2-3双曲线"><a href="#2-3双曲线" class="headerlink" title="2.3双曲线"></a>2.3双曲线</h3><p>平面内与两个定点F1,F2的距离的差的绝对值等于一个常数(常数为2a，小于|F1F2|)的轨迹称为双曲线;平面内到两定点的距离差的绝对值为定长的点的轨迹叫做双曲线<br><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/hzNDIEq9j1cdhN45mODizSACtowN0uJQKWsqWmPctDU!/b/dE0AAAAAAAAA&bo=pwOAAgAAAAARABE!&rf=viewer_4"></p>
<p><img src="http://a2.qpic.cn/psb?/V13eBt6k40tVED/qld*4Q9PuMCe.Tq2sm*uwgyUpiDckUs74mjnDoiAUYM!/b/dGwBAAAAAAAA&bo=1AEcAQAAAAARAP8!&rf=viewer_4"></p>
<p>a.│|MF1|-|MF2│|&#x3D;2a<br>b.准线 x&#x3D;±$a^2$&#x2F;c(焦点在x轴)<br>c.实轴：曲线在焦点所在轴的交点<br>虚轴：相对实轴的相对轴（无交点）<br>（a-&gt;实轴点，b-&gt;虚轴点，c-&gt;焦点。）<br>$a^2$+$b^2$&#x3D;$c^2$<br>d.渐近线：把双曲线等式右边的1换成0，就是渐进线</p>
<h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><p>s&#x3D;1&#x2F;2ah(a是底，h是高)<br>s&#x3D;1&#x2F;2ac*sin b(b角对应的边为b)</p>
<h3 id="正弦定理"><a href="#正弦定理" class="headerlink" title="正弦定理"></a>正弦定理</h3><p>$\frac{sinA}{a}&#x3D;\frac{sinB}{b}&#x3D;\frac{sinC}{c}$<br>其中a、b、c为边，A、B、C为边对应的角</p>
<h3 id="余玹定理"><a href="#余玹定理" class="headerlink" title="余玹定理"></a>余玹定理</h3><p>cos a&#x3D; $\frac{a^2+b^2+c^2}{2bc} $</p>
<h3 id="最小正周期"><a href="#最小正周期" class="headerlink" title="最小正周期"></a>最小正周期</h3><p>a.三角函数相加最小正周期是各个函数的周期的最小公倍数<br>b.三角函数相乘时要化简</p>
]]></content>
      <categories>
        <category>高数基础</category>
      </categories>
      <tags>
        <tag>公式</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>Devstack集成安装（ubuntu下）</title>
    <url>/2017/11/20/openstack/Devstack/</url>
    <content><![CDATA[<h1 id="Ubuntu-16-04下安装openstack教程（使用Devstack）"><a href="#Ubuntu-16-04下安装openstack教程（使用Devstack）" class="headerlink" title="Ubuntu 16.04下安装openstack教程（使用Devstack）"></a>Ubuntu 16.04下安装openstack教程（使用Devstack）</h1><span id="more"></span>

<h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><p>1.下载安装虚拟机vm</p>
<p>2.安装ubuntu16.04</p>
<p>3.安装git</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ apt <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<h2 id="一、基本步骤"><a href="#一、基本步骤" class="headerlink" title="一、基本步骤"></a>一、基本步骤</h2><p>1.添加用户（Devstack要以非root用户运行，但需要sudo权限）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo useradd -s <span class="regexp">/bin/</span>bash -d <span class="regexp">/opt/</span>stack -m stack</span><br></pre></td></tr></table></figure>
<p>&#x2F;&#x2F;关于useradd命令的参数意义如下，供参考：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中；</span></span><br><span class="line"></span><br><span class="line">**-d&lt;登入目录&gt;：指定用户登入时的启始目录；** -D：变更预设值；</span><br><span class="line"></span><br><span class="line"><span class="deletion">-e&lt;有效期限&gt;：指定帐号的有效期限； </span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号； </span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-g&lt;群组&gt;：指定用户所属的群组； </span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-G&lt;群组&gt;：指定用户所属的附加群组； </span></span><br><span class="line"></span><br><span class="line">**-m：自动建立用户的登入目录；** </span><br><span class="line"></span><br><span class="line"><span class="deletion">-M：不要自动建立用户的登入目录； </span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-n：取消建立以用户名称为名的群组；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-r：建立系统帐号； </span></span><br><span class="line"></span><br><span class="line">**-s：指定用户登入后所使用的shell；**</span><br><span class="line"></span><br><span class="line"><span class="deletion">-u：指定用户id。</span></span><br></pre></td></tr></table></figure>



<p>2.给予stack用户sudo权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;stack ALL=(ALL) NOPASSWD: ALL&quot;</span> | sudo <span class="built_in">tee</span> /etc/sudoers.d/stack</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">sudo su - stack</span></span><br><span class="line">//这里注意区别su -和su，带-是指切换用户的时候同时切换shell环境</span><br></pre></td></tr></table></figure>
<p>3.下载Devstack</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://git.openstack.org/openstack-dev/devstack</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">cd</span> devstack</span></span><br></pre></td></tr></table></figure>

<p>4.创建local.conf配置文件</p>
<p>用来预置openstack root密码<br>注：conf读写权限默认无法写入，用chmod更改</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vi</span> <span class="keyword">conf</span></span><br><span class="line"><span class="comment">//以下写入conf</span></span><br><span class="line">[[<span class="keyword">local</span>|localrc]]</span><br><span class="line">ADMIN_PASSWORD=secret</span><br><span class="line">DATABASE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">RABBIT_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br><span class="line">SERVICE_PASSWORD=<span class="variable">$ADMIN_PASSWORD</span></span><br></pre></td></tr></table></figure>

<p>注：安装时刚开始会叫设置各组件安装密码，<br>建议设置成一样的方便记忆</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">./<span class="keyword">stack</span>.<span class="keyword">sh</span></span><br><span class="line"><span class="comment">//启动脚本开始安装</span></span><br></pre></td></tr></table></figure>
<h2 id="二、安装过程："><a href="#二、安装过程：" class="headerlink" title="二、安装过程："></a>二、安装过程：</h2><p>安装大约持续一个小时。</p>
<p>之后组件keystone、glance、nova、cinder、neutron和 horizon安装成功。</p>
<p>客户机可访问外网，网络设置为Floating IPs。</p>
<p>可通过web浏览器访问horizon ，链接为<a href="http://9.115.112.111/dashboard">http://9.115.112.111/dashboard</a> </p>
<p>亦可访问keystone，链接为<a href="http://9.115.112.111/identity/">http://9.115.112.111/identity/</a></p>
<p>可在shell中执行  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> openrc</span><br></pre></td></tr></table></figure>
<p>然后使用openstack命令行工具管理Devstack。</p>
<p>目录&#x2F;opt&#x2F;stack&#x2F;tempest下存放了用来测试openstack平台的测试用例。</p>
<h2 id="三、常用错误解决办法"><a href="#三、常用错误解决办法" class="headerlink" title="三、常用错误解决办法"></a>三、常用错误解决办法</h2><p><a href="http://blog.csdn.net/xiongchun11/article/details/52679110">http://blog.csdn.net/xiongchun11/article/details/52679110</a></p>
<p>(遇到问题，把问题解决继续.&#x2F;stack.sh)</p>
<p>1.permission denied<br>sudo chown stack:stack 文件绝对路径</p>
<p>a.在安装各组建时容易报这个错误,把组建的文件名更改组<br>和用户即可</p>
<p>2.devstack could not determine a suitable url<br>这一般是ip问题，在配置文件conf中添加host_ip(内网)</p>
<p><a href="https://docs.openstack.org/devstack/latest/">https://docs.openstack.org/devstack/latest/</a></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>glance</title>
    <url>/2017/12/01/openstack/glance/</url>
    <content><![CDATA[<p>openstack教程系列</p>
<span id="more"></span>

<h1 id="glance"><a href="#glance" class="headerlink" title="glance"></a>glance</h1><p>OpenStack Image Service（Glance）是IaaS的核心组件</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><ul>
<li><p>openstack目的是为用户创建<strong>一定配置需求</strong>的虚拟机</p>
</li>
<li><p>openstack用<strong>image</strong>创建以及重构虚拟机</p>
</li>
<li><p>openstack允许用户upload一定数量的image供创建虚拟机使用，至于image的数量，则有用户相关的tenant的quota来限定。</p>
</li>
</ul>
<h2 id="2-镜像状态"><a href="#2-镜像状态" class="headerlink" title="2.镜像状态"></a>2.镜像状态</h2><ul>
<li><p>quewed<br>:镜像的初始化状态</p>
</li>
<li><p>saving<br>：数据上传的中间状态</p>
</li>
<li><p>active<br>：镜像上传成功后的状态</p>
</li>
</ul>
<p>-killed<br>:错误镜像的状态，镜像不可读</p>
<p>-deleted<br>：镜像不可用，且在一定时间后自动清空，类似“回收站”的文件</p>
<h2 id="3-对比进程状态"><a href="#3-对比进程状态" class="headerlink" title="3.对比进程状态"></a>3.对比进程状态</h2><h3 id="3-1-进程-amp-线程"><a href="#3-1-进程-amp-线程" class="headerlink" title="3.1 进程&amp;线程"></a>3.1 进程&amp;线程</h3><ul>
<li><strong>进程（process）</strong> 和</li>
</ul>
<p><strong>线程（thread）</strong><br>是操作系统的基本概念</p>
<ul>
<li><p>计算机的核心是CPU，它承担了所有的计算任务。就像一座工厂，时刻在运行。</p>
</li>
<li><p>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，单个CPU一次只能运行一个任务。</p>
</li>
<li><p><strong>进程</strong>就好比工厂的车间，它代表CPU所能处理的单个任务。任一时刻，CPU总是运行一个进程，其他进程处于非运行状态。</p>
</li>
<li><p>一个车间里，可以有很多工人。他们协同完成一个任务。<strong>线程</strong>就好比车间里的工人。一个进程可以包括多个线程。</p>
</li>
<li><p>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，<strong>每个线程都可以使用这些共享内存</strong>。</p>
<h4 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h4></li>
<li><p><strong>CPU中，进程是资源的最小单位，线程是执行的最小单位</strong></p>
</li>
<li><p>一个线程使用某一共享内存时，其他线程必须等它结束，才能使用这一块内存。</p>
</li>
<li><p>一个防止共享内存使用出错的方法。是上锁，先用的线程上锁，后面的线程排队，等锁打开再进去。这就叫**”互斥锁”（Mutual exclusion，缩写 Mutex）**，防止多个线程同时读写某一块内存区域。</p>
</li>
<li><p>线程池与上面的原理类似，只能同时n个线程使用，大于n的在后面排队。这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做</p>
</li>
</ul>
<p><strong>“信号量”（Semaphore）</strong>，用来保证多个线程不会互相冲突。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul>
<li>开个QQ，开了一个进程；开了迅雷，开了一个进程。</li>
<li>在QQ的这个进程里，传输文字开一个线程、传输语音开了一个线程、弹出对话框又开了一个线程。</li>
<li>所以运行某个软件，相当于开了一个进程。在这个软件运行的过程里（在这个进程里），多个工作支撑的完成QQ的运行。</li>
</ul>
<h3 id="3-2-进程状态"><a href="#3-2-进程状态" class="headerlink" title="3.2 进程状态"></a>3.2 进程状态</h3><p><img src="http://a1.qpic.cn/psb?/V13eBt6k40tVED/dEK6tsptlAqmWn1L7YrT9iHEc66k*N8EiJrzIaLyt60!/b/dPMAAAAAAAAA&bo=sARyAgAAAAADB.Y!&rf=viewer_4" alt="image"></p>
<p>参考：<br><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Packstack集成安装(CentOS 7)</title>
    <url>/2017/11/20/openstack/Packstak%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85(CentOS)/</url>
    <content><![CDATA[<h1 id="Packstack-集成安装-CentOS-7"><a href="#Packstack-集成安装-CentOS-7" class="headerlink" title="Packstack 集成安装(CentOS 7)"></a>Packstack 集成安装(CentOS 7)</h1><p>CentOS, Red Hat Enterprise Linux (RHEL)两个版本可用</p>
<span id="more"></span>

<h2 id="安装前准备-部署在一台主机上"><a href="#安装前准备-部署在一台主机上" class="headerlink" title="安装前准备(部署在一台主机上)"></a>安装前准备(部署在一台主机上)</h2><p>a.一键安装,首选保证centOS能上网</p>
<p>b.虚拟机主机硬件设置中cpu打开VT-X</p>
<p>c.同步系统时间</p>
<p>d.虚拟机主机硬件设置内存8g以上</p>
<h3 id="1-首先安装yum"><a href="#1-首先安装yum" class="headerlink" title="1.首先安装yum"></a>1.首先安装yum</h3><p>若报错：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Ropodate <span class="keyword">is</span> <span class="keyword">over</span> <span class="number">2</span> weeks <span class="built_in">old</span></span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">yum clean <span class="built_in">all</span></span><br><span class="line"></span><br><span class="line">yum <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line">yum makecache </span><br><span class="line"><span class="comment">//将源更新保存至本地缓存</span></span><br></pre></td></tr></table></figure>

<h3 id="2-安装packstack源和命令"><a href="#2-安装packstack源和命令" class="headerlink" title="2.安装packstack源和命令"></a>2.安装packstack源和命令</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y http:<span class="regexp">//</span>rdo.fedorapeople.org/rdo-release.rpm</span><br><span class="line"><span class="regexp">//</span>用于配置安装源</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y openstack-packstack</span><br><span class="line"><span class="regexp">//</span>安装packstack命令</span><br></pre></td></tr></table></figure>
<h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ packstack <span class="comment">--allinone</span></span><br></pre></td></tr></table></figure>
<h3 id="4-常见错误"><a href="#4-常见错误" class="headerlink" title="4.常见错误"></a>4.常见错误</h3><p>1.apply puppet controller.pp卡住</p>
<p>解决：同步系统时间</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ yum instal ntp ntp date</span><br><span class="line"><span class="comment">//安装网络时间协议</span></span><br><span class="line"></span><br><span class="line">$ ntpdate cn<span class="selector-class">.pool</span><span class="selector-class">.ntp</span><span class="selector-class">.org</span></span><br><span class="line"><span class="comment">// 同步系统时间</span></span><br><span class="line"></span><br><span class="line">$ hwclock <span class="attr">--systohc</span></span><br><span class="line"><span class="comment">//写入硬件（否则下次重启失效）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>keystone(v3) 简介</title>
    <url>/2017/11/20/openstack/keystone/</url>
    <content><![CDATA[<h1 id="keystone-v3-简介"><a href="#keystone-v3-简介" class="headerlink" title="keystone(v3) 简介"></a>keystone(v3) 简介</h1><span id="more"></span>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>User(用户)<br>:服务的用户，可以是人、系统或服务，只要是openstack服务的对象都可以称为用户。</p>
<p>Tenant(租户)<br>：可以理解为人、项目或者组织拥有资源的集合，在一个租户中可以拥有很多个用户，这些用户可以根据权限划分使用租户的资源。</p>
<p>Role(角色)<br>：用于分配操作的权限，角色可以指定给用户，用户会获得对应该<br>角色的权限。</p>
<p>Token(认证)<br>：指的是一串比特值或者字符串，用来作为访问资源的记号。token中含有可访问资源的范围</p>
<h2 id="keystone交互过程"><a href="#keystone交互过程" class="headerlink" title="keystone交互过程"></a>keystone交互过程</h2><p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/kN.4ccACz65s.KizplMiQaMzN0.Qz.VMVMBMfdmtfsQ!/b/dG0BAAAAAAAA&bo=kwOAAgAAAAARByI!&rf=viewer_4" alt="image"></p>
<p>首先用户向Keystone提供自己的身份验证信息，如用户名和密码。Keystone 会从数据库中读取数据对其验证，如验证通过，会向用户返回一个 token，此后用户所有的请求都会使用该token进行身份验证。如用户向 Nova 申请虚拟机服务，nova 会将用户提供的 token 发给 Keystone 进行验证，Keystone会根据token判断用户是否拥有进行此项操作的权限，若验证通过那么nova会向其提供相对应的服务。其它组件和 Keystone 的交互也是如此。</p>
<p>在 Keystone V3 之前，用户的权限管理以每一个用户为单位，需要对每一个用户进行角色分配，并不存在一种对一组用户进行统一管理的方案，这给系统管理员带来了额外的工作和不便。此外，Keystone V3 之前的版本中，资源分配是以 Tenant 为单位的，这不太符合现实世界中的层级关系。如一个公司在 Openstack 中拥有两个不同的项目，他需要管理两个 Tenant 来分别对应这两个项目，并对这两个 Tenant 中的用户分别分配角色。</p>
<h2 id="keystone-v3"><a href="#keystone-v3" class="headerlink" title="keystone v3"></a>keystone v3</h2><p>为了更加符合现实世界和云服务的映射，将 Tenant 改为 Project 并在其上添加 Domain 的概念</p>
<p>graph TD</p>
<pre><code>A[Tenant] --&gt;|改为| B(Project)
B --&gt; C(Domain)
B --&gt; D(Group)
 
</code></pre>
<p>graph LR;<br>　　A–&gt;B;<br>　　A–&gt;C;<br>　　B–&gt;D;<br>　　C–&gt;D; </p>
<p>V3 利用 Domain 实现真正的多租户（multi-tenancy）架构，Domain 担任 Project 的高层容器。云服务的客户是 Domain 的所有者，他们可以在自己的 Domain 中创建多个 Projects、Users、Groups 和 Roles。通过引入 Domain，云服务客户可以对其拥有的多个 Project 进行统一管理，而不必再向过去那样对每一个 Project 进行单独管理。</p>
<p>域(Domain):比Project更高级的容器，云服务客服是Domain的拥有者，一个Domain可以创建多Project、Users、Groups和Roles。通过<br>Domain对所拥有的多个Project统一管理，不必对每个Project单独管理。</p>
<p>组(Group):是一组User容器,通过给Group分配角色，在用一组的用户就有Group所有角色的权限</p>
<h2 id="keystone-v3-各组件关系"><a href="#keystone-v3-各组件关系" class="headerlink" title="keystone v3 各组件关系"></a>keystone v3 各组件关系</h2><p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/KmXtiBNrtlpm4aus*Y7ldSR9TuHfm9y09*TfoAYsDzw!/b/dOAAAAAAAAAA&bo=*gKAAgAAAAARAEk!&rf=viewer_4" alt="image"></p>
<p>UUID FRENET</p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>openStack集成安装</title>
    <url>/2017/11/20/openstack/openStack%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.openstack.org/pike/">https://docs.openstack.org/pike/</a></p>
<span id="more"></span>

<h1 id="使用Devstack"><a href="#使用Devstack" class="headerlink" title="使用Devstack"></a>使用Devstack</h1><p>组件keystone、glance、nova、cinder、neutron和 horizon安装成功</p>
<p><a href="http://blog.csdn.net/ysbj123/article/details/77771065">http://blog.csdn.net/ysbj123/article/details/77771065</a></p>
<p><a href="http://blog.csdn.net/mygrus/article/details/53816022">http://blog.csdn.net/mygrus/article/details/53816022</a></p>
<h1 id="使用Fuel"><a href="#使用Fuel" class="headerlink" title="使用Fuel"></a>使用Fuel</h1><p><a href="https://www.cnblogs.com/dongdongwq/p/5627532.html">https://www.cnblogs.com/dongdongwq/p/5627532.html</a></p>
<p><a href="http://blog.csdn.net/qq_21398167/article/details/51611487">http://blog.csdn.net/qq_21398167/article/details/51611487</a></p>
<h1 id="使用Packstack-CentOS"><a href="#使用Packstack-CentOS" class="headerlink" title="使用Packstack (CentOS)"></a>使用Packstack (CentOS)</h1><p><a href="https://wiki.openstack.org/wiki/Packstack">https://wiki.openstack.org/wiki/Packstack</a></p>
<p><a href="https://github.com/openstack/packstack">https://github.com/openstack/packstack</a></p>
<p><a href="http://blog.csdn.net/violet_echo_0908/article/details/52049372">http://blog.csdn.net/violet_echo_0908/article/details/52049372</a></p>
<h1 id="使用openshit"><a href="#使用openshit" class="headerlink" title="使用openshit"></a>使用openshit</h1><p><a href="http://blog.csdn.net/justinshane/article/details/50097839">http://blog.csdn.net/justinshane/article/details/50097839</a></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>openStack网络组件</title>
    <url>/2017/11/20/openstack/%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><span id="more"></span>

<h2 id="一、发展历程"><a href="#一、发展历程" class="headerlink" title="一、发展历程"></a>一、发展历程</h2><h3 id="第一个版本-nova-network"><a href="#第一个版本-nova-network" class="headerlink" title="第一个版本 nova-network"></a>第一个版本 nova-network</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="number">2010</span>年openstack第一个版本</span><br><span class="line"></span><br><span class="line">网络组件为：nova-network</span><br><span class="line"></span><br><span class="line">功能：网络管理，包括<span class="built_in">ip</span>分配、组网、以及网络模型等。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>提供主要模型有：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>.扁平网络(flat network)：</span><br><span class="line">创建虚拟主机时，组件会从预定子网中取一个空闲</span><br><span class="line"><span class="selector-tag">ip</span>，并将网络信息写入虚拟主机的配置文件。</span><br><span class="line"></span><br><span class="line">* 在同一个子网中的虚拟主机可以相互<span class="selector-tag">ping</span>通</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>+:带<span class="selector-tag">DHCP</span>的<span class="selector-tag">flat</span> <span class="selector-tag">newwork</span>：在子网中自动为虚拟主机分配<span class="selector-tag">ip</span></span><br><span class="line">和物理地址</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span><span class="selector-class">.vlan</span>网络():</span><br><span class="line"><span class="selector-tag">vlan</span>的意思是<span class="selector-tag">Virtual</span> <span class="selector-tag">Local</span> <span class="selector-tag">Area</span> <span class="selector-tag">Network</span>,就是虚拟局域网</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第二个版本-Quantum"><a href="#第二个版本-Quantum" class="headerlink" title="第二个版本 Quantum"></a>第二个版本 Quantum</h2><p>随Openstack的Folsom版本发布</p>
<p>1.提供给<strong>租户</strong>api,使得租户能控制两层网络，管理ip地址</p>
<p>2.支持插件式网络组件，像Open vSwitch,Cisco,Linux Bridge,Nicira NVP</p>
<p>3.支持不同层的网络</p>
<p>4.支持隧道技术</p>
<p>隧道技术（Tunneling）是一种通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据（或负载）可以是不同协议的数据帧或包。隧道协议将其它协议的数据帧或包重新封装然后通过隧道发送。新的帧头提供路由信息，以便通过互联网传递被封装的负载数据。</p>
<p>5.支持3层转发和多重路由</p>
<p>6.提供负载均衡api（试用）</p>
<h2 id="第三版-Neutron"><a href="#第三版-Neutron" class="headerlink" title="第三版 Neutron"></a>第三版 Neutron</h2><p>Quantum这名字侵权，更名为Neutron</p>
<p>1.提供更为稳定的负载均衡api</p>
<p>2.支持端到端的IPSec VPN</p>
<p>3.面向租户的防火墙服务<br>注：截止2017.11,很多openstack云还在用nova-network，因为它简单，稳定。</p>
<h1 id="Neutron构成"><a href="#Neutron构成" class="headerlink" title="Neutron构成"></a>Neutron构成</h1><p>1.API<br>a.插件的“零件”</p>
<p>b.网络、子网、端口的查询</p>
<p>c.增加、删除、更新的操作</p>
<p>2.插件<br>存储当前逻辑网络的配置信息</p>
<p>a.可以用SQLlite和MySQL</p>
<p>b.存储逻辑网络和物理网络的对应关系</p>
<p>c.与交换机通信实现对应关系</p>
<p>3.Open vSmitch:<br>开放虚拟交换</p>
<p>虚拟交换就是利用虚拟平台，通过软件的方式形成交换机部件。</p>
<p>跟传统的物理交换机相比，虚拟交换机同样具备众多优点，一是配置更加灵活。一台普通的服务器可以配置出数十台甚至上百台虚拟交换机，且端口数目可以灵活选择。</p>
<p>例如，VMware的ESX一台服务器可以仿真出248台虚拟交换机，且每台交换机预设虚拟端口即可达56个；二是成本更加低廉，通过虚拟交换往往可以获得昂贵的普通交换机才能达到的性能</p>
<p>OpenvSmitch需要访问的表：</p>
<p>Tables_in_neutron  |<br>—|—<br>| agents<br>| allowedaddresspairs<br>| dnsnameservers<br>| externalnetworks<br>| extradhcpopts<br>| floatingips<br>| ipallocationpools<br>| ipallocations<br>| ipavailabilityranges<br>| networkdhcpagentbindings<br>| networks<br>| ovs_network_bindings<br>| ovs_tunnel_allocations<br>| ovs_tunnel_endpoints<br>| ovs_vlan_allocations<br>| portbindingports<br>| ports<br>| quotas<br>| routerl3agentbindings<br>| routerroutes<br>| routers<br>| securitygroupportbindings<br>| securitygrouprules<br>| securitygroups<br>| subnetroutes<br>| subnets                   </p>
<h2 id="Neutron-结构图"><a href="#Neutron-结构图" class="headerlink" title="Neutron 结构图"></a>Neutron 结构图</h2><p><img src="http://a3.qpic.cn/psb?/V13eBt6k40tVED/gA67oJejvJbbywjxTJ24LAR1RsGQ.1kQ2FJZACZ48wo!/b/dOAAAAAAAAAA&bo=1gOAAgAAAAADAHI!&rf=viewer_4" alt="image"></p>
<h2 id="ovs-amp-ovn"><a href="#ovs-amp-ovn" class="headerlink" title="ovs &amp; ovn"></a>ovs &amp; ovn</h2><p><a href="http://blog.csdn.net/cusor/article/details/18213977">http://blog.csdn.net/cusor/article/details/18213977</a></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Nova组件相关技术</title>
    <url>/2017/11/20/openstack/nova/</url>
    <content><![CDATA[<h1 id="一、RabbitMQ"><a href="#一、RabbitMQ" class="headerlink" title="一、RabbitMQ"></a>一、RabbitMQ</h1><p>个组件通过消息队列实现通讯</p>
<span id="more"></span>
<h1 id="二、AMQP协议"><a href="#二、AMQP协议" class="headerlink" title="二、AMQP协议"></a>二、AMQP协议</h1><p>RabbiteMQ是其中一个实现<br>1.多信道</p>
<p>2.异步</p>
<h2 id="三层实现"><a href="#三层实现" class="headerlink" title="三层实现"></a>三层实现</h2><p>1.传输层<br>帧处理、信道复用、错误检测、数据表示</p>
<p>2.会话层<br>负责客户端至服务器的通讯，包括可靠性、同步机制、和错误处理</p>
<p>3.模型层<br>定义一套命令，客户端使用这些命令来实现这些功能</p>
<h2 id="对比TCP-x2F-IP五层协议"><a href="#对比TCP-x2F-IP五层协议" class="headerlink" title="对比TCP&#x2F;IP五层协议"></a>对比TCP&#x2F;IP五层协议</h2><p>1.物理层<br>IEEE 802.1-802.2</p>
<p>2.数据链路层：<br>PPP<br>Ethernet：局域网通信标准</p>
<p>3.网络层<br>（关于路由）：<br>IP<br>ARP:地址解析协议<br>RARP<br>ICMP</p>
<p>4.传输层<br>TCP:提供ip环境下的可靠传输<br>UDP</p>
<p>5.应用层(表示层、会话层)</p>
<p>HTTP</p>
<p>FTP</p>
<p>NFS</p>
<p>SNMP</p>
<p>SMTP:(simple mail transfer protocol),由源地址到目的地址的邮件传送规则</p>
<p>DNS：(domain name<br>system),ip地址和域名映射的一个分布式数据库</p>
<p>Telnet</p>
<h1 id="三、Nova-Scheduler"><a href="#三、Nova-Scheduler" class="headerlink" title="三、Nova-Scheduler"></a>三、Nova-Scheduler</h1><p>过滤（filter）：过滤不能满足条件的节点</p>
<p>计算权值（weight）：通过“重要性”计算出哪个节点调度</p>
<h2 id="类比学习《操作系统》中的进程调度"><a href="#类比学习《操作系统》中的进程调度" class="headerlink" title="类比学习《操作系统》中的进程调度"></a>类比学习《操作系统》中的进程调度</h2><p>1.什么是进程（与线程的区别）</p>
<p>2.进程的三种状态</p>
<p>3.进程调度的算法</p>
<p>a.先进先出</p>
<p>b.短进程优先</p>
<p>c.轮询(按钟表时间分配给进程)</p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>云平台</tag>
      </tags>
  </entry>
  <entry>
    <title>教程3 Django操作Mysql(删除、修改数据)</title>
    <url>/2018/05/03/django/A%20mysql%E6%93%8D%E4%BD%9C%E4%BA%8C/</url>
    <content><![CDATA[<blockquote>
<p>Django框架,以MVT(mvc+T)模式高效开发web,超越spring系列的存在</p>
</blockquote>
<span id="more"></span>

<h1 id="Django操作Mysql-删除、修改数据"><a href="#Django操作Mysql-删除、修改数据" class="headerlink" title="Django操作Mysql(删除、修改数据)"></a>Django操作Mysql(删除、修改数据)</h1><h2 id="一-前期工作"><a href="#一-前期工作" class="headerlink" title="一.前期工作"></a>一.前期工作</h2><ul>
<li>生成app</li>
</ul>
<p>命令行输入</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">python</span> manage.<span class="keyword">py</span> startapp webname</span><br></pre></td></tr></table></figure>

<ul>
<li>配置setting.py</li>
</ul>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">#数据库</span><br><span class="line"><span class="type">DATABASES</span> = &#123;</span><br><span class="line">    <span class="symbol">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        #<span class="symbol">&#x27;ENGINE&#x27;</span>: <span class="symbol">&#x27;django</span>.db.backends.sqlite3&#x27;,</span><br><span class="line">        #<span class="symbol">&#x27;NAME&#x27;</span>: os.path.join(<span class="type">BASE_DIR</span>, <span class="symbol">&#x27;db</span>.sqlite3&#x27;),</span><br><span class="line">        <span class="symbol">&#x27;ENGINE&#x27;</span>: <span class="symbol">&#x27;django</span>.db.backends.mysql&#x27;,</span><br><span class="line">        <span class="symbol">&#x27;NAME&#x27;</span>: <span class="symbol">&#x27;testdata2&#x27;</span>,</span><br><span class="line">        <span class="symbol">&#x27;USER&#x27;</span>: <span class="symbol">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="symbol">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;121212&#x27;</span>, #数据库密码</span><br><span class="line">        <span class="symbol">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="symbol">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#注册app</span><br><span class="line"><span class="type">INSTALLED_APPS</span> = [</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.admin&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.auth&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.contenttypes&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.sessions&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.messages&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.staticfiles&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;web&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置__init__.py</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 先安装pymysql包</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="title">pymysql</span>.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<h2 id="二-MVC配置"><a href="#二-MVC配置" class="headerlink" title="二.MVC配置"></a>二.MVC配置</h2><ul>
<li>model层(models.py)<blockquote>
<p>建几个类就对应几张表</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Classes(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    titile = models.<span class="constructor">CharField(<span class="params">max_length</span>=32)</span></span><br><span class="line">    m = models.<span class="constructor">ManyToManyField(<span class="string">&quot;Teachers&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Teachers(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    name = models.CharField (max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">Student(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    username = models.<span class="constructor">CharField(<span class="params">max_length</span>=32)</span></span><br><span class="line">    age = models.<span class="constructor">IntegerField()</span></span><br><span class="line">    gender = models.<span class="constructor">BooleanField()</span></span><br><span class="line">    cs = models.<span class="constructor">ForeignKey(Classes,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE,)</span></span><br></pre></td></tr></table></figure></li>
<li>views层(views.py)<blockquote>
<p>先把views.py删除,用一个文件夹views替代，在文件夹下建立classes.py、students.py、teachers.py三个文件,分别代表三个视图</p>
</blockquote>
</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#其中classes.py如下:</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_classes(request):</span><br><span class="line">    cls_list = models.Classes.objects.<span class="keyword">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;get_classes.html&#x27;</span>, &#123;<span class="string">&#x27;cls_list&#x27;</span>: cls_list&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_classes(request):</span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span> == &quot;GET&quot;:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;add_classes.html&#x27;</span>)</span><br><span class="line">    elif request.<span class="keyword">method</span> == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        title = request.POST.<span class="keyword">get</span>(<span class="string">&#x27;titile&#x27;</span>)</span><br><span class="line">        models.Classes.objects.<span class="keyword">create</span>(titile=title)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/get_classes.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def del_classes(request):</span><br><span class="line">    nid = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">    models.Classes.objects.<span class="keyword">filter</span>(id=nid).<span class="keyword">delete</span>()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/get_classes.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit_classes(request):</span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span> == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        nid = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">        obj = models.Classes.objects.<span class="keyword">filter</span>(id=nid).first()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;edit_classes.html&#x27;</span>, &#123;<span class="string">&#x27;obj&#x27;</span>: obj&#125;)</span><br><span class="line">    elif request.<span class="keyword">method</span> == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        nid = request.<span class="keyword">GET</span>.<span class="keyword">get</span>(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">        title = request.POST.<span class="keyword">get</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        models.Classes.objects.<span class="keyword">filter</span>(id=nid).<span class="keyword">update</span>(titile=title)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/get_classes.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>control层(urls.py文件)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> web.views <span class="keyword">import</span> classes</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^get_classes.html$&#x27;</span>, classes.get_classes),</span><br><span class="line">    url(<span class="string">r&#x27;^add_classes.html$&#x27;</span>, classes.add_classes),</span><br><span class="line">    url(<span class="string">r&#x27;^del_classes.html$&#x27;</span>, classes.del_classes),</span><br><span class="line">    url(<span class="string">r&#x27;^edit_classes.html$&#x27;</span>, classes.edit_classes),</span><br><span class="line">    url(<span class="string">r&#x27;&#x27;</span>,classes.get_classes),<span class="comment">#首页默认页面</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三、模版层-templates"><a href="#三、模版层-templates" class="headerlink" title="三、模版层(templates)"></a>三、模版层(templates)</h2><blockquote>
<p>先创建templates文件夹，在settings.py设置templates文件夹路径(参考上一讲)</p>
</blockquote>
<ul>
<li>get_classes.html<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/add_classes.html&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% for row in cls_list %&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">row.id</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">row.titile</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/del_classes.html?nid=</span></span></span><span class="template-variable">&#123;&#123; <span class="name">row.id</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    |</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/edit_classes.html?nid=</span></span></span><span class="template-variable">&#123;&#123; <span class="name">row.id</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>add_classes.html</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;add_classes.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;titile&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>edit_classes.html</li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/edit_classes.html?nid=</span></span></span><span class="template-variable">&#123;&#123; <span class="name">obj.id</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;% csrf_token %&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">obj.titile</span> &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><ul>
<li>同步到数据库操作<blockquote>
<p>命令行两步操作</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash">python manage.py makemigrate webname <span class="comment">#输出modles到数据库到中间文件</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">python namge.py migrate <span class="comment">#同步到数据库</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>中文设置<blockquote>
<p>Django和Mysql本身默认数据库编码不能识别中文数据，需将设置</p>
</blockquote>
<p>  1.setting.py文件</p>
</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        #<span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        #<span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;testdata3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;121212&#x27;</span>, #数据库密码</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;COLLATION&#x27;</span>:<span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加CHARSET字段</span></span><br><span class="line"><span class="comment">//增加增加COLLATION字段</span></span><br></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/res/7903/692D1B2AC1514EA3B1BF6B8375CCBE70" alt="image"></p>
<pre><code>2. mysql设置
</code></pre>
<blockquote>
<p>通过设置设置编码utf-8支持中文</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> xxx</span><br><span class="line">//查看xxx数据库编码</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> xxx</span><br><span class="line">//查看表xxx编码</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">alter</span> <span class="keyword">table</span> <span class="built_in">table_name</span> convert <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">//更改表编码</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">create</span> <span class="keyword">database</span> xxx <span class="type">character</span> <span class="keyword">set</span> utf8</span><br><span class="line">//创建数据库xxx时设定编码</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">alter</span> <span class="keyword">database</span> xxx <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">//修改数据库xxx时设定编码</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">insert</span> <span class="keyword">into</span> xxx <span class="keyword">values</span>  (&quot;小明&quot;)；</span><br><span class="line">//测试中文</span><br></pre></td></tr></table></figure>




<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/nulige/p/6529175.html">https://www.cnblogs.com/nulige/p/6529175.html</a></p>
]]></content>
      <categories>
        <category>Django框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>教程2 Django 操作Mysql(增加数据)</title>
    <url>/2018/05/03/django/A%20mysql%E6%93%8D%E4%BD%9C%E4%B8%80/</url>
    <content><![CDATA[<blockquote>
<p>Django框架,以MVT(mvc+T)模式高效开发web,超越spring系列的存在</p>
</blockquote>
<span id="more"></span>

<h1 id="Django-操作Mysql-增加数据"><a href="#Django-操作Mysql-增加数据" class="headerlink" title="Django 操作Mysql(增加数据)"></a>Django 操作Mysql(增加数据)</h1><p>版本</p>
<ul>
<li>Django:2.0.5</li>
<li>Python:3</li>
<li>Mysql:5.7.20</li>
<li>PyMySQL:0.8.0</li>
</ul>
<h2 id="一、配置数据库-包括model层"><a href="#一、配置数据库-包括model层" class="headerlink" title="一、配置数据库(包括model层)"></a>一、配置数据库(包括model层)</h2><ul>
<li>settings.py文件</li>
</ul>
<p>1.配置mysql连接</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="meta">#<span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span></span><br><span class="line">        <span class="meta">#<span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span></span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;testdata&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;xxxxx&#x27;</span>, <span class="meta">#数据库密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.注册app</p>
<blockquote>
<p>命令行生成app</p>
</blockquote>
<blockquote>
<p>需要先在__init__.py文件中导入pymysql,参见后面数据库操作1</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">python</span> manage.<span class="keyword">py</span> startapp appname</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再在配置文件中配置</p>
</blockquote>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="type">INSTALLED_APPS</span> = [</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.admin&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.auth&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.contenttypes&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.sessions&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.messages&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.staticfiles&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;appname&#x27;</span> #最后一行加上app名</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<ul>
<li>models.py</li>
</ul>
<blockquote>
<p>定义models.py中的类</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"> # -*- coding: utf-<span class="number">8</span> -*-</span><br><span class="line"><span class="title">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="title">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="meta"># Create your models here.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> message(<span class="title">models</span>.<span class="type">Model</span>):</span></span><br><span class="line"><span class="class">    username = models.<span class="type">CharField</span>(<span class="title">max_length</span>=20)</span></span><br><span class="line"><span class="class">    password = models.<span class="type">CharField</span>(<span class="title">max_length</span>=15)</span></span><br></pre></td></tr></table></figure>

<h2 id="二、数据库操作-models-gt-mysql"><a href="#二、数据库操作-models-gt-mysql" class="headerlink" title="二、数据库操作(models-&gt;mysql)"></a>二、数据库操作(models-&gt;mysql)</h2><p>1.pymysql</p>
<p>区别于python2，python3中没有MysqlDB,所以python3不能连接到数据库，会报错”no modul MysqlDB”,替代包有pyMySQL,Mysqlclient.</p>
<blockquote>
<p>在站点文件中的__init__.py中导入</p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="title">pymysql</span>.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>2.命令行操作</p>
<blockquote>
<p>生成数据库迁移类</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> makemigrations appname</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把迁移类迁移到数据库</p>
</blockquote>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数据库操作</li>
</ol>
<blockquote>
<p>迁移前</p>
</blockquote>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&gt;mysql -u root -p<span class="comment">;</span></span><br><span class="line">&gt;password<span class="comment">;</span></span><br><span class="line">&gt;create database testdata<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>迁移后</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash">show databases;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">use testdata;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">show tables;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">desc appname_message <span class="comment">#查看同步的数据表结构</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">select * from appname_message <span class="comment">#查看数据表结构</span></span></span><br></pre></td></tr></table></figure>

<h2 id="三、view层"><a href="#三、view层" class="headerlink" title="三、view层"></a>三、view层</h2><ul>
<li>views.py文件<blockquote>
<p>导入包</p>
</blockquote>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">from</span> appname <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义insert函数，用于将网页数据插入到数据库</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">def <span class="keyword">insert</span>(request):</span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span> == &quot;POST&quot;:</span><br><span class="line">        username = request.POST.<span class="keyword">get</span>(&quot;username&quot;, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">password</span> = request.POST.<span class="keyword">get</span>(&quot;password&quot;, <span class="keyword">None</span>)</span><br><span class="line">        models.message.objects.<span class="keyword">create</span>(username=username, <span class="keyword">password</span>=<span class="keyword">password</span>)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;insert.html&#x27;</span>)  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>定义list函数,用于将数据库数据显示到网页</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(request)</span></span>:</span><br><span class="line">        people_list = models.message.objects.all()</span><br><span class="line">        <span class="keyword">return</span> render_to_response(<span class="string">&quot;showuser.html&quot;</span>,&#123;<span class="string">&quot;people_list&quot;</span><span class="symbol">:people_list</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="四、control层-urls-py"><a href="#四、control层-urls-py" class="headerlink" title="四、control层(urls.py)"></a>四、control层(urls.py)</h2><blockquote>
<p>控制访问路径</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> appname <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^insert/&#x27;</span>,views.insert),</span><br><span class="line">    url(<span class="string">r&#x27;^show/&#x27;</span>,views.<span class="built_in">list</span>),</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="五、网页部分-templates"><a href="#五、网页部分-templates" class="headerlink" title="五、网页部分(templates)"></a>五、网页部分(templates)</h2><blockquote>
<p>在根文件夹下创建templates文件夹,并在setting.py中配置TEMPLATES的’DIRS’</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">TEMPLATES</span> = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="comment">#配置templates的路径</span></span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<blockquote>
<p>插入数据页面insert.html</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/insert/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>显示数据页面showuser.html</p>
</blockquote>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>信息展示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &lt;<span class="attr">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> line <span class="keyword">in</span> people_list %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;line.username&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;line.password&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="六、csrf报错"><a href="#六、csrf报错" class="headerlink" title="六、csrf报错"></a>六、csrf报错</h2><blockquote>
<p>页面提交数据报错(403)，在setting.py中关闭CSRF</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">MIDDLEWARE</span> = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment">#&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>-参考:</p>
<p><a href="https://blog.csdn.net/yf999573/article/details/53081196">https://blog.csdn.net/yf999573/article/details/53081196</a></p>
<p><a href="https://blog.csdn.net/it_dream_er/article/details/52093362">https://blog.csdn.net/it_dream_er/article/details/52093362</a></p>
]]></content>
      <categories>
        <category>Django框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>教程1 Django初学实践，创建简易blog</title>
    <url>/2018/05/03/django/A%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B(%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2)/</url>
    <content><![CDATA[<blockquote>
<p>Django框架,以MVT(mvc+T)模式高效开发web,超越spring系列的存在</p>
</blockquote>
<span id="more"></span>

<h1 id="1-前期工作"><a href="#1-前期工作" class="headerlink" title="1.前期工作"></a>1.前期工作</h1><p>以下命令在命令行下完成</p>
<ul>
<li>创建项目</li>
</ul>
<blockquote>
<p>该命令生成manage.py文件和4个基本配置文件，如果项目已有相关文件，就无需再使用该命令</p>
</blockquote>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">django-<span class="literal">admin</span>.py startproject mysite</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生成文件如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>mysite</th>
<th>-</th>
</tr>
</thead>
</table>
<ul>
<li><p>| <strong>init</strong>.py</p>
</li>
<li><p>| settings.py</p>
</li>
<li><p>| urls.py</p>
</li>
<li><p>| wsgi.py<br>manage.py|-</p>
</li>
<li><p>运行服务器</p>
</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> runserver</span><br><span class="line">#可更改端口:<span class="keyword">python</span> manage.<span class="keyword">py</span> runserver <span class="number">8003</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建应用(app)</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> startapp blog</span><br></pre></td></tr></table></figure>



<h1 id="2-mvc设计"><a href="#2-mvc设计" class="headerlink" title="2.mvc设计"></a>2.mvc设计</h1><ul>
<li>models(models.py)<br>用于定义数据结构</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#from __future__ import unicode_literals</span></span><br><span class="line"><span class="meta">#该命令负责转码，非必须使用</span></span><br><span class="line"></span><br><span class="line"><span class="title">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="title">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">BlogPost</span>(<span class="title">models</span>.<span class="type">Model</span>):</span></span><br><span class="line"><span class="class">    title = models.<span class="type">CharField</span>(<span class="title">max_length</span> =150)</span></span><br><span class="line"><span class="class">    body = models.<span class="type">TextField</span>()</span></span><br><span class="line"><span class="class">    timestamp = models.<span class="type">DateTimeField</span>()</span></span><br><span class="line"><span class="class"># <span class="type">BlogPost</span>类是django.db.models.<span class="type">Model</span>的一个子类 。</span></span><br><span class="line"><span class="class">#它有变量title(<span class="title">blog</span>的标题)，body(<span class="title">blog</span>的内容部分)，</span></span><br><span class="line"><span class="class">#timestamp(<span class="title">blog</span>的发表时间)。   </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">BlogPostAdmin</span>(<span class="title">admin</span>.<span class="type">ModelAdmin</span>):</span></span><br><span class="line"><span class="class">    list_display = (&#x27;<span class="title">title&#x27;</span>,&#x27;<span class="title">timestamp&#x27;</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>views(views.py)</li>
</ul>
<p>该层用于定义request和response，就是用户请求后获得什么样的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogPost</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span>  render_to_response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myBlogs</span>(<span class="params">request</span>):</span><br><span class="line">    blog_list = BlogPost.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;BlogTemplate.html&#x27;</span>,&#123;<span class="string">&#x27;blog_list&#x27;</span>:blog_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;&lt;h1&gt;hello disanda&lt;h1&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>controller(urls.py)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> blog.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^myBlogs/$&#x27;</span>,myBlogs),</span><br><span class="line">    url(<span class="string">&#x27;&#x27;</span>,Hello)    </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="3-templates模版网站-MTV模式"><a href="#3-templates模版网站-MTV模式" class="headerlink" title="3.templates模版网站(MTV模式)"></a>3.templates模版网站(MTV模式)</h1><p>在根项目文件下创建templates文件夹(用于存放前端网页)，并在根配置文件(settings.py)配置templates路径。</p>
<blockquote>
<p>‘DIRS’: [os.path.join(BASE_DIR,’templates’)],</p>
</blockquote>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="type">TEMPLATES</span> = [</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="symbol">&#x27;BACKEND&#x27;</span>: <span class="symbol">&#x27;django</span>.template.backends.django.<span class="type">DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="symbol">&#x27;DIRS&#x27;</span>: [os.path.join(<span class="type">BASE_DIR</span>,<span class="symbol">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="symbol">&#x27;APP_DIRS&#x27;</span>: <span class="type">True</span>,</span><br><span class="line">        <span class="symbol">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="symbol">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="symbol">&#x27;django</span>.template.context_processors.debug&#x27;,</span><br><span class="line">                <span class="symbol">&#x27;django</span>.template.context_processors.request&#x27;,</span><br><span class="line">                <span class="symbol">&#x27;django</span>.contrib.auth.context_processors.auth&#x27;,</span><br><span class="line">                <span class="symbol">&#x27;django</span>.contrib.messages.context_processors.messages&#x27;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h2 id="基模版页"><a href="#基模版页" class="headerlink" title="基模版页"></a>基模版页</h2><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">#名为base.html</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">body</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: <span class="number">#efd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background</span>: <span class="number">#BBBBBB</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">5em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin</span>:<span class="number">7px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">h1</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">padding</span>: <span class="number">2em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background</span>: <span class="number">#675</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">h2</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: <span class="number">#85F2F2</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">border-top</span>: <span class="number">1px</span> dotted <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin-top</span>:<span class="number">2em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-tag">p</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">margin</span>:<span class="number">1em</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>XX博文<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>小生不才，但求简约！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="具体网页-和views-py中的网页对应"><a href="#具体网页-和views-py中的网页对应" class="headerlink" title="具体网页(和views.py中的网页对应)"></a>具体网页(和views.py中的网页对应)</h2><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">#名为BlogTemplate.html</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;base.html&quot; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> blog_list %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.timestamp &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.body &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="4-配置工作"><a href="#4-配置工作" class="headerlink" title="4.配置工作"></a>4.配置工作</h1><h2 id="2-1前期配置"><a href="#2-1前期配置" class="headerlink" title="2.1前期配置"></a>2.1前期配置</h2><ul>
<li>在setting.py的<strong>INSTALLED_APP</strong>列表中配置app</li>
</ul>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="type">INSTALLED_APPS</span> = (</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.admin&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.auth&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.contenttypes&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.sessions&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.messages&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;django</span>.contrib.staticfiles&#x27;,</span><br><span class="line">    <span class="symbol">&#x27;blog&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<ul>
<li>在setting.py中配置数据库连接</li>
</ul>
<h2 id="2-2-model相关-写完model之后"><a href="#2-2-model相关-写完model之后" class="headerlink" title="2.2 model相关(写完model之后)"></a>2.2 model相关(写完model之后)</h2><ul>
<li>记录model变动</li>
</ul>
<p>完成后会生成model中对应类的文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> makemigrations</span><br></pre></td></tr></table></figure>


<ul>
<li>同步数据库</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></table></figure>

<ul>
<li>创建超级管理员</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span>  createsuperuser</span><br></pre></td></tr></table></figure>

<ul>
<li>在admin.py中注册model模型中的类</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blog.models import B<span class="keyword">log</span>Post</span><br><span class="line">admin.site.register(B<span class="keyword">log</span>Post)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Django框架</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>about Markdown</title>
    <url>/2017/10/01/%E5%85%B6%E4%BB%96/about%20markdown/</url>
    <content><![CDATA[<h1 id="Markdown-语法和-MWeb-写作使用说明"><a href="#Markdown-语法和-MWeb-写作使用说明" class="headerlink" title="Markdown 语法和 MWeb 写作使用说明"></a>Markdown 语法和 MWeb 写作使用说明</h1><h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote>
<p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>
</blockquote>
<span id="more"></span>

<h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;` </span><br><span class="line">## 第二级标题 `&lt;h2&gt;` </span><br><span class="line">###### 第六级标题 `&lt;h6&gt;` </span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">*这些文字会生成`&lt;em&gt;`*</span><br><span class="line">_这些文字会生成`&lt;u&gt;`_</span><br><span class="line"></span><br><span class="line">**这些文字会生成`&lt;strong&gt;`**</span><br><span class="line">__这些文字会生成`&lt;strong&gt;`__</span><br></pre></td></tr></table></figure>

<p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p>
<p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p>
<p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 项目一 无序列表 <span class="code">`* + 空格键`</span></span><br><span class="line"><span class="bullet">*</span> 项目二</span><br><span class="line"><span class="bullet">*</span> 项目二的子项目一 无序列表 <span class="code">`TAB + * + 空格键`</span></span><br><span class="line"><span class="bullet">*</span> 项目二的子项目二</span><br></pre></td></tr></table></figure>

<p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p>
<ul>
<li>项目一 无序列表 <code>* + 空格键</code></li>
<li>项目二</li>
<li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li>
<li>项目二的子项目二</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 项目一 有序列表 <span class="code">`数字 + . + 空格键`</span></span><br><span class="line"><span class="bullet">2.</span> 项目二 </span><br><span class="line"><span class="bullet">3.</span> 项目三</span><br><span class="line"><span class="bullet">1.</span> 项目三的子项目一 有序列表 <span class="code">`TAB + 数字 + . + 空格键`</span></span><br><span class="line"><span class="bullet">2.</span> 项目三的子项目二</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>项目一 有序列表 <code>数字 + . + 空格键</code></li>
<li>项目二 </li>
<li>项目三</li>
<li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li>
<li>项目三的子项目二</li>
</ol>
<h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">- <span class="selector-attr">[ ]</span> 任务一 未做任务 `- + 空格 + <span class="selector-attr">[ ]</span>`</span><br><span class="line">- <span class="selector-attr">[x]</span> 任务二 已做任务 `- + 空格 + <span class="selector-attr">[x]</span>`</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">![<span class="string">GitHub</span> <span class="string">set</span> <span class="string">up</span>](<span class="string">http</span>://<span class="string">zh</span>.<span class="string">mweb</span>.<span class="string">im</span>/<span class="string">asset</span>/<span class="string">img</span>/<span class="built_in">set-up-git.gif)</span></span><br><span class="line">格式: ![<span class="string">Alt</span> <span class="string">Text</span>](<span class="string">url</span>)</span><br></pre></td></tr></table></figure>

<p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p>
<p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">email &lt;<span class="symbol">example@</span>example.com&gt;</span><br><span class="line"><span class="string">[GitHub]</span>(http:<span class="comment">//github.com)</span></span><br><span class="line">自动生成连接  &lt;http:<span class="comment">//www.github.com/&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p>
<p>Email 连接： <a href="mailto:&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;">&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a><br><a href="http://github.com/">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/">http://www.github.com/</a> 这样</p>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line">某某说:</span><br><span class="line"><span class="meta">&gt;</span> <span class="language-javascript">第一行引用</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="language-javascript">第二行费用文字</span></span><br></pre></td></tr></table></figure>

<p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p>
<p>某某说:</p>
<blockquote>
<p>第一行引用<br>第二行费用文字</p>
</blockquote>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">像这样即可：`&lt;addr&gt;` `code`</span><br></pre></td></tr></table></figure>

<p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p>
<p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p>
<h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fancyAlert</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.<span class="title function_">facebox</span>(&#123;<span class="attr">div</span>:<span class="string">&#x27;#foo&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fancyAlert</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.<span class="title function_">facebox</span>(&#123;<span class="attr">div</span>:<span class="string">&#x27;#foo&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
</code></pre>
<p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/">http://adrai.github.io/flowchart.js/</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">第一格表头 <span class="string">| 第二格表头</span></span><br><span class="line">--------- <span class="string">| -------------</span></span><br><span class="line">内容单元格 第一列第一格 <span class="string">| 内容单元格第二列第一格</span></span><br><span class="line">内容单元格 第一列第二格 多加文字 <span class="string">| 内容单元格第二列第二格</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody></table>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<p>效果如下：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p>
<hr>
<hr>
<hr>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">块级公式：</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span>	x = \dfrac&#123;-b \pm \<span class="built_in">sqrt</span>&#123;b^<span class="number">2</span> - <span class="number">4</span>ac&#125;&#125;&#123;<span class="number">2</span>a&#125; <span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"></span><br><span class="line">\\[ \<span class="built_in">frac</span>&#123;<span class="number">1</span>&#125;&#123;\Bigl(\<span class="built_in">sqrt</span>&#123;\phi \<span class="built_in">sqrt</span>&#123;<span class="number">5</span>&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \<span class="built_in">pi</span>&#125;&#125; =</span><br><span class="line"><span class="number">1</span>+\<span class="built_in">frac</span>&#123;e^&#123;<span class="number">-2</span>\<span class="built_in">pi</span>&#125;&#125; &#123;<span class="number">1</span>+\<span class="built_in">frac</span>&#123;e^&#123;<span class="number">-4</span>\<span class="built_in">pi</span>&#125;&#125; &#123;<span class="number">1</span>+\<span class="built_in">frac</span>&#123;e^&#123;<span class="number">-6</span>\<span class="built_in">pi</span>&#125;&#125;</span><br><span class="line">&#123;<span class="number">1</span>+\<span class="built_in">frac</span>&#123;e^&#123;<span class="number">-8</span>\<span class="built_in">pi</span>&#125;&#125; &#123;<span class="number">1</span>+\ldots&#125; &#125; &#125; &#125; \\]</span><br><span class="line"></span><br><span class="line">行内公式： <span class="symbol">$</span>\<span class="built_in">Gamma</span>(n) = (n<span class="number">-1</span>)!\quad\forall n\in\mathbb N<span class="symbol">$</span></span><br></pre></td></tr></table></figure>

<p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p>
<p>块级公式：<br>$$    x &#x3D; \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} &#x3D;<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<p>行内公式： $\Gamma(n) &#x3D; (n-1)!\quad\forall n\in\mathbb N$</p>
<h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">这是一个脚注：[<span class="symbol">^sample_footnote</span>]</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>这是一个脚注：<a href="%E8%BF%99%E9%87%8C%E6%98%AF%E8%84%9A%E6%B3%A8%E4%BF%A1%E6%81%AF">^sample_footnote</a></p>
<h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment -->
<!-- more -->

<p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[TOC]</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>[TOC]</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>sql基础教程1</title>
    <url>/2017/11/09/sql/sql_1/</url>
    <content><![CDATA[<p>针对常用命令直接实践掌握<br> <span id="more"></span></p>
<h1 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h1><h2 id="1-启动登录"><a href="#1-启动登录" class="headerlink" title="1.启动登录"></a>1.启动登录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">service mysqld start <span class="regexp">//</span>启动mysql</span><br><span class="line">mysql -u root -p password <span class="regexp">//</span>登陆root password</span><br></pre></td></tr></table></figure>
<h2 id="2-建立新用户-grant命令"><a href="#2-建立新用户-grant命令" class="headerlink" title="2.建立新用户(grant命令)"></a>2.建立新用户(grant命令)</h2><p>格式：<br>grant all privileges on 数据库.* to 用户名@登录主机 identified by “密码”； 　　</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> shopex.* <span class="keyword">to</span> test@localhost identified <span class="keyword">by</span> </span><br><span class="line">&quot;1234&quot;; 　</span><br></pre></td></tr></table></figure>

<blockquote>
<p>增加一个用户test密码为”1234”,让他只可以在localhost上登录，并可以对数据库Shopex进行所有的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）</p>
</blockquote>
<h2 id="3-操作数据库"><a href="#3-操作数据库" class="headerlink" title="3.操作数据库"></a>3.操作数据库</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> student_management;</span><br><span class="line">//创建数据库</span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use student_management;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_info(stu_id <span class="type">int</span>,<span class="type">name</span> <span class="type">varchar</span>(<span class="number">8</span>),sex <span class="type">varchar</span>(<span class="number">4</span>),<span class="keyword">class</span> <span class="type">varchar</span>(<span class="number">16</span>));</span><br><span class="line">//创建student_info表</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_info(tea_id <span class="type">int</span> <span class="keyword">primary key</span>,<span class="type">name</span> <span class="type">varchar</span>(<span class="number">8</span>),sex <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">check</span>(sex=’男’ <span class="keyword">or</span> sex=’女’),join_time <span class="type">date</span>,nationality <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">default</span> ’汉族’)</span><br><span class="line">//主键、约束、默认值</span><br><span class="line"></span><br><span class="line"><span class="keyword">desc</span> student_info;</span><br><span class="line">//查看表结构</span><br></pre></td></tr></table></figure>

<h1 id="二、对表数据操作"><a href="#二、对表数据操作" class="headerlink" title="二、对表数据操作"></a>二、对表数据操作</h1><h2 id="1-增删改"><a href="#1-增删改" class="headerlink" title="1.增删改"></a>1.增删改</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_info <span class="keyword">values</span>(<span class="number">20080201</span>,’张帅’,’男’,’计算机软件’);</span><br><span class="line">//增加一行数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> student_info <span class="keyword">set</span> <span class="keyword">class</span>=’计算机软件’ <span class="keyword">where</span> <span class="type">name</span>=’王青’;</span><br><span class="line">//修改一行数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student_info <span class="keyword">where</span> <span class="type">name</span>=’张玲’;</span><br><span class="line">//删除一行数据</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student_info <span class="keyword">order</span> <span class="keyword">by</span> stu_id;</span><br><span class="line">//<span class="keyword">order</span> <span class="keyword">by</span>子句：按顺序排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> stu_id,<span class="keyword">class</span> <span class="keyword">from</span> student_info <span class="keyword">where</span> <span class="type">name</span>=’李飞’;</span><br><span class="line">//<span class="keyword">where</span>子句：过滤记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> count(*) <span class="keyword">from</span> student_info;</span><br><span class="line">//count()函数：计数</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> student_info <span class="keyword">where</span> <span class="type">name</span> <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span>;</span><br><span class="line">//<span class="keyword">like</span>操作符:模式（模糊）匹配,&quot;%&quot;符号用于在模式的前后定义通配符（缺省字母）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="三、对表结构操作"><a href="#三、对表结构操作" class="headerlink" title="三、对表结构操作"></a>三、对表结构操作</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_info <span class="keyword">add</span> tel_num <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">//添加字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_info change <span class="type">name</span> stu_name <span class="type">varchar</span>(<span class="number">8</span>);</span><br><span class="line">//修改字段名称</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_info modify stu_id <span class="type">int</span> <span class="keyword">primary key</span>;</span><br><span class="line">//修改字段属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> tavle student_info modify tel_num <span class="type">int</span>(<span class="number">22</span>);</span><br><span class="line">//同上</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_info <span class="keyword">drop</span> <span class="keyword">column</span> tel_num;</span><br><span class="line">//删除字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> course_info;</span><br><span class="line">//删除表</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> student_management;</span><br><span class="line">//删除数据库</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql_2</title>
    <url>/2017/11/07/sql/sql_2/</url>
    <content><![CDATA[<h1 id="查询-2"><a href="#查询-2" class="headerlink" title="查询_2"></a>查询_2</h1><span id="more"></span>

<h2 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1. 聚合函数"></a>1. 聚合函数</h2><p>计算列中的值，返回一个单一的值</p>
<p>SUM() 求总和</p>
<p>MIN() 最小值</p>
<p>MAX() 最大值</p>
<p>AVG() 平均值</p>
<p>count() 返回行数</p>
<p>first()</p>
<p>last()</p>
<h2 id="2-join-inner-join-left-join-right-join"><a href="#2-join-inner-join-left-join-right-join" class="headerlink" title="2. join (inner join,left join,right join)"></a>2. join (inner join,left join,right join)</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.id, Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id;</span><br><span class="line">//把两张表拼起来查询</span><br></pre></td></tr></table></figure>

<h2 id="3-group-by-语句"><a href="#3-group-by-语句" class="headerlink" title="3. group by 语句"></a>3. group by 语句</h2><p>结合聚合函数使用</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> site_id, <span class="built_in">SUM</span>(access_log.<span class="built_in">count</span>) <span class="keyword">AS</span> nums</span><br><span class="line"><span class="keyword">FROM</span> access_log <span class="keyword">GROUP</span> <span class="keyword">BY</span> site_id;</span><br><span class="line">//按某一字段，聚合其他字段数据后显示新表</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Websites.name,<span class="built_in">COUNT</span>(access_log.aid) <span class="keyword">AS</span> nums <span class="keyword">FROM</span> access_log</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Websites</span><br><span class="line"><span class="keyword">ON</span> access_log.site_id=Websites.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name;</span><br><span class="line">//</span><br></pre></td></tr></table></figure>


<h2 id="4-having-子句"><a href="#4-having-子句" class="headerlink" title="4. having 子句"></a>4. having 子句</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url, SUM(access_log.count) <span class="keyword">AS</span> nums <span class="keyword">FROM</span> (access_log</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Websites</span><br><span class="line"><span class="keyword">ON</span> access_log.site_id=Websites.id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name</span><br><span class="line"><span class="keyword">HAVING</span> SUM(access_log.count) &gt; <span class="number">200</span>;</span><br><span class="line">//<span class="keyword">having</span>的作用在于对<span class="keyword">group</span> <span class="keyword">by</span>后的数据进行筛选，类似<span class="keyword">where</span>，而<span class="keyword">where</span>不能用聚合函数 </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Websites.name, SUM(access_log.count) <span class="keyword">AS</span> nums <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">WHERE</span> Websites.alexa &lt; <span class="number">200</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Websites.name</span><br><span class="line"><span class="keyword">HAVING</span> SUM(access_log.count) &gt; <span class="number">200</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>高数基础</title>
    <url>/2017/11/22/math/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="高数基础"><a href="#高数基础" class="headerlink" title="高数基础"></a>高数基础</h1><span id="more"></span>
<h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><p>a.y’&#x3D;dy&#x2F;dx</p>
<p>b.y’的值为曲线在该点切线的斜率</p>
<h2 id="极值"><a href="#极值" class="headerlink" title="极值"></a>极值</h2><p>在数学分析中，函数的最大值和最小值（最大值和最小值）被统称为极值（极数），是给定范围内的函数的最大值和最小值（本地 或相对极值）或函数的整个定义域（全局或绝对极值）。</p>
<p>a.求导数$f’(x)&#x3D;0$的根（值）</p>
<p>b.该点为极值（一定范围内）</p>
<h2 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h2><p>分为单调递增和单调递减</p>
<p>a.当f’(x)&gt;0$时，函数单调递增</p>
<p>b.当$f’(x)&lt;0$时，函数单调递减</p>
<p>##连续性</p>
]]></content>
      <categories>
        <category>高数基础</category>
      </categories>
      <tags>
        <tag>公式</tag>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>对当下高职教育的个人感想</title>
    <url>/2018/07/20/%E6%97%A5%E8%AE%B0/%E5%AF%B9%E5%BD%93%E4%B8%8B%E9%AB%98%E8%81%8C%E6%95%99%E8%82%B2%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>对当下高职教育，学历提升和上升通道的思考</p>
<span id="more"></span>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=21116386&auto=0&height=32"></iframe>


<blockquote>
<p>说到教育，先谈一谈我们教育一件最重要的事</p>
</blockquote>
<ul>
<li>高考</li>
</ul>
<p>不可否认，高考是当下我国<strong>最重要</strong>的考试，没有之一，无数人因此踏实不同的人生道路，去不同的城市，不同的大学，不同的专业，迎接不同的人生。</p>
<p>高考也是人生的第一次分水岭，十年磨一剑，去了一流大学的人，相对得到更好的资源和平台，也就是更好的发展，事实证明，这是大概率的情况。</p>
<p>对于一般本科的学生而言，相对前者有一个质的差距，无论就业的机会，还是学校四年的机会和经历，举例。外交部等部委到学校的直接招聘，海外和国内名校的保送名额，还有跨国企业的招聘，无论就业岗位和层次，都会有差距。</p>
<p>当然，从高考的选拔角度来说，应试能力和个人实力造成了这样的差距，公平竞争，通过高考选拔人才，这无可厚非。但我们不能忽略个人努力的在不同时期的差异。</p>
<blockquote>
<p>无论高考结果与否，我认为，只要一个人在任何时刻省悟，并投入努力去拼搏，就应该有改变命运的机会。</p>
</blockquote>
<ul>
<li>出国&amp;考研</li>
</ul>
<p>考研总的来说给了当下普通本科生一次“再高考”的机会，当今很多人，都是这个机会的受益者。通过考研，相对公平的考试和选拔制度，让大量人以“追求学术的名义”从新选择高校，从而进入名校，得到较好学校的就业和发展机会。</p>
<p>我无意笃定高考和考研对人生的决定性，只是它的重要性在当下中国具有普片意义。必须承认，高考不理想或未考研的学生中不乏优秀成功的人，但按比例和趋势看，这不具有普片意义，对大部分人来说，还是高考和考研提高了他们就业和发展的可能性，完成了一次质变。</p>
<p>以上说的，是客观问题。机会有了，成功与否很大程度上是个人努力决定的。高考成功，考研成功等等成功，机会只是一方面。但对于高职学生来说，这样的机会现在显的有点少。</p>
<ul>
<li>高职教育</li>
</ul>
<p>高职学生和大部分本科学生一样，同样的年龄，同样的体制和教育后开始新的旅程。</p>
<p>在这样一个大好年纪，无论处于任何一个环境和学历，人都有提高自己，追求更好生活的权力，更何况相对本科处于劣势的高职学生，特别那些优秀的高职学生。</p>
<p>然而现在的情况并没有这样的机会，一方面，专升本的考试升学率一直在降低，专生本并没有太多的学校可以选择，且不能跨省，这意味着专科教育就是针对本地为本地中小企业服务的教育，虽然专科教育按学生能力和社会需求，这样的定位并没有什么问题，但就个人通道而言，缺少上升路径。</p>
<blockquote>
<p>人生而平等，广大专科生是否能有类似考研的机会呢？</p>
</blockquote>
<ul>
<li>这机会意味着什么？</li>
</ul>
<p>我想一个优秀的高职学生，也可能会有改变努力命运的想法，如通过努力学习，去更好的大学，感受一下大学的生活和教育，有更好的平台和人生，去其他城市，从南到北，离开家乡去看看，闯一闯，趁年轻，看看外面的世界。</p>
<ul>
<li>我的感想和建议</li>
</ul>
<p>给高职学生一个这样的机会，在物质生活日益丰盛的今天，文化和精神的需求变得更为强烈，国家发展也处于由劳动密集型向科研创新型转变，需要这样的机会，提高全民整体的高等教育水平。</p>
<p>就我一线的从教感受而言，当下的高职学生，也对专升本考试日益重视，他们知道这个的意义和重要性，有一份少年本该有的渴望和梦想。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>高职教育</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大学城 和 青春</title>
    <url>/2017/10/01/%E6%97%A5%E8%AE%B0/%E5%A4%A7%E5%AD%A6%E5%9F%8E%E4%B8%8E%E9%9D%92%E6%98%A5/</url>
    <content><![CDATA[<h1 id="关于大学城-和-青春"><a href="#关于大学城-和-青春" class="headerlink" title="关于大学城 和 青春"></a>关于大学城 和 青春</h1> <span id="more"></span>
<h2 id="诗-amp-nbsp-和-amp-nbsp-远方"><a href="#诗-amp-nbsp-和-amp-nbsp-远方" class="headerlink" title="诗 &amp;nbsp; 和 &amp;nbsp; 远方"></a><em>诗</em> &amp;nbsp; 和 &amp;nbsp; <em>远方</em></h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=21116386&auto=1&height=32"></iframe>
    

<p>&amp;emsp;&amp;emsp;到重庆大学城不知不觉已经半年。说起大学城，基本每个城市都一样，隔一到两条街就是一个学校，是个有着无数且只有学校的地方。聊以慰藉的，是校里校外宽敞的公路，优美的绿化，还有一两个热闹的商街。。<br>&amp;emsp;&amp;emsp;当然，更多的是大面积未开发的区域，类似高速公路的环山的风景，还有一望无际类似田野的乡村，于是“城乡结合部”，“村里”这些描述偏僻的词语。<br><br>&amp;emsp;&amp;emsp;再后来，对大学城空旷和荒凉有了更明确的看法。城市要发展，也注定是一个缓慢的过程。<br><br>&amp;emsp;&amp;emsp;一代又一代的年轻人，大学不过就是人生的一段路，人生的起点。当我们站在大学城一望无际的土地上，是否会有对未来的憧憬而有点激情澎湃呢。<br>&amp;emsp;&amp;emsp;诚然，变革和发展必然伴随痛苦，在此为之无悔地奋斗，奉献青春，我觉得，是幸运地。脚下的土地，月光下天边的星空，会因我们的努力而改变。我们未来的时光，艰苦漫长，但不再迷茫。<br>&amp;emsp;&amp;emsp;这片土地伴随着你，无论好与坏，相聚离愁。<br>&amp;emsp;&amp;emsp;不如在这片土地，这段时光，不畏惧，不退缩，尽全力，做想做的事，做该做的梦。<br>&amp;emsp;&amp;emsp;终有一天，当你离开大学城时，<br>       <center>我想这就是对青春最好的注脚。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>游泳自学教程</title>
    <url>/2017/11/20/%E6%97%A5%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%B3%B3/</url>
    <content><![CDATA[<h1 id="游泳的自学教程"><a href="#游泳的自学教程" class="headerlink" title="游泳的自学教程"></a><em>游泳的自学教程</em></h1><p>前言</p>
<span id="more"></span>
<h2 id="游泳的前世今生"><a href="#游泳的前世今生" class="headerlink" title="~游泳的前世今生"></a>~游泳的前世今生</h2><p>感性地说游泳，除了星光和大海、就是对水的热爱。一种在船尾看着尾随鱼群想跳下去的冲动，一种搏击海浪的激情。</p>
<p>作为从小游泳游到大的人，可以说直到现在游的并不好。从小学花几百块和表哥参加师大的暑期的游泳班，到学校组织夏立营被同班的游泳好手淹个半死。很长时间并没有学会游泳。</p>
<p>直到有一天，在澄江。一个之前小时候双脚踩进青苔石块，就想伸手捞鱼的地方，一个后来偶然发现有着渔舟唱晚、天水一线的地方。瞬间学会了游泳。</p>
<p>可以说我对游泳的感觉是一直不会，一直再固执的坚持游，毕竟不太会游也可以游，主要目的是减肥。</p>
<p>总结下来，很多年因为偶然和勤奋等多种因素，还是长进不少。这里打算写一份课外教程，分享一些自学游泳的感悟。</p>
<p><img src="http://b23.photo.store.qq.com/psu?/d038ebb9-c143-4588-809f-47ff88541b1b/ah*f8M0j*3WqSFjsiI49GDpvdWxxUoRb52CB1bxdNuM!/b/YUmxUg5CKQAAYkuruw0tSwAA&a=24&b=23&bo=ngL2AQAAAAABAEw!&rf=viewer_4" alt="image"></p>
<h2 id="学游泳的keypoints"><a href="#学游泳的keypoints" class="headerlink" title="!学游泳的keypoints"></a>!学游泳的keypoints</h2><p>a.学会总在一瞬间：</p>
<p>游泳很具实践性，也就是本能，这也是为什么小孩更容易学会的原因。当然，像我这样也属于后天才逐渐掌握，就是也有理论的作用。</p>
<p>对于成年人来学游泳，必要的是多游，多练，当你掌握了一个关键技巧后，你的游泳技术就会上<strong>一个台阶</strong></p>
<p>b.必要的技巧:</p>
<p>1.<strong>水中平衡</strong>（<strong>这点非常重要</strong>）：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">是入门的标志，因为掌握水中的平衡是区别你在水中是</span><br><span class="line"><span class="strong">**竖着**</span>走还是<span class="strong">**横着**</span>走的关键，</span><br><span class="line">也是通俗说的是否会“换气”、和是否怕“淹水”等问题的解决的标志。</span><br></pre></td></tr></table></figure>

<p>2.学<strong>青蛙</strong>或<strong>小狗</strong>一样在水中前进</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">也是“蛙泳”和“自由泳”的学样式学法，通过根据动物在水中的动作，</span><br><span class="line">进行模仿学样，得到 <span class="strong">**横着**</span> 在水中前进的方法</span><br></pre></td></tr></table></figure>

<p>3.改进姿势</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">毕竟我们和动物结构是有区别的、动物的很多动作我们不能完全模仿，</span><br><span class="line">也不适合人，这时候就需要逐步“微调”，</span><br><span class="line">逐渐得到适合人且效率与舒适兼顾的游泳姿势。</span><br></pre></td></tr></table></figure>


<p>4.体能</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">这其实很好理解，也比较简单。</span><br><span class="line">就像跑步，体能不好，怎么跑？</span><br><span class="line">也是大多数热爱游泳的一个目的吧，锻炼身体，增强体能。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.身体协调</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">这是一个调节，就是游泳中每个动作的改进和适应，需要身体其它部位的协调，这在游泳中显得特别突出。</span><br><span class="line">因为游泳是<span class="strong">**全身性运动**</span>，你手在动的时候其他部位也在动。</span><br><span class="line">有时你觉得手的姿势不对，你调整手的姿势，但是你之前的动作和身体其他部位的动作（例如腿部）动作是协调的。</span><br><span class="line">这时挑战需要特别注意身体协调的配套适应改进。</span><br></pre></td></tr></table></figure>

<p>c.其他</p>
<p>我基本是自学的蛙泳和自由泳，蛙泳游的时间比较长，基本能保证正常速度在水中游蛙泳半个小时不会累。自由泳是研究生期间看一些教程和自己规划点练习学会的，前期游的不好，很累，现在能保证比蛙泳略快的前提下游20分钟不会感觉累。</p>
<p>之后如果有时间的话，我会针对以上5点，把自己游泳的心得整理出来，作为自学游泳的一个教程，分享给想自学游泳或者准备自学游泳的同学们。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>运动</tag>
      </tags>
  </entry>
  <entry>
    <title>故土阳光，启蒙众生__致2020</title>
    <url>/2020/02/01/%E6%97%A5%E8%AE%B0/%E6%95%85%E5%9C%9F%E9%98%B3%E5%85%89/</url>
    <content><![CDATA[<h1 id="故土阳光，启蒙众生-致2020"><a href="#故土阳光，启蒙众生-致2020" class="headerlink" title="故土阳光，启蒙众生__致2020"></a>故土阳光，启蒙众生__致2020</h1><h2 id="1-今年注定不同寻常"><a href="#1-今年注定不同寻常" class="headerlink" title="1.今年注定不同寻常"></a>1.今年注定不同寻常</h2><p>小时候听过工业革命中，汽车过多而倒逼修路的故事。</p>
<blockquote>
<p>而倒逼改革的时代也要来了吗？</p>
</blockquote>
<span id="more"></span>

<ul>
<li>庚子年</li>
</ul>
<p>庚子年是60年轮回的起点和终点，足够概括一生，人生应该是起点懵懂无知，到中途波澜壮阔，结尾荡气回肠。我们总是在生命的孕育和发展、消亡中扮演者一个可以部分选择的角色。</p>
<p>我们无法逃避的自然规律是，人生的舞台起点是故乡，如春光初照，也会如仲夏夜般梦境，上台演绎黄金岁月，并如冬至般黯然落幕。</p>
<p>自然规律不会随任何人的意志转移，任何为了一己私欲或者虚荣心而试图阻挡自然规律的行为，都会给这片土地和人民带来苦难和伤痛，学会释然和放下，毕竟强扭的瓜不甜。</p>
<ul>
<li>鼠年</li>
</ul>
<p>对传统文化和生肖文明我并不熟悉，但是在我有限认知里，对鼠类这个最小的哺乳动物是心怀敬意的，鼠最小也最强大。</p>
<p>我依稀记得三个关于它的故事：</p>
<p>一个是日本的动物纪录片，在寂静阴暗的下水道中，一个小老鼠妈妈死了，缩在一旁瑟瑟发抖，一个邻居‘阿姨’把它叼起走，顺带抚养这个小孤儿。</p>
<p>还有一个是抖音看到的短视频，也是小老鼠妈妈死了，但是这次是陆地上，人类的棒子还在一旁，小老鼠在一旁并没有逃走，而是保护妈妈。</p>
<p>以上让我深刻的感受到这个小动物对‘母爱’和‘团队’精神的伟大，同样生活在这个世界上，信仰也是生命力最大的表现。</p>
<p>最后一个故事是飞鼠‘蝙蝠’，应该是天然的病毒库，其强大的飞行能力和病毒共生能力成为一个bug，直接或间接携带的冠状病毒传染给人类，造成现在正在上演的华夏大地“瘟疫”。</p>
<blockquote>
<p>飞鼠只是灾难的信使，人心不古，灾难不绝</p>
</blockquote>
<h2 id="2-过去发生了什么"><a href="#2-过去发生了什么" class="headerlink" title="2.过去发生了什么"></a>2.过去发生了什么</h2><blockquote>
<p>这让我想起两件事，一个是金庸，一个是计划生育</p>
</blockquote>
<ul>
<li>金庸</li>
</ul>
<p>金庸老先生在18年底走了，但是他著作所诠释的江湖依然在一代又一代的上演着。缅怀金庸老先生，其作品小时候觉得有趣生动新奇，长大发现也有较深的价值观和深度。</p>
<p>现实中形形色色的人物在小说江湖中都有影子，绝学和武艺也是一种“能力”和“权利”的象征。</p>
<p>侠之大者，天下为先，小说精髓在于演绎英雄式的武侠人物在江湖行走中的初心。最终是走火入魔还是立地成佛。谁活着人们的心中，谁又活成个笑话，谁又最终被遗忘，化为历史的尘埃。</p>
<ul>
<li>计划生育</li>
</ul>
<p>我理解这个是少数伟大政策之一，这也说明人和钱到底谁更有价值。纵观欧美等发达国家经历几百万的工业化发展进入发达国家，无不地广人稀，人比较‘值钱’。川普甚至说过伊朗敢动一个美国公民就把你这个国家做掉。</p>
<p>能那么牛，可以进行一个简单的换算，就是一个人平均享有多少资源，一个人平均有能力创造多少价值，对待公民的价值和态度高下立判。</p>
<p>我们国家呢，我简单算下一个普通家庭分别养1个娃或者2个娃的情况，如果养1个娃月标配如下:</p>
<p>(无添加酸奶牛奶，英语口语班4次，游泳班2次，高达或者平衡车无人机等高端玩具买一次，nike kids买一次)</p>
<p>那么两个娃可能平均降低为:<br>(有添加酸奶和奶粉，英语口语2次，玩具大号一个，出门消费少一半)</p>
<p>实际上说这个还不算明显，我想表达的是人到人才这个质量的提升过程消耗是非常大的，有句话话糙理不糙：“人与人的差距比人与猪的差距还大”。你的小孩上专科，他家小孩上美国藤校，大风大浪来的时候，谁是炮灰？在遇到无知的吃蝙蝠、传销、p2p等等潜在的智商收割风险时，谁风险更大？</p>
<blockquote>
<p>超生注定不能提升民族素质和生活品质,那些鼓吹放开生育的专家，只是想薅人口红利的羊毛，有更多低端人口和低价劳动力可以利用，当他们没钱给足孩子教育和医疗的时候，他们敢这么说？</p>
</blockquote>
<p>不喝牛奶的孩子也可以长大没错，但是你可曾知道中国现状是别个喝着特轮舒，你却优酸乳都要犹豫？</p>
<ul>
<li>可以遇见的事</li>
</ul>
<p>人口红利肯定是不可能了，也有碍社会发展和公平以及两极分化。那么以后什么是刚需？</p>
<blockquote>
<p>教育和医疗,本质是内容(有价值的文化，知识，精神需求等等)</p>
</blockquote>
<p>什么是韭菜和泡沫？</p>
<blockquote>
<p>房子(也包括一些虚高的产品，猪价涨一倍卖的动你看房子现在不涨卖的动吗)</p>
</blockquote>
<h2 id="3-我们需要什么"><a href="#3-我们需要什么" class="headerlink" title="3.我们需要什么?"></a>3.我们需要什么?</h2><p>人生变化无常，在多事之秋，或乱世或变革，我想乐观和坚持是最重要的。</p>
<blockquote>
<p>乐观坚持什么？三件事:</p>
</blockquote>
<ul>
<li>求真(包括说真话，求真相，不撒谎)</li>
<li>勇气(有勇气接受爱，有勇气追求真相)</li>
<li>善良(善良是对未来恶的对抗，也是对过去恶的释怀)</li>
</ul>
<p>在此，向武汉8位“造谣”的医生致敬。</p>
<p>也许中国需要一场启蒙运动，有勇气追求真相，讲真话，对弊端和错误的人事说不。放下过重的私欲，不固执于执念，回归初心，我心永恒。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=1323083542&auto=1&height=32"></iframe>




]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>生命论文</title>
    <url>/2022/09/23/%E6%97%A5%E8%AE%B0/%E7%94%9F%E5%91%BD%E7%9A%84%E8%BD%AE%E5%9B%9E/</url>
    <content><![CDATA[<h1 id="生命的脉络，天命难违"><a href="#生命的脉络，天命难违" class="headerlink" title="生命的脉络，天命难违"></a>生命的脉络，天命难违</h1> <span id="more"></span>


<p>关于生命，是一个宏大而广泛的问题，甚至有一些伤感。这个问题突然出现在脑海，思考了几天，我这里想表达的是：</p>
<blockquote>
<p>任何生命都有终点，包括我们不愿意承认和忽视的。</p>
</blockquote>
<p>这里先抛三个问题：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.亲人的生命会有终点，我们是否准备好离别？</span><br><span class="line">2.我们的生命会有终点，我们是否准备好告别？</span><br><span class="line">3.人世间万物皆有终点，我们是崩溃还是平静？</span><br></pre></td></tr></table></figure>

<p>随着时间的推移，我们可能会首先碰到《问题1》。世事无常，扫墓时如果稍加留意就会发现，不同年龄段的人都会离别，甚至一些和我们年龄相仿的人已经告别远去。思绪万千，正如一句墓志铭：</p>
<p>“你虽然已永远离开我们，<br>       但留下的爱会永远存在“。</p>
<p>面对《问题2》，我想随着时间的推移，每一次的体检，每一次的身体的不适，都会若有所思吧。我们总是怀念当年的风华正茂，或者多活500年，然而，生命皆有终点，自己也是。平静地说，大多数人更合适的决定时平稳过好当下，该登顶时登顶，该下山时下山，不同阶段做不同阶段的事，自己和环境才能感受到舒适吧。</p>
<p>关键是《问题3》，除了个人，我想说的是还有很多事物，团体也是有生命的。通俗地说，大部分人类思想的产物，都会有会过时的一天。比如历史上的朝代，大唐，罗马。无论这些集体在当时多么辉煌和发达，随着时间的推移，都会有过时的一天。</p>
<p>这似乎是历史的宿命，我们任何人，任何人都无法逃避。说到这里，比较佩服英国女皇，理性退让交权，让位于新时代，换的世人的尊重和敬仰，不失为面对生命终点的”大智慧“。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>学术江湖</title>
    <url>/2022/02/20/%E6%97%A5%E8%AE%B0/%E6%97%A0%E7%A7%91%E7%A0%94%E4%B8%8D%E6%B1%9F%E6%B9%96/</url>
    <content><![CDATA[<h1 id="无江湖，不科研"><a href="#无江湖，不科研" class="headerlink" title="无江湖，不科研"></a>无江湖，不科研</h1> <span id="more"></span>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=1908999288&auto=1&height=32"></iframe>


<p>我至今觉得金庸先生的作品是伟大的，通过“江湖”而描述一个宏大的世界。彷佛我们的圈子甚至一生都可以涉猎并涵盖其中。通过入职高校并接触学术，我也概莫能外的体会到学术圈也是一个“江湖“。</p>
<p>有江湖的地方，就有利益，就有争夺和厮杀。江湖中有温情的角落，有阳光照射的地方，也有黑暗的裹挟和失落的广场。</p>
<p>也许不是所有事情都能适用于江湖，但是要想把学术的<strong>理想</strong>和<strong>现实</strong>做一个最恰当的平衡，我想金庸的江湖是最合适的。主角的光环和学术的新星，巨匠有着大体的迹遇。 绝世武功，才子佳人，伟大而正义的征途，等等。</p>
<p>但是对沉默的绝大多数人而言，在江湖中似乎并没有那么顺利，没有一路开挂般的一骑绝尘，登顶诸如院士之类的人生巅峰。而总是遇到各种磕磕碰碰，中途退出，在各种环节败北的也是大多数人所难免的境况。</p>
<p>那为什么我会提到&lt;&lt;金庸&gt;&gt; ?  其实是想建立一个理想和现实之间的桥梁。</p>
<p>金庸是我小时候特别爱读的作品之一。其中经典的各类人物和事迹似乎常常发生在我们身边。 比如为真爱自挖双眼殉情的阿紫。为理想追求一身并不时突破底线，但最终失去一切并看透一切的顿悟和尚，鸠摩智。甘当小三玩弄权术之间的丐帮康敏 。以及遨游于权贵之中任性发挥黑白通吃最终告老还乡的韦小宝 。</p>
<p>其中大部分人物来自脍炙人口的巅峰之作《天龙八部》。这部作品更围绕了一个深刻的佛家哲理：“爱而不得”。即当我们奋力地追求某一成就和目标时，在功利和嘈杂的世界往往事与愿违。而回顾别人会发现，更多的成功往往自无心插柳或意外收获，有时也会让人疑惑这似乎来自天分或运气？</p>
<p>人过半生，归来未必是少年，也未必有好的天赋和机缘功成名就。甚至成功以否随着阅历和年龄的增长，也变得不那么重要，那重要的是什么呢？</p>
<p>这就回到了起点，少年。初中时，我午夜12点偷偷潜逃出家门，只为了拿到便宜点价格，去网吧通宵玩《金庸 on-line》，追逐大侠(夜浩鸿)的梦想，闯荡宏大江湖。高中时，在家人睡觉后偷偷翻出床边的小说彻夜遨游小说《诛仙》，无非也是热爱那片奇遇的世界和辽阔的星云。</p>
<p>为什么少年的我们会如此狂热和挚爱所追求的事物？ 其中名利可能有影响，但不是第一位的，更不是我们能左右的。</p>
<p>那么除了热爱事物本身，没有别的答案。</p>
<p>这也是我写本文的初衷，学术，也包括其他任一行业和圈子，可能从现实而言其仅仅是一份工作，一种谋生的方式。当我们怀着某种现实意义上去追求功名，并不可能到达所谓的美好和圆满，现实总会有这样那样的角色和事物去干扰这个更像战场的江湖。</p>
<p>回顾科研本身，科研只是追求科学的一种方式而已，而科学作为一个类似游戏的事物，依然是可以像少年时金庸里的游戏和小说一样，去喜欢，去热爱。</p>
<p>​        </p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>有生以来第一次被如此期待</title>
    <url>/2011/03/27/%E6%97%A5%E8%AE%B0/%E7%81%8C%E7%AF%AE%E9%AB%98%E6%89%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h1 id="有生以来第一次被如此期待"><a href="#有生以来第一次被如此期待" class="headerlink" title="有生以来第一次被如此期待"></a>有生以来第一次被如此期待</h1><h2 id="评灌篮高手-SLAM-DUNK完全版"><a href="#评灌篮高手-SLAM-DUNK完全版" class="headerlink" title="评灌篮高手 SLAM DUNK完全版"></a>评<strong>灌篮高手</strong> <em>SLAM DUNK完全版</em></h2><center>————《why walk when you can fly》</center>
     &emsp;&emsp;*又一次重温经典，又一次的感动。。*<br> 
　　        &emsp;&emsp;*我可以感觉到血液的沸腾。。* <br>
　　            &emsp;&emsp;&emsp;&emsp;*我的思绪回到了小学。。。*<br> 
　　            <span id="more"></span>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=4990422&auto=1&height=32"></iframe>
     &emsp;&emsp;记得第一次看灌篮高手时，我尽然分错了主角，把仙道当成了主角，不过那时还是很欣赏樱木、流川枫，他们都很有天分。可是就不明白为什么他们非要互相敌对，后来明白的时候，真期待他们的联手，相信他们的联手绝对是一个黄金搭档，就像乔丹和皮蓬一样。<br>
     &emsp;&emsp;后来迷上了灌篮高手，当然也就分清主角了。每日都要守在电视机旁观看，我好像进入了电视中，和他们活在了一起，我迷失在现实世界中，而到了他们的世界。 <br>
     &emsp;&emsp;我把周围的一切、同学、朋友 都按照他们的外貌、性格和感觉分成动画中的角色。 <br>
     &emsp;&emsp;也因为灌篮高手，我打了几年篮球，<br>
     &emsp;&emsp;小学生的篮球可能就是随便玩玩，没什么技术含量。<br>
     &emsp;&emsp;但是我很怀念那段时间，我们十几个同学周末的时候一起去打篮球的场景， <br>
　　 
　　&emsp;&emsp;那时候，灌篮高手很火，甚至我们的班主任女老师 也非常喜欢看灌篮高手。<br> 
　　
　　我们同学打篮球的时候，也会把自己当成 动画中的角色。 
　　 
　　当然多数都是自称 天才，樱木或者流川枫， 
　　 
　　我在篮球场的时候，真的把自己当成了他们。 
　　 
　　我幻想着自己有一天会成为世界篮球界的焦点，说不定我真是一个篮球天才呢。 
　　 
　　就像我现在一样，当我看越狱的那段时间，我多数时间是把自己想象成 迈克尔-斯科菲尔德，我的外貌变成了他的，我想象自己用他的眼睛来看待这个世界。 
　　 
　　时间流逝、几年没动过篮球，这个梦也深深的埋在了我的心里的一个角落。我有点害怕去寻找他，我不敢正视这个梦想。 
　　 
　　就像我以前提到过，我们看电影、动画、小说，多数是为了满足我们潜意识的需要。现实中做不到，就在这些地方寻求。 
　　 
　　正因如此，我更加迷恋灌篮高手了， 
　　 
　　我不知道，他们是因果关系，还是相等关系。 
　　每当我感到空虚失落的时候，就想重温一下《灌篮高手》 
　　 
　　 
　　 
　　被如此期待……是有生以来……第一次。。 
　　 
　　这是我们的天才选手—樱木花道 在全国大赛中对决 山王时，被安西教练委以重任时说的一句话（你是我们反败为胜的王牌！） 
　　 
　　 
　　 
　　短短的几分钟，太多的经典镜头， 
　　 
　　记得，樱木开始打篮球，并不是喜欢篮球运动，相反他还很讨厌篮球，也正因为讨厌，才和队长赤木有了一场精彩对决（哈哈，我想到了 赤木裤子被扒下的场景） 
　　 
　　但是，在对决山王的时候，樱木为了抢下一个要落入边界的球，飞身跳过去，身体砸在了桌子上， 
　　 
　　可是为这一球，差点断送了 樱木的 篮球生涯。 
　　 
　　樱木感觉到了背部的疼痛， 
　　 
　　 
　　 
　　 
　　 
　　樱木陷入了回想，他的第一次比赛，和赤木的对决、两万球特训，这些场景在樱木的脑海里回荡。 
　　 
　　樱木站起来了，来到了晴子的身旁，说出了他对篮球的喜爱 
　　 
　　“我非常喜欢，这次不是说谎” 
　　 
　　 
　　 
　　 
　　 
　　 
　　故事结尾，也成全了我们大多数人的心愿，看到了 樱木 和 流川枫的 联手。 
　　 
　　因为他们的联手最后才赢得胜利，完美绝杀山王。比分79-78 
　　 
　　黄金搭档诞生的时刻。 
　　 
　　 
　　 
　　 
　　 
　　 
　　 
　　故事结束了，我抑制不了我的情绪，写下此文.... 
     

]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>言语，对话，与PUA</title>
    <url>/2024/06/20/%E6%97%A5%E8%AE%B0/%E8%A8%80%E8%AF%AD_%E5%AF%B9%E8%AF%9D_%E4%B8%8EPUA/</url>
    <content><![CDATA[<h1 id="言语，对话，与PUA"><a href="#言语，对话，与PUA" class="headerlink" title="言语，对话，与PUA"></a>言语，对话，与PUA</h1> <span id="more"></span>

<blockquote>
<p>和“上级”对话很容易被PUA</p>
</blockquote>
<p>这里的上级是是广义的，比如长辈、教师、领导等等有某种观念或制度优势</p>
<p>和部分“上级”对话，他们会有如下类似言语：</p>
<ul>
<li>我比你懂XXX</li>
<li>你这个XXX是错的</li>
<li>你不行</li>
</ul>
<p>随着而来，会给你造成负面情绪和影响，包括:</p>
<ul>
<li>生气（感受到冒犯）</li>
<li>自我怀疑 （受挫感）</li>
<li>情绪反复 (遇到与之相关的事)</li>
</ul>
<h2 id="为什么会这样？"><a href="#为什么会这样？" class="headerlink" title="为什么会这样？"></a>为什么会这样？</h2><blockquote>
<p>强者不计较言语</p>
</blockquote>
<p>这很类似一种病毒，如果体弱，就会受到很大影响。</p>
<p>如果自己不在乎对方说的话，降低对方的重要性，自然不受影响</p>
<p>但是，对狭义上的上级，即直接与你利益相关的上级，其实很难做到强者思维。</p>
<h2 id="如何破局"><a href="#如何破局" class="headerlink" title="如何破局?"></a>如何破局?</h2><p>勇敢</p>
<blockquote>
<p>即 <strong>勇敢</strong> 地面对 <strong>真实</strong></p>
</blockquote>
<ul>
<li><p>首先是要承认对方是客观上级这个事实</p>
</li>
<li><p>在事实的基础上，明白任何”上级-下级”本质也是一种合作关系，存在：共赢，单赢，双输三种情况。</p>
</li>
<li><p>如果对方愿意“共赢”，那么可以适当让利，即不太计较小节得失，也可以实现正向的合作成长。</p>
</li>
<li><p>如果对方想“单赢”，即损人不利己，那么这就是冒犯</p>
</li>
<li><p>如果你能勇敢的拒绝和反击冒犯，就有希望让对方专向“共赢”，或最少不会“单输”的局面</p>
</li>
</ul>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫教程1 爬虫基础</title>
    <url>/2018/09/26/%E7%88%AC%E8%99%AB/1.%20%E7%88%AC%E8%99%AB%201/</url>
    <content><![CDATA[<blockquote>
<p>Python 简易爬虫</p>
</blockquote>
<span id="more"></span>


<h2 id="1-爬整个网页"><a href="#1-爬整个网页" class="headerlink" title="1.爬整个网页"></a>1.爬整个网页</h2><ul>
<li>一个网址字符串，ex：’<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a></li>
<li>向网站发出请求：把字符串传入request对象()</li>
<li>把请求返回的信息赋值到变量response</li>
<li>写入txt文件</li>
</ul>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">header= &#123;</span><br><span class="line">     &#x27;<span class="attribute">User-Agent&#x27;</span>: &#x27;Mozilla/5.0 (Windows NT 6.1; <span class="attribute">WOW64) AppleWebKit/537.36 (KHTML, like Gecko    ) Chrome/58.0.3029.96 Safari/537.36&#x27;</span></span><br><span class="line"><span class="attribute">&#125; </span></span><br><span class="line"><span class="attribute">#一个请求的头部，其中User-Agent用于描述浏览器类型</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">request = urllib.request.Request(&#x27;http</span>://www<span class="variable">.sina</span><span class="variable">.com</span>&#x27;,headers=header)</span><br><span class="line">#请求对象，请求某一网站的内容</span><br><span class="line"></span><br><span class="line">response1 = urllib<span class="variable">.request</span><span class="variable">.urlopen</span>(&#x27;http://www<span class="variable">.sina</span><span class="variable">.com</span>&#x27;)</span><br><span class="line">#某一网站的响应</span><br><span class="line">response2 = urllib<span class="variable">.request</span><span class="variable">.urlopen</span>(request)</span><br><span class="line">   </span><br><span class="line">html=response1<span class="variable">.read</span>()</span><br><span class="line">#读取响应信息的字节流</span><br><span class="line"></span><br><span class="line">f = open(&#x27;./4<span class="variable">.txt</span>&#x27;,&#x27;wb&#x27;)</span><br><span class="line">f<span class="variable">.write</span>(html)</span><br><span class="line">f<span class="variable">.close</span>()</span><br><span class="line">#将字节流写入到文件中</span><br></pre></td></tr></table></figure>

<h2 id="2-爬取豆瓣短评"><a href="#2-爬取豆瓣短评" class="headerlink" title="2.爬取豆瓣短评"></a>2.爬取豆瓣短评</h2><blockquote>
<p>load(url)函数,通过url传递网页爬取网页内容</p>
</blockquote>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> urllib.request</span><br><span class="line">def load(url):</span><br><span class="line">    <span class="attr">req</span> = urllib.request.Request(url)</span><br><span class="line">    <span class="comment">#豆瓣评论的网址</span></span><br><span class="line">    <span class="attr">res</span> = urllib.request.urlopen(req)</span><br><span class="line">    <span class="attr">html</span> = res.read()</span><br><span class="line">    return html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>write(html,txt)函数，将html内容存至txt文件中</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">def write(<span class="selector-tag">html</span>,t):</span><br><span class="line">    f = <span class="built_in">open</span>(t,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.<span class="built_in">write</span>(html)</span><br><span class="line">    f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>spider(url,begin,end)函数，爬取指定页数的评论</p>
</blockquote>
<p>其中<br><a href="https://movie.douban.com/subject/24773958/comments?start=0&amp;limit=20&amp;sort=new_score&amp;status=P&amp;percent_type=%E4%B8%BA%E7%9F%AD%E8%AF%84%E9%A6%96%E9%A1%B5">https://movie.douban.com/subject/24773958/comments?start=0&amp;limit=20&amp;sort=new_score&amp;status=P&amp;percent_type=为短评首页</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">def spider(url,<span class="keyword">begin</span>,<span class="keyword">end</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="keyword">begin</span>,<span class="keyword">end</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="number">20</span>*(i<span class="number">-1</span>)</span><br><span class="line">        the_url=<span class="string">&#x27;https://movie.douban.com/subject/24773958/comments?start=&#x27;</span>+str(i)+<span class="string">&#x27;&amp;limit=20&amp;sort=new_score&amp;status=P&amp;percent_type=&#x27;</span></span><br><span class="line">        html = <span class="keyword">load</span>(the_url)</span><br><span class="line">        t = str(i)+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">        <span class="keyword">write</span>(html,t)</span><br><span class="line">        print(<span class="string">&#x27;已保存第%d页&#x27;</span>%i)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>正则表达式爬取评论内容</p>
</blockquote>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;p <span class="attr">class=&quot;&quot;&gt;</span> </span><br><span class="line">结局简直丧出天际！灭霸竟然有内心戏！</span><br><span class="line">全程下来美队和钢铁侠也没见上一面，</span><br><span class="line">我还以为在世界末日前必然要重修旧好了！</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#正则表达式为</span></span><br><span class="line">&#x27;&lt;p <span class="attr">class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写load()</span></span><br><span class="line"><span class="built_in">import</span> urllib.request</span><br><span class="line"><span class="built_in">import</span> re</span><br><span class="line">def load(url):</span><br><span class="line">    <span class="attr">req</span> = urllib.request.Request(url)</span><br><span class="line">    <span class="comment">#豆瓣评论的网址</span></span><br><span class="line">    <span class="attr">res</span> = urllib.request.urlopen(req)</span><br><span class="line">    <span class="attr">html</span> = res.read() <span class="comment">#二进制文件</span></span><br><span class="line">    <span class="attr">html</span> = html.decode(&#x27;utf-<span class="number">8</span>&#x27;) <span class="comment">#解码,该方法返回解码后的字符串。 </span></span><br><span class="line">    <span class="attr">pattern</span> = re.compile(&#x27;&lt;p <span class="attr">class=&quot;&quot;&gt;(.*?)&lt;/div&gt;&#x27;)</span></span><br><span class="line">    <span class="attr">list</span> = pattern.findall(html)</span><br><span class="line">    return list</span><br></pre></td></tr></table></figure>


<blockquote>
<p>命令行操作</p>
</blockquote>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#有中文输出输入时需加下行的编码</span></span><br><span class="line"><span class="meta"># -*- coding: utf<span class="number">-8</span> -*-</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="keyword">input</span>(<span class="string">&#x27;请输入网址:&#x27;</span>)</span><br><span class="line">    begin = <span class="keyword">int</span>(<span class="keyword">input</span>(<span class="string">&#x27;请输入起始页:&#x27;</span>))</span><br><span class="line">    <span class="keyword">end</span> = <span class="keyword">int</span>(<span class="keyword">input</span>(<span class="string">&#x27;请输入终止页:&#x27;</span>))</span><br><span class="line">    spider(url,begin,<span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫教程2 框架爬虫</title>
    <url>/2018/09/26/%E7%88%AC%E8%99%AB/2.%E7%88%AC%E8%99%AB2/</url>
    <content><![CDATA[<blockquote>
<p>Python 简易爬虫</p>
</blockquote>
<span id="more"></span>

<h1 id="1-Scrapy框架"><a href="#1-Scrapy框架" class="headerlink" title="1 Scrapy框架"></a>1 Scrapy框架</h1><h2 id="1-1-框架介绍"><a href="#1-1-框架介绍" class="headerlink" title="1.1 框架介绍"></a>1.1 框架介绍</h2><blockquote>
<p>通过ORM，把爬取的数据对应到python的对象中，完成数据的爬取。</p>
</blockquote>
<h2 id="1-2-基本操作"><a href="#1-2-基本操作" class="headerlink" title="1.2 基本操作"></a>1.2 基本操作</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">可能安装的依赖包</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;pip install wheel</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;<span class="built_in">cd</span> c:/</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;pip install Twi+(tab)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;pip install scrapy</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">创建项目</span></span><br><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;&gt;scrapy startproject aSpider</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-1-项目的目录结构"><a href="#1-2-1-项目的目录结构" class="headerlink" title="1.2.1 项目的目录结构"></a>1.2.1 项目的目录结构</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">aSpider</span><br><span class="line">    ---</span><br><span class="line">        aSpider</span><br><span class="line">            ---</span><br><span class="line">                __init__<span class="selector-class">.py</span>	</span><br><span class="line">                __pycache__</span><br><span class="line">                middlewares<span class="selector-class">.py</span>	</span><br><span class="line">                settings<span class="selector-class">.py</span>	</span><br><span class="line">                spiders       #用于实现爬虫的文件</span><br><span class="line">                __init__<span class="selector-class">.pyc</span>	</span><br><span class="line">                items<span class="selector-class">.py</span>      #用于写类(class)实现ORM的文件</span><br><span class="line">                pipelines<span class="selector-class">.py</span>	</span><br><span class="line">                settings<span class="selector-class">.pyc</span>                </span><br><span class="line">        scrapy<span class="selector-class">.cfg</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="1-3-Xpath"><a href="#1-3-Xpath" class="headerlink" title="1.3 Xpath"></a>1.3 Xpath</h2><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。</p>
<p>XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 都构建于 XPath 表达之上。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/html/</span>head<span class="regexp">/title/</span>text()</span><br><span class="line"><span class="comment">#选择HTML文档&lt;head&gt;元素下面的&lt;title&gt;标签内的文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>td:</span><br><span class="line"><span class="comment">#选择所有的td元素</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>div[@class=<span class="string">&quot;mine&quot;</span>]</span><br><span class="line"><span class="comment">#选择所有包含class=&quot;mine&quot;属性的div标签元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>xpath():返回selectors,每一个select表示一个xpath参数表达式选择的节点</li>
<li>css():返回selectors，每一个select表示一个css参数表达式选择的节点</li>
<li>extract():返回一个unicode字符串，内容为xpath选中的内容</li>
<li>re()：返回一个unicode字符串，内容为正则表达式的内容</li>
</ul>
<h2 id="1-4-spider"><a href="#1-4-spider" class="headerlink" title="1.4 spider"></a>1.4 spider</h2><p>存于项目的spiders文件夹下,itcast_spider.py中</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">class aSpider(scrapy.spiders.Spider):</span><br><span class="line">    <span class="attribute">name</span>=<span class="string">&quot;itcast&quot;</span></span><br><span class="line">    allowd_domains = [<span class="string">&quot;http://www.itcast.cn&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;http://www.itcast.cn/channel/teacher.shtml#ac&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    def parse(self,response):</span><br><span class="line">        <span class="keyword">for</span> site <span class="keyword">in</span> response.xpath(<span class="string">&#x27;//div[@class=&quot;li_txt&quot;]&#x27;</span>):</span><br><span class="line">            teacher_name = site.xpath(<span class="string">&#x27;h3/text()&#x27;</span>).extract()</span><br><span class="line">            teacher_level = site.xpath(<span class="string">&#x27;h4/text()&#x27;</span>).extract()</span><br><span class="line">            teacher_info = site.xpath(<span class="string">&#x27;p/text()&#x27;</span>).extract()</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span> teacher_name[0]</span><br><span class="line">            <span class="built_in">print</span> teacher_level[0]</span><br><span class="line">            <span class="built_in">print</span> teacher_info[0]</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;=============&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-items-py"><a href="#1-5-items-py" class="headerlink" title="1.5 items.py"></a>1.5 items.py</h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> aSpiderItem(<span class="title">scrapy</span>.<span class="type">Item</span>):</span></span><br><span class="line"><span class="class">    # define the fields for your item here like:</span></span><br><span class="line"><span class="class">    # name = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">      pass</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ItcastItem</span>(<span class="title">scrapy</span>.<span class="type">Item</span>):</span></span><br><span class="line"><span class="class">      name = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">      level = scrapy.<span class="type">Field</span>()</span></span><br><span class="line"><span class="class">      info = scrapy.<span class="type">Field</span>()</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-改写spider"><a href="#1-6-改写spider" class="headerlink" title="1.6 改写spider"></a>1.6 改写spider</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"><span class="built_in">from</span> aSpider.<span class="keyword">items</span> import ItcastItem</span><br><span class="line"></span><br><span class="line">class aSpider(scrapy.spiders.Spider):</span><br><span class="line">    name=<span class="string">&quot;itcast&quot;</span></span><br><span class="line">    allowd_domains = [<span class="string">&quot;http://www.itcast.cn&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;http://www.itcast.cn/channel/teacher.shtml#ac&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">items</span> = []</span><br><span class="line">    </span><br><span class="line">    def parse(self,response):</span><br><span class="line">        <span class="keyword">for</span> site <span class="keyword">in</span> response.xpath(<span class="string">&#x27;//div[@class=&quot;li_txt&quot;]&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            teacher_name = site.xpath(<span class="string">&#x27;h3/text()&#x27;</span>).extract()</span><br><span class="line">            teacher_level = site.xpath(<span class="string">&#x27;h4/text()&#x27;</span>).extract()</span><br><span class="line">            teacher_info = site.xpath(<span class="string">&#x27;p/text()&#x27;</span>).extract()</span><br><span class="line">            </span><br><span class="line">            print teacher_name[<span class="number">0</span>]</span><br><span class="line">            print teacher_level[<span class="number">0</span>]</span><br><span class="line">            print teacher_info[<span class="number">0</span>]</span><br><span class="line">            print <span class="string">&quot;=============&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">item</span> = ItcastItem()</span><br><span class="line">            <span class="comment">#一个对象数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">item</span>[<span class="string">&#x27;name&#x27;</span>]=teacher_name[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">item</span>[<span class="string">&#x27;level&#x27;</span>]=teacher_level[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">item</span>[<span class="string">&#x27;info&#x27;</span>]=teacher_info[<span class="number">0</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">items</span>.append(<span class="keyword">item</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="literal">return</span> <span class="keyword">items</span></span><br></pre></td></tr></table></figure>


<h2 id="1-7-爬取内容"><a href="#1-7-爬取内容" class="headerlink" title="1.7 爬取内容"></a>1.7 爬取内容</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取内容</span></span><br><span class="line">&gt;&gt;&gt;python3 -m <span class="keyword">scrapy </span>crawl itcast</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取内容至json中</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">scrapy </span>crawl itcast  -o itcast_teacher.<span class="keyword">json </span>-t <span class="keyword">json</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树&amp;相关算法</title>
    <url>/2017/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<p>python实战基础《数据结构和算法》</p>
<span id="more"></span>

<h1 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h1><ul>
<li>定义类</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,left=None,right=Node,data=<span class="number">0</span>)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.left=left</span><br><span class="line">        <span class="keyword">self</span>.right=right</span><br><span class="line">        <span class="keyword">self</span>.data=data</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,root=<span class="number">0</span>)</span></span>:</span><br><span class="line">        <span class="keyword">self</span>.root=root</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<ul>
<li>生产一个二叉树</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="attr">n1=</span><span class="keyword">Node</span><span class="title">(data</span>=<span class="number">1</span>)</span><br><span class="line"><span class="attr">n2=</span><span class="keyword">Node</span><span class="title">(n1</span>,None,<span class="number">2</span>) //左儿子n1，右没有儿子n2</span><br><span class="line"><span class="attr">n3=</span><span class="keyword">Node</span><span class="title">(data</span>=<span class="number">3</span>)</span><br><span class="line"><span class="attr">n4=</span><span class="keyword">Node</span><span class="title">(data</span>=<span class="number">4</span>)</span><br><span class="line"><span class="attr">n5=</span><span class="keyword">Node</span><span class="title">(n3</span>,n4,<span class="number">5</span>)</span><br><span class="line"><span class="attr">n6=</span><span class="keyword">Node</span><span class="title">(n2</span>,n5,<span class="number">6</span>)</span><br><span class="line"><span class="attr">n7=</span><span class="keyword">Node</span><span class="title">(n6</span>,None,<span class="number">7</span>)</span><br><span class="line"><span class="attr">n8=</span><span class="keyword">Node</span><span class="title">(data</span>=<span class="number">8</span>)</span><br><span class="line"><span class="attr">root=</span><span class="keyword">Node</span><span class="title">(n7</span>,n8,&#x27;root&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="attr">bt=</span>Tree(root)</span><br></pre></td></tr></table></figure>
<ul>
<li>生成二叉树</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BTree</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root=<span class="number">0</span></span>):</span><br><span class="line">        self.root = root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self</span>):</span><br><span class="line">        temp = <span class="built_in">input</span>(<span class="string">&#x27;enter a value:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> temp <span class="keyword">is</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        treenode = Node(data=temp)</span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.root = treenode</span><br><span class="line"></span><br><span class="line">        treenode.left = self.create()</span><br><span class="line">        treenode.right = self.create()</span><br></pre></td></tr></table></figure>

<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><ul>
<li>前序遍历（根-左-右）<br>a.递归<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def pre<span class="constructor">_order(<span class="params">tree</span>)</span>:</span><br><span class="line">    <span class="keyword">if</span> tree==None:</span><br><span class="line">        return <span class="number">0</span></span><br><span class="line">    print(tree.data)</span><br><span class="line">    pre<span class="constructor">_order(<span class="params">tree</span>.<span class="params">left</span>)</span></span><br><span class="line">    pre<span class="constructor">_order(<span class="params">tree</span>.<span class="params">right</span>）</span></span><br></pre></td></tr></table></figure>
b.用栈</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">def front_stack(tree):</span><br><span class="line">       <span class="string">&quot;&quot;</span><span class="string">&quot;利用堆栈实现树的先序遍历&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">       if tree == None:</span><br><span class="line">           return</span><br><span class="line">       myStack = []</span><br><span class="line">       <span class="keyword">node</span> <span class="title">= tree</span></span><br><span class="line">       while <span class="keyword">node</span> <span class="title">or</span> myStack:</span><br><span class="line">           while <span class="keyword">node</span><span class="title">:                     #从根节点开始，一直找它的左子树</span></span><br><span class="line"><span class="title">               pre</span>(node.<span class="keyword">date</span>),</span><br><span class="line">               myStack.append(<span class="keyword">node</span><span class="title">)</span></span><br><span class="line"><span class="title">               node</span> = node.lchild</span><br><span class="line">           <span class="keyword">node</span> <span class="title">= myStack</span>.pop()            <span class="comment">#while结束表示当前节点node为空，即前一个节点没有左子树了</span></span><br><span class="line">           <span class="keyword">node</span> <span class="title">= node</span>.rchild  </span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>一.分冶算法</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/1%E5%88%86%E5%86%B6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>
<h1 id="一-分冶算法"><a href="#一-分冶算法" class="headerlink" title="一.分冶算法"></a>一.分冶算法</h1><h2 id="1-算法本质"><a href="#1-算法本质" class="headerlink" title="1.算法本质"></a>1.算法本质</h2><ul>
<li>一个问题规模为N的问题可以分解为k个规模较小的问题，这些子问题<strong>相互独立</strong>且与<strong>原问题性质</strong>相同，求出子问题的解可以得到原问题的解。</li>
</ul>
<h2 id="2-算法步骤"><a href="#2-算法步骤" class="headerlink" title="2.算法步骤"></a>2.算法步骤</h2><ul>
<li>分解</li>
<li>求解（子问题比原问题易求）</li>
<li>合并</li>
</ul>
<h3 id="2-1-伪代码"><a href="#2-1-伪代码" class="headerlink" title="2.1 伪代码"></a>2.1 伪代码</h3><ul>
<li>伪代码</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">分治法的伪代码：</span><br><span class="line"></span><br><span class="line">  v divide<span class="emphasis">_and_</span>conquer(proplem p)</span><br><span class="line">  &#123;//n为问题规模</span><br><span class="line"></span><br><span class="line"><span class="code">      if(|p|&lt;n0)//n0为一阈值</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">      solve(p);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       else</span></span><br><span class="line"><span class="code">       &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">           divide p into smaller subproblem P1,P2,...Pk;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">           for(i=1;i&lt;=k;i++)</span></span><br><span class="line"><span class="code">           &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">               yi=divide_and_conquer(Pi);</span></span><br><span class="line"><span class="code">               #可能用到递归</span></span><br><span class="line"><span class="code">               return merge(y1,y2,...,yk);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">           &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-例题-python"><a href="#3-例题-python" class="headerlink" title="3.例题(python)"></a>3.例题(python)</h2><h3 id="3-1求众数-一个数组中重复最多的数"><a href="#3-1求众数-一个数组中重复最多的数" class="headerlink" title="3.1求众数(一个数组中重复最多的数)"></a>3.1求众数(一个数组中重复最多的数)</h3><ul>
<li>思想</li>
</ul>
<p>（1）快速排序</p>
<p>（2）求中位数,及其重数(重复数)</p>
<p>（3）计算出中位数的最左端和最右端的位置(如果有重复)，然后分割成2段数组</p>
<p>（4）中位数个数与左端数组个数比较，中&lt;左  即最大众数可能存在左端，将左端再进行2段分割（递归）直到 中 &gt; 左为止</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">def mode(l,r) <span class="comment">#l,r两个参数分别代表数组两端，a是数组</span></span><br><span class="line">    med = <span class="built_in">median</span>(<span class="keyword">a</span>,l,r)<span class="comment"> //寻找中位数</span></span><br><span class="line">    <span class="built_in">split</span> = (<span class="keyword">a</span>,med,l,r,l1,r1<span class="comment">)//分割数组</span></span><br><span class="line">    <span class="keyword">if</span> largest&lt;(r1-l1+<span class="number">1</span>):</span><br><span class="line">        largest=r1-l1+<span class="number">1</span></span><br><span class="line">        <span class="keyword">element</span>=med<span class="comment">;//element是众数</span></span><br><span class="line">    <span class="keyword">if</span>(l1<span class="number">-1</span>&gt;largest):</span><br><span class="line">        mode(<span class="number">1</span>,l1<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span>(r-r1&gt;largest):</span><br><span class="line">        mode(r1+<span class="number">1</span>,r)</span><br></pre></td></tr></table></figure>


<h3 id="3-2-合并排序"><a href="#3-2-合并排序" class="headerlink" title="3.2 合并排序"></a>3.2 合并排序</h3><ul>
<li>基本思想:<br>将一组数分为两组数，分别对两组数进行排序，将合并好的子集合合并到排好序的集合中</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">void <span class="constructor">MergeSort(Type <span class="params">a</span>[],<span class="params">int</span> <span class="params">left</span>,<span class="params">int</span> <span class="params">right</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> i = (left + right)/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="constructor">MergeSort(<span class="params">a</span>,<span class="params">left</span>,<span class="params">i</span>)</span></span><br><span class="line">    <span class="constructor">MergeSort(<span class="params">a</span>,<span class="params">i</span>+1,<span class="params">right</span>)</span></span><br><span class="line">    <span class="constructor">Merge(<span class="params">a</span>,<span class="params">b</span>,<span class="params">left</span>,<span class="params">i</span>,<span class="params">right</span>)</span><span class="comment">//合并数组到b</span></span><br><span class="line">    <span class="constructor">Copy(<span class="params">a</span>,<span class="params">b</span>,<span class="params">left</span>,<span class="params">right</span>)</span><span class="comment">//复制回数组a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-快速排序"><a href="#3-3-快速排序" class="headerlink" title="3.3 快速排序"></a>3.3 快速排序</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def <span class="constructor">Qsort(<span class="params">a</span>,<span class="params">left</span>,<span class="params">right</span>)</span>:</span><br><span class="line">    l = left</span><br><span class="line">    r = right</span><br><span class="line">    key = a<span class="literal">[<span class="number">0</span>]</span></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r):</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r<span class="operator"> &amp;&amp; </span>a<span class="literal">[<span class="identifier">r</span>]</span>&gt;=key):</span><br><span class="line">            r = r-<span class="number">1</span></span><br><span class="line">        a<span class="literal">[<span class="identifier">l</span>]</span> = a<span class="literal">[<span class="identifier">r</span>]</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r<span class="operator"> &amp;&amp; </span>a<span class="literal">[<span class="identifier">l</span>]</span>&lt;=key):</span><br><span class="line">            l = l+<span class="number">1</span></span><br><span class="line">        a<span class="literal">[<span class="identifier">r</span>]</span> = a<span class="literal">[<span class="identifier">l</span>]</span></span><br><span class="line">    a<span class="literal">[<span class="number">0</span>]</span>= key</span><br><span class="line">    <span class="constructor">Qsort(<span class="params">a</span>,<span class="params">left</span>,<span class="params">l</span>-1)</span></span><br><span class="line">    <span class="constructor">Qsort(<span class="params">a</span>,<span class="params">l</span>+1,<span class="params">right</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="constructor">Qsort(<span class="params">a</span>,0,<span class="params">len</span>(<span class="params">a</span>-1)</span>)</span><br></pre></td></tr></table></figure>


<h3 id="3-4-重复元素排列问题"><a href="#3-4-重复元素排列问题" class="headerlink" title="3.4 重复元素排列问题"></a>3.4 重复元素排列问题</h3><ul>
<li><p>思想</p>
<p>n个元素的全排列减小的n-1个元素的全排列，直至减小的1个元素的排列，就不需要排列</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>分治法所能解决的问题一般具有以下几个特征：</p>
<ol>
<li><p>该问题的规模缩小到一定的程度就可以容易地解决</p>
</li>
<li><p>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p>
</li>
<li><p>利用该问题分解出的子问题的解可以合并为该问题的解；</p>
</li>
<li><p>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p>
</li>
</ol>
<p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p>
<p>第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；</p>
<p>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。</p>
<p>第四条特征涉及到分治法的效率，如果各子问题是<strong>不独立</strong>的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。</p>
<p><a href="http://blog.jobbole.com/83944/">http://blog.jobbole.com/83944/</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二.动态规划</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>
<h1 id="二-动态规划"><a href="#二-动态规划" class="headerlink" title="二.动态规划"></a>二.动态规划</h1><h2 id="1-算法本质"><a href="#1-算法本质" class="headerlink" title="1.算法本质"></a>1.算法本质</h2><ul>
<li>状态</li>
</ul>
<p>一个方程，用于表述问题的(1-n)通向公式，可以是求解过程中一个开始或一个结果</p>
<ul>
<li>状态转移方程</li>
</ul>
<p>状态与状态的关系公式，就是转移方程,比如状态k和状态k-1</p>
<h2 id="2-解题步骤"><a href="#2-解题步骤" class="headerlink" title="2.解题步骤"></a>2.解题步骤</h2><ul>
<li>二维数组填表</li>
</ul>
<p>状态与状态的转移用一张二维表来表述，通过双重循环来逐渐把二维表填满，表每一行是一个状态，下一行是转移到另一个状态，最终填满二维表</p>
<h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3.例题"></a>3.例题</h2><h3 id="3-1-0-1背包问题"><a href="#3-1-0-1背包问题" class="headerlink" title="3.1 0-1背包问题"></a>3.1 0-1背包问题</h3><ul>
<li>问题描述</li>
</ul>
<p>有N件物品和一个容量为&#x3D;&#x3D;v&#x3D;&#x3D;的背包。第i件物品的重量是&#x3D;&#x3D;c[i]&#x3D;&#x3D;(每一件物品只有一件，可以选择装或者不装，也就是问题0-1的意思)，价值是&#x3D;&#x3D;w[i]&#x3D;&#x3D;。求解将哪些物品装入背包可使价值总和最大。</p>
<ul>
<li>状态</li>
</ul>
<p><strong>即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。</strong></p>
<ul>
<li>转移方程</li>
</ul>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">f<span class="comment">[i]</span><span class="comment">[v]</span>=max&#123;f<span class="comment">[i-1]</span><span class="comment">[v]</span>,f<span class="comment">[i-1]</span><span class="comment">[v-c<span class="comment">[i]</span>]</span>+w<span class="comment">[i]</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪代码</li>
</ul>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">#c<span class="comment">[i]</span>=cost<span class="comment">[i]</span>,w<span class="comment">[i]</span>=weight<span class="comment">[i]</span></span><br><span class="line">for i=1..N</span><br><span class="line"></span><br><span class="line">    for v=V..0</span><br><span class="line"></span><br><span class="line">        f<span class="comment">[v]</span>=max&#123;f<span class="comment">[v]</span>,f<span class="comment">[v-c<span class="comment">[i]</span>]</span>+w<span class="comment">[i]</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-TSP问题"><a href="#3-2-TSP问题" class="headerlink" title="3.2 TSP问题"></a>3.2 TSP问题</h3><ul>
<li>问题描述</li>
</ul>
<p>Travelling Salesman Problem (TSP) 是最基本的路线问题。它寻求的是旅行者由起点出发，通过所有给定的需求点后，再次返回起点所花费的最小路径成本</p>
<ul>
<li>状态</li>
</ul>
<p>d(i,v)表示从顶点i出发，经过v中所有结点一次后的最小花费</p>
<ul>
<li>转移方程</li>
</ul>
<p><code>$d(i,v)=min_&#123;i\epsilon&#123;v&#125;&#125;\&#123;d(k,v)+c_&#123;ki&#125;\&#125;$</code></p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">for(<span class="name">int</span> j=1<span class="comment">;j&lt;1&lt;&lt;(n-1);j++)&#123;</span></span><br><span class="line">            for(<span class="name">int</span> i=1<span class="comment">;i&lt;n;i++)&#123;    //j用二进制表示的城市集合</span></span><br><span class="line">                    if(((<span class="number">1</span>&lt;&lt;(<span class="name">i-1</span>))<span class="symbol">&amp;j</span>)==0)&#123;         //i不在j表示的城市集合中</span><br><span class="line"></span><br><span class="line">                        minDis=60000<span class="comment">;</span></span><br><span class="line">                        for(<span class="name">int</span> k=1<span class="comment">;k&lt;n;k++)&#123;</span></span><br><span class="line">                        if(((<span class="number">1</span>&lt;&lt;(<span class="name">k-1</span>))<span class="symbol">&amp;j</span>)!=0)  &#123;//k表示的城市在j表示的城市集合中</span><br><span class="line"></span><br><span class="line">                        temp=dis[i][k]+d[k][j-(<span class="number">1</span>&lt;&lt;(<span class="name">k-1</span>))]<span class="comment">;</span></span><br><span class="line">                        if(<span class="name">temp&lt;minDis</span>)&#123;</span><br><span class="line">                            minDis=temp<span class="comment">;   //所有k中最小的距离</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    d[i][j]=minDis<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。</p>
<ul>
<li>动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</li>
<li>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是<strong>互相独立</strong>的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。</li>
<li>如果我们能够<strong>保存已解决的子问题的答案</strong>，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，<strong>就将其结果填入表中</strong>。这就是动态规划法的基本思路。具体的动态规划算法多种多样，但它们具有相同的填表格式。</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>三.贪心算法</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/3%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>


<h2 id="1-算法本质"><a href="#1-算法本质" class="headerlink" title="1.算法本质"></a>1.算法本质</h2><ul>
<li>在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</li>
<li>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</li>
</ul>
<h2 id="2-解题步骤"><a href="#2-解题步骤" class="headerlink" title="2.解题步骤"></a>2.解题步骤</h2><p>类似一个一维数组遍历，每一步遍历都能获得局部最优解，每一次只考虑选取一个数据，它满足当时局部最优解。</p>
<ul>
<li>伪代码<blockquote>
<p>一般是一个双重循环，第一重循环是总循环，第二重循环是每次循环求局部最优解</p>
</blockquote>
<h2 id="3-例题"><a href="#3-例题" class="headerlink" title="3.例题"></a>3.例题</h2></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>贪心算法</li>
</ul>
<p>贪心算法的本质：从问题的某一个初始解出发，向给定的目标推进。推进的每一步做一个当时看似最佳的贪心选择。不断的将问题规模缩小。并由所有的局部最优选择产生一个全局最优解</p>
<ol>
<li>删数问题</li>
</ol>
<p>从键盘输入一个高精度正整数N(N不超过200位），任意去掉S个数字，把剩下的数字组合成一个新的正整数，次序不变且剩下的数字组成的新数最小。<br>输入：N（≤200位），S（1≤S≤10）<br>例如：</p>
<p>输入</p>
<p>51428397</p>
<p>5</p>
<p>输出</p>
<p>123</p>
<ul>
<li>代码(python)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行输入输出</span></span><br><span class="line"><span class="comment"># 删数问题</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入一个整数&quot;</span>)</span><br><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输入删除的位数&quot;</span>)</span><br><span class="line">b = <span class="built_in">input</span>()</span><br><span class="line">b = <span class="built_in">int</span>(b)</span><br><span class="line">n = <span class="built_in">len</span>(a)    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    x=<span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">if</span> (j+<span class="number">1</span>)&lt;x:</span><br><span class="line">            <span class="keyword">if</span> a[j] &gt; a[j+<span class="number">1</span>]:</span><br><span class="line">                a = a[:j]+a[j+<span class="number">1</span>:]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">             a = a[:j]</span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>首先：N超过200位，肯定要用字符串数组来进行存储。我们知道字符串数组隐含的’\0’作为结束符。当然，我们也可以用strlen()函数来直接计算字符串长度。</p>
<p>第二步，如何删除数字。假定只删除一个数字。如果数字从左到右为顺序增大，显然删除最后一个可以。如果不是顺序增加的。删除递减区间的第一个就行了。这样循环删除s个数字即可完成。</p>
<p>还要注意一点的是，每删除一个数字，就要从这个数组的第一个单元开始重新判断。所以，用当型循环比较合适。每判断到一个可以删除的数，就结束判断。</p>
<p><a href="https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741375.html">https://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741375.html</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>五.分支限界</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/5%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>
<h1 id="五-回溯算法"><a href="#五-回溯算法" class="headerlink" title="五.回溯算法"></a>五.回溯算法</h1><h2 id="1-算法本质"><a href="#1-算法本质" class="headerlink" title="1.算法本质"></a>1.算法本质</h2><ul>
<li><p>求解目标：回溯法的求解目标是找出解空间树中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出在某种意义下的最优解。 </p>
</li>
<li><p>求解思路:在分支限界法中，每一个活结点只有一次机会成为扩展结点。活结点一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子结点中，导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被加入活结点表中。<br> 此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所需的解或活结点表为空时为止</p>
</li>
</ul>
<h2 id="2-算法步骤"><a href="#2-算法步骤" class="headerlink" title="2.算法步骤"></a>2.算法步骤</h2><blockquote>
<p>利用一个队列，进行对树或图的广度优先遍历</p>
</blockquote>
<ul>
<li>伪代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q = queue()</span><br><span class="line">q.put(s) <span class="comment"># 插入原点</span></span><br><span class="line">v[s][s] = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">while</span> true:</span><br><span class="line">        i=q.get() </span><br><span class="line">        <span class="keyword">if</span> !q.empty() :</span><br><span class="line">            j=q.pull() <span class="comment">#出队</span></span><br><span class="line">            v[s][j]=v[s][j-<span class="number">1</span>]+s.value()</span><br><span class="line">            <span class="keyword">if</span> i != x:</span><br><span class="line">                <span class="keyword">while</span> s.<span class="built_in">next</span>():</span><br><span class="line">                    q.put(s.<span class="built_in">next</span>()) <span class="comment">#入队</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">f(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(v[s][x]))     </span><br><span class="line">    </span><br></pre></td></tr></table></figure>


<h2 id="3-典型应用"><a href="#3-典型应用" class="headerlink" title="3.典型应用"></a>3.典型应用</h2><h3 id="3-1-单源最短路径"><a href="#3-1-单源最短路径" class="headerlink" title="3.1 单源最短路径"></a>3.1 单源最短路径</h3><h3 id="3-2-TSP问题"><a href="#3-2-TSP问题" class="headerlink" title="3.2 TSP问题"></a>3.2 TSP问题</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>四.回溯算法</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/4%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>
<h1 id="四-回溯算法"><a href="#四-回溯算法" class="headerlink" title="四.回溯算法"></a>四.回溯算法</h1><h2 id="1-算法本质"><a href="#1-算法本质" class="headerlink" title="1.算法本质"></a>1.算法本质</h2><ul>
<li>解决多选择问题</li>
<li>选择时判断，符合条件继续，不符合条件返回</li>
<li>把问题的解空间转化成了图(深度优先)或者树(左右根)的结构表示。</li>
</ul>
<h2 id="2-算法步骤"><a href="#2-算法步骤" class="headerlink" title="2.算法步骤"></a>2.算法步骤</h2><h3 id="2-1-算法基本的步骤思想为："><a href="#2-1-算法基本的步骤思想为：" class="headerlink" title="2.1 算法基本的步骤思想为："></a>2.1 算法基本的步骤思想为：</h3><ul>
<li>在搜索过程中动态产生问题的解空间</li>
<li>只保存从根结点到当前扩张结点的路径</li>
<li>深度优先方式搜索解空间，能找出满足约束条件的所有解</li>
</ul>
<h3 id="2-2-伪代码"><a href="#2-2-伪代码" class="headerlink" title="2.2 伪代码:"></a>2.2 伪代码:</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">def Backtrack(<span class="built_in">t</span>)</span><br><span class="line">    <span class="built_in">if</span> <span class="built_in">t</span>&gt;<span class="built_in">n</span> <span class="symbol">:</span></span><br><span class="line">        output(x) #记录可行解</span><br><span class="line">    el<span class="symbol">se:</span></span><br><span class="line">        for i in ResultTree</span><br><span class="line">            X[<span class="built_in">t</span>] = h(i) # h(i)表示当前结点处的第i个可选值</span><br><span class="line">            <span class="built_in">if</span> constraint(<span class="built_in">t</span>)&amp;&amp;bount(<span class="built_in">t</span>) #解空间的约束函数和限界函数</span><br><span class="line">                Backtrack(<span class="built_in">t</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<h2 id="3-回溯算法应用"><a href="#3-回溯算法应用" class="headerlink" title="3.回溯算法应用"></a>3.回溯算法应用</h2><h3 id="3-1-八皇后问题"><a href="#3-1-八皇后问题" class="headerlink" title="3.1 八皇后问题"></a>3.1 八皇后问题</h3><blockquote>
<p>八皇后问题是一个以国际象棋为背景的问题：如何能够在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后？</p>
</blockquote>
<p>为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为n×n，而皇后个数也变成n。当且仅当 n &#x3D; 1 或 n ≥ 4 时问题有解</p>
<ul>
<li>Input<blockquote>
<p>无输入</p>
</blockquote>
</li>
<li>Output<blockquote>
<p>多种</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">No</span>. <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">No</span>. <span class="number">2</span></span><br><span class="line"><span class="attribute">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">No</span>. <span class="number">3</span></span><br><span class="line"><span class="attribute">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="attribute">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li>求解思路</li>
</ul>
<p>观察棋盘坐标</p>
<blockquote>
<p>同一斜线上的“&#x2F;”上的坐标点，横纵坐标之和相同</p>
</blockquote>
<blockquote>
<p>同一斜线上的“\”上的坐标点，横纵坐标之差相同</p>
</blockquote>
<ul>
<li>基本步骤</li>
</ul>
<ol>
<li>判断皇后冲突</li>
<li>递归得到结果</li>
<li>输出所有结果</li>
</ol>
<ul>
<li>代码</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># state是一个元组，存放每行的坐标,从首行开始</span></span><br><span class="line"><span class="comment"># pos是当前行不与之前皇后冲突的位置</span></span><br><span class="line">&gt;&gt;&gt; def confict(<span class="keyword">state</span>, pos):</span><br><span class="line">    nextY = len(<span class="keyword">state</span>)</span><br><span class="line">    if pos <span class="keyword">in</span> <span class="keyword">state</span>: return True</span><br><span class="line">    &#x27;&#x27;&#x27;判断斜线&#x27;&#x27;&#x27;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nextY):</span><br><span class="line">        if nextY-pos == i-state[i]: return True</span><br><span class="line">        if nextY+pos == i+<span class="keyword">state</span>[i]: return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def queens(num, <span class="keyword">state</span>=()):</span><br><span class="line">        if num-<span class="number">1</span> == len(<span class="keyword">state</span>): <span class="comment">#若当前是最后一次选择</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">            <span class="comment">#遍历选择的所有值，此次选择不与前值冲突，以元祖形式返回该值</span></span><br><span class="line">                if not confict(<span class="keyword">state</span>, i):</span><br><span class="line">                    yield (i,)</span><br><span class="line">        else:</span><br><span class="line">            <span class="keyword">for</span> pos <span class="keyword">in</span> range(num):</span><br><span class="line">            <span class="comment">#当前不是最后一次选择：</span></span><br><span class="line">            <span class="comment">#遍历所有取值，若不与之前的选择序列冲突，</span></span><br><span class="line">            <span class="comment">#“返回”当前选择取该值的基础上，接来的选择结果。</span></span><br><span class="line">                if not confict(<span class="keyword">state</span>, pos):</span><br><span class="line">                    <span class="keyword">for</span> result <span class="keyword">in</span> queens(num, <span class="keyword">state</span>+(pos,)):</span><br><span class="line">                        yield (pos,) + result</span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> list(queens(<span class="number">8</span>)):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>

<h3 id="3-2-数独问题"><a href="#3-2-数独问题" class="headerlink" title="3.2 数独问题"></a>3.2 数独问题</h3><h3 id="3-3-集合问题"><a href="#3-3-集合问题" class="headerlink" title="3.3 集合问题"></a>3.3 集合问题</h3><h3 id="3-4-图着色问题"><a href="#3-4-图着色问题" class="headerlink" title="3.4 图着色问题"></a>3.4 图着色问题</h3>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>0.算法分类</title>
    <url>/2018/06/06/%E7%AE%97%E6%B3%95/p%20np%20npc/</url>
    <content><![CDATA[<blockquote>
<p>原创 进阶算法概述</p>
</blockquote>
<span id="more"></span>
<h1 id="算法分类-多项式分类"><a href="#算法分类-多项式分类" class="headerlink" title="算法分类(多项式分类)"></a>算法分类(多项式分类)</h1><h2 id="P问题"><a href="#P问题" class="headerlink" title="P问题"></a>P问题</h2><ul>
<li>如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。</li>
<li>P是英文单词多项式的第一个字母。</li>
</ul>
<h2 id="NP问题"><a href="#NP问题" class="headerlink" title="NP问题"></a>NP问题</h2><ul>
<li><p>NP问题不是非P类问题。NP问题是指可以在多项式的时间里验证一个解的问题。</p>
</li>
<li><p>NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。</p>
</li>
<li><p>NP问题一直都是信息学的巅峰。巅峰，意即很引人注目但难以解决。在信息学研究中，这是一个耗费了很多时间和精力也没有解决的终极问<br>题，好比物理学中的大统一和数学中的歌德巴赫猜想等。</p>
</li>
<li><p>目前为止这个问题还“啃不动”。但是，一个总的趋势、一个大方向是有的。人们普遍认为，P&#x3D;NP不成立，也就是说，多数人相信，存在至少一个不可能有多项式级复杂度的算法的NP问题。人们如此坚信P≠NP是有原因的，就是在研究NP问题的过程中找出了一类非常特殊的NP问题叫做NP-完全问题，也即所谓的 NPC问题。C是英文单词“完全”的第一个字母。正是NPC问题的存在，使人们相信P≠NP。</p>
</li>
</ul>
<h2 id="NP-hard"><a href="#NP-hard" class="headerlink" title="NP-hard"></a>NP-hard</h2><ul>
<li>P!&#x3D;NP时，NP-hard属于比NP难的问题,只可以用一定运算（时间大于等于多项式运算时间）解决该问题，无法找到多项式的算法。</li>
<li>P&#x3D;NP时，NP&#x3D;NP-hard</li>
</ul>
<h2 id="NPC问题"><a href="#NPC问题" class="headerlink" title="NPC问题"></a>NPC问题</h2><ul>
<li>约化(Reducibility，有的资料上叫“归约”)</li>
</ul>
<p>: 一个问题A可以约化为问题B的含义即是，可以用问题B的解法解决问题A</p>
<p>参见《算法导论》：一元二次方程解一元一次方程的例子</p>
<ul>
<li>一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了。</li>
<li>通过对某些问题的不断约化，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。</li>
<li>再回想前面讲的P和NP问题，根据约化的传递性，如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后能找到一个时间复杂度最高，并且能“通吃”所有的NP问题的这样一个超级NP问题，就是NPC问题。</li>
<li>只要解决了这个NPC问题，那么所有的NP问题都解决了。这种问题不只一个，它有很多个，它是一类问题。这一类问题就是传说中的NPC问题，也就是NP-完全问题。</li>
<li>NPC问题：<br>a.它得是一个NP问题；<br>b.所有的NP问题都可以约化到它。</li>
</ul>
<p>（证明一个问题是 NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它</p>
<h2 id="常见NPC问题"><a href="#常见NPC问题" class="headerlink" title="常见NPC问题"></a>常见NPC问题</h2><h3 id="SAT问题"><a href="#SAT问题" class="headerlink" title="SAT问题"></a>SAT问题</h3><h3 id="0-1整数规划"><a href="#0-1整数规划" class="headerlink" title="0-1整数规划"></a>0-1整数规划</h3><h3 id="最大团ClIQUE"><a href="#最大团ClIQUE" class="headerlink" title="最大团ClIQUE"></a>最大团ClIQUE</h3><h3 id="顶点覆盖问题"><a href="#顶点覆盖问题" class="headerlink" title="顶点覆盖问题"></a>顶点覆盖问题</h3><h3 id="子集合问题"><a href="#子集合问题" class="headerlink" title="子集合问题"></a>子集合问题</h3><h3 id="哈密顿回路问题"><a href="#哈密顿回路问题" class="headerlink" title="哈密顿回路问题"></a>哈密顿回路问题</h3><h3 id="TSP问题"><a href="#TSP问题" class="headerlink" title="TSP问题"></a>TSP问题</h3><p><a href="http://www.matrix67.com/blog/archives/105">http://www.matrix67.com/blog/archives/105</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>DCGAN的PyTorch实现</title>
    <url>/2019/11/08/AI/GAN/DCGAN/</url>
    <content><![CDATA[<h1 id="DCGAN"><a href="#DCGAN" class="headerlink" title="DCGAN"></a>DCGAN</h1><span id="more"></span>

<h2 id="1-什么是GAN"><a href="#1-什么是GAN" class="headerlink" title="1.什么是GAN"></a>1.什么是GAN</h2><p>GAN是一个框架，让深度模型可以学习到数据的分布，从而通过数据的分布生成新的数据(服从同一分布)。</p>
<p>其由一个判别器和一个生成器构成，生成器负责生成“仿造数据”，判别器负责判断“仿造数据”的质量。两者一起进化，导致造假货和识别假货的两个模型G&#x2F;D都能有超强的造假和识别假货的能力。</p>
<p>最终训练达到类似纳什均衡的平衡状态，就是分辨器已经分辨不出真假，其分别真假的成功率只有50%(和瞎猜没有区别)。</p>
<p>假设原数据分布为x(可以是一张真实图片等多维数据)，判别器D(),随机变量Z，生成器为G()。D(x)生成一个标量代表x来自真实分布的概率。Z是一个随机噪声，G(Z)代表随机噪声Z(也称为隐空间向量)到真实分布P_data的映射。G(Z)的生成数据的概率分布记作P_G.</p>
<p>所以D(G(z))就是一个标量代表其生成图片是真实图片的概率<br>,同时D和G在玩一个你最小(G)我最大(D)的游戏。D想把自己分别真假图片x的成功率最大化</p>
<blockquote>
<p>logD(x)</p>
</blockquote>
<p>G想把造假图片z和真实图片x的差距最小化</p>
<blockquote>
<p>log(1-D(G(x))。</p>
</blockquote>
<p>总目标函数(loss function)可以写成:</p>
<p><img src="https://s2.ax1x.com/2019/11/08/MZOG6J.jpg" alt="image"></p>
<h2 id="2-什么是DCGAN"><a href="#2-什么是DCGAN" class="headerlink" title="2.什么是DCGAN"></a>2.什么是DCGAN</h2><p>DCGAN是GAN的一个扩展，卷积网络做判别器，反卷积做生成器。</p>
<p>判别器通过大幅步的卷积网络、批量正则化、LeakyRelu激活函数构成。输入一个3*64 *64的图片，输出一个真假概率值。</p>
<p>生成器由一个反卷积网络、批量正则化、Relu激活函数构成，通过输入一个隐变量z(如标准正态分布)。同时输出一个3*64 *64的图片。</p>
<p>同时《 Unsupervised Representation Learning With Deep Convolutional Generative Adversarial Networks》的原作者还给出如何设置优化器(optimizers)，如何计算损失函数，如何初始化模型weights等技巧。</p>
<p>初始导入代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="comment">#%matplotlib inline</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.parallel</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> dset</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.utils <span class="keyword">as</span> vutils</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.animation <span class="keyword">as</span> animation</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> HTML</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set random seed for reproducibility</span></span><br><span class="line">manualSeed = <span class="number">999</span></span><br><span class="line"><span class="comment">#manualSeed = random.randint(1, 10000) # use if you want new results</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Random Seed: &quot;</span>, manualSeed)</span><br><span class="line">random.seed(manualSeed)</span><br><span class="line">torch.manual_seed(manualSeed)</span><br></pre></td></tr></table></figure>


<h2 id="3-输入设置"><a href="#3-输入设置" class="headerlink" title="3.输入设置"></a>3.输入设置</h2><p>输入参数设置</p>
<ul>
<li>dataroot - the path to the root of the dataset folder. We will talk more about the dataset in the next section</li>
<li>workers - the number of worker threads for loading the data with the DataLoader</li>
<li>batch_size - the batch size used in training. The DCGAN paper uses a batch size of 128</li>
<li>image_size - the spatial size of the images used for training. This implementation defaults to 64x64. If another size is desired, the structures of D and G must be changed.</li>
<li>nc - number of color channels in the input images. For color images this is 3</li>
<li>nz - length of latent vector</li>
<li>ngf - relates to the depth of feature maps carried through the generator</li>
<li>ndf - sets the depth of feature maps propagated through the discriminator</li>
<li>num_epochs - number of training epochs to run. Training for longer will probably lead to better results but will also take much longer</li>
<li>lr - learning rate for training. As described in the DCGAN paper, this number should be 0.0002</li>
<li>beta1 - beta1 hyperparameter for Adam optimizers. As described in paper, this number should be 0.5</li>
<li>ngpu - number of GPUs available. If this is 0, code will run in CPU mode. If this number is greater than 0 it will run on that number of GPUs</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Root directory for dataset</span></span><br><span class="line">dataroot = <span class="string">&quot;data/celeba&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of workers for dataloader</span></span><br><span class="line">workers = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch size during training</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spatial size of training images. All images will be resized to this</span></span><br><span class="line"><span class="comment">#   size using a transformer.</span></span><br><span class="line">image_size = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of channels in the training images. For color images this is 3</span></span><br><span class="line">nc = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Size of z latent vector (i.e. size of generator input)</span></span><br><span class="line">nz = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Size of feature maps in generator</span></span><br><span class="line">ngf = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Size of feature maps in discriminator</span></span><br><span class="line">ndf = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of training epochs</span></span><br><span class="line">num_epochs = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Learning rate for optimizers</span></span><br><span class="line">lr = <span class="number">0.0002</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Beta1 hyperparam for Adam optimizers</span></span><br><span class="line">beta1 = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of GPUs available. Use 0 for CPU mode.</span></span><br><span class="line">ngpu = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="4-数据"><a href="#4-数据" class="headerlink" title="4.数据"></a>4.数据</h2><p>数据集用的是港中文的<a href="http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html">Celeb-A</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can use an image folder dataset the way we have it setup.</span></span><br><span class="line"><span class="comment"># Create the dataset</span></span><br><span class="line">dataset = dset.ImageFolder(root=dataroot,</span><br><span class="line">                           transform=transforms.Compose([</span><br><span class="line">                               transforms.Resize(image_size),</span><br><span class="line">                               transforms.CenterCrop(image_size),</span><br><span class="line">                               transforms.ToTensor(),</span><br><span class="line">                               transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">                           ]))</span><br><span class="line"><span class="comment"># Create the dataloader</span></span><br><span class="line">dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,</span><br><span class="line">                                         shuffle=<span class="literal">True</span>, num_workers=workers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decide which device we want to run on</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> (torch.cuda.is_available() <span class="keyword">and</span> ngpu &gt; <span class="number">0</span>) <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot some training images</span></span><br><span class="line">real_batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line"><span class="comment">#real_batch是一个列表</span></span><br><span class="line"><span class="comment">#第一个元素real_batch[0]是[128,3,64,64]的tensor，就是标准的一个batch的4D结构：128张图，3个通道，64长，64宽</span></span><br><span class="line"><span class="comment">#第二个元素real_batch[1]是第一个元素的标签，有128个label值全为0</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Training Images&quot;</span>)</span><br><span class="line">plt.imshow(np.transpose(vutils.make_grid(real_batch[<span class="number">0</span>].to(device)[:<span class="number">64</span>], padding=<span class="number">2</span>, normalize=<span class="literal">True</span>).cpu(),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这个函数能让图片显示</span></span><br><span class="line"><span class="comment">#plt.show() </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/11/08/MZOOA0.jpg" alt="image"></p>
<h2 id="5-实现-Implementation"><a href="#5-实现-Implementation" class="headerlink" title="5.实现(Implementation)"></a>5.实现(Implementation)</h2><h3 id="5-1-参数初始化-Weight-Initialization"><a href="#5-1-参数初始化-Weight-Initialization" class="headerlink" title="5.1 参数初始化(Weight Initialization)"></a>5.1 参数初始化(Weight Initialization)</h3><p>w初始化为均值为0，标准差为0.02的正态分布</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># custom weights initialization called on netG and netD</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weights_init</span>(<span class="params">m</span>):</span><br><span class="line">    classname = m.__class__.__name__</span><br><span class="line">    <span class="keyword">if</span> classname.find(<span class="string">&#x27;Conv&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">        nn.init.normal_(m.weight.data, <span class="number">0.0</span>, <span class="number">0.02</span>)</span><br><span class="line">    <span class="keyword">elif</span> classname.find(<span class="string">&#x27;BatchNorm&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">        nn.init.normal_(m.weight.data, <span class="number">1.0</span>, <span class="number">0.02</span>)</span><br><span class="line">        nn.init.constant_(m.bias.data, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<h3 id="5-2-生成器-Generator"><a href="#5-2-生成器-Generator" class="headerlink" title="5.2 生成器(Generator)"></a>5.2 生成器(Generator)</h3><p><img src="https://s2.ax1x.com/2019/11/09/Mekfqf.jpg" alt="image"></p>
<p>生成器G是构造一个由向量Z(隐空间)到真实数据空间的映射(map)</p>
<ul>
<li><p>nz&#x3D;100,z输入时的长度</p>
</li>
<li><p>nc&#x3D;3,输出时的chanel，彩色是RGB三通道</p>
</li>
<li><p>ngf&#x3D;64,指的是生成的特征为64*64</p>
</li>
<li><p>反卷积的函数为:</p>
<blockquote>
<p>ConvTranspose2d(in_channels, out_channels, kernel_size, stride&#x3D;1, padding&#x3D;0, output_padding&#x3D;0, groups&#x3D;1, bias&#x3D;True, dilation&#x3D;1)</p>
</blockquote>
</li>
</ul>
<p>参数为:1.输入、2.输出、3.核函数、4.卷积核步数、5.输入边填充、6.输出边填充、7.group、8.偏置、9.膨胀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Generator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ngpu</span>):</span><br><span class="line">        <span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line">        self.ngpu = ngpu</span><br><span class="line">        self.main = nn.Sequential(</span><br><span class="line">            <span class="comment"># input is Z, going into a convolution</span></span><br><span class="line">            nn.ConvTranspose2d( nz, ngf * <span class="number">8</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            <span class="comment">#输入100，输出64*8,核函数是4*4</span></span><br><span class="line">            </span><br><span class="line">            nn.BatchNorm2d(ngf * <span class="number">8</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># state size. (ngf*8) x 4 x 4</span></span><br><span class="line">            nn.ConvTranspose2d(ngf * <span class="number">8</span>, ngf * <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ngf * <span class="number">4</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># state size. (ngf*4) x 8 x 8</span></span><br><span class="line">            nn.ConvTranspose2d( ngf * <span class="number">4</span>, ngf * <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ngf * <span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># state size. (ngf*2) x 16 x 16</span></span><br><span class="line">            nn.ConvTranspose2d( ngf * <span class="number">2</span>, ngf, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ngf),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># state size. (ngf) x 32 x 32</span></span><br><span class="line">            nn.ConvTranspose2d( ngf, nc, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Tanh()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># state size. (nc) x 64 x 64</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.main(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>实例化生成器，初始化参数w</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create the generator</span></span><br><span class="line">netG = Generator(ngpu).to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Handle multi-gpu if desired</span></span><br><span class="line"><span class="keyword">if</span> (device.<span class="built_in">type</span> == <span class="string">&#x27;cuda&#x27;</span>) <span class="keyword">and</span> (ngpu &gt; <span class="number">1</span>):</span><br><span class="line">    netG = nn.DataParallel(netG, <span class="built_in">list</span>(<span class="built_in">range</span>(ngpu)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the weights_init function to randomly initialize all weights</span></span><br><span class="line"><span class="comment">#  to mean=0, stdev=0.2.</span></span><br><span class="line">netG.apply(weights_init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the model</span></span><br><span class="line"><span class="built_in">print</span>(netG)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Generator(</span><br><span class="line">  (main): Sequential(</span><br><span class="line">    (<span class="number">0</span>): ConvTranspose2d(<span class="number">100</span>, <span class="number">512</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">1</span>): BatchNorm2d(<span class="number">512</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">3</span>): ConvTranspose2d(<span class="number">512</span>, <span class="number">256</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">4</span>): BatchNorm2d(<span class="number">256</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">5</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">6</span>): ConvTranspose2d(<span class="number">256</span>, <span class="number">128</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">7</span>): BatchNorm2d(<span class="number">128</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">8</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">9</span>): ConvTranspose2d(<span class="number">128</span>, <span class="number">64</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">10</span>): BatchNorm2d(<span class="number">64</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">11</span>): ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">12</span>): ConvTranspose2d(<span class="number">64</span>, <span class="number">3</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">13</span>): Tanh()</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-3-判别器-Discriminator"><a href="#5-3-判别器-Discriminator" class="headerlink" title="5.3 判别器(Discriminator)"></a>5.3 判别器(Discriminator)</h3><p>判别器D是一个二元分类器，判别输入的图片真假。通过输入图片进入一连串的卷积层中，经过卷积(Strided Convolution)、批量正则(BatchNorm)、LeakyReLu激活，最终通过Sigmoid激活函数输出一个概率选择。</p>
<p>以上的结构如有必要可以扩展更多的层，不过DCGAN的设计者通过实验发现调整步幅的卷积层比池化的下采样效果要好，因为通过卷积网络可以学习到自己的池化函数。同时批量正则化和leakly relu函数都可以提高梯度下降的质量，这些效果在同时训练G和D时显得更为突出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Discriminator</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ngpu</span>):</span><br><span class="line">        <span class="built_in">super</span>(Discriminator, self).__init__()</span><br><span class="line">        self.ngpu = ngpu</span><br><span class="line">        self.main = nn.Sequential(</span><br><span class="line">            <span class="comment"># input is (nc) x 64 x 64</span></span><br><span class="line">            nn.Conv2d(nc, ndf, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># state size. (ndf) x 32 x 32</span></span><br><span class="line">            nn.Conv2d(ndf, ndf * <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ndf * <span class="number">2</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># state size. (ndf*2) x 16 x 16</span></span><br><span class="line">            nn.Conv2d(ndf * <span class="number">2</span>, ndf * <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ndf * <span class="number">4</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># state size. (ndf*4) x 8 x 8</span></span><br><span class="line">            nn.Conv2d(ndf * <span class="number">4</span>, ndf * <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.BatchNorm2d(ndf * <span class="number">8</span>),</span><br><span class="line">            nn.LeakyReLU(<span class="number">0.2</span>, inplace=<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># state size. (ndf*8) x 4 x 4</span></span><br><span class="line">            nn.Conv2d(ndf * <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, bias=<span class="literal">False</span>),</span><br><span class="line">            nn.Sigmoid()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="keyword">return</span> self.main(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>构建D，并初始化w方程，并且输出模型的结构。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create the Discriminator</span></span><br><span class="line">netD = Discriminator(ngpu).to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Handle multi-gpu if desired</span></span><br><span class="line"><span class="keyword">if</span> (device.<span class="built_in">type</span> == <span class="string">&#x27;cuda&#x27;</span>) <span class="keyword">and</span> (ngpu &gt; <span class="number">1</span>):</span><br><span class="line">    netD = nn.DataParallel(netD, <span class="built_in">list</span>(<span class="built_in">range</span>(ngpu)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the weights_init function to randomly initialize all weights</span></span><br><span class="line"><span class="comment">#  to mean=0, stdev=0.2.</span></span><br><span class="line">netD.apply(weights_init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the model</span></span><br><span class="line"><span class="built_in">print</span>(netD)</span><br></pre></td></tr></table></figure>

<p>out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Discriminator(</span><br><span class="line">  (main): Sequential(</span><br><span class="line">    (<span class="number">0</span>): Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">1</span>): LeakyReLU(negative_slope=<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">2</span>): Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">3</span>): BatchNorm2d(<span class="number">128</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">4</span>): LeakyReLU(negative_slope=<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">5</span>): Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">6</span>): BatchNorm2d(<span class="number">256</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">7</span>): LeakyReLU(negative_slope=<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">8</span>): Conv2d(<span class="number">256</span>, <span class="number">512</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">2</span>, <span class="number">2</span>), padding=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">9</span>): BatchNorm2d(<span class="number">512</span>, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, track_running_stats=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">10</span>): LeakyReLU(negative_slope=<span class="number">0.2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    (<span class="number">11</span>): Conv2d(<span class="number">512</span>, <span class="number">1</span>, kernel_size=(<span class="number">4</span>, <span class="number">4</span>), stride=(<span class="number">1</span>, <span class="number">1</span>), bias=<span class="literal">False</span>)</span><br><span class="line">    (<span class="number">12</span>): Sigmoid()</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="5-4-损失函数-amp-优化器-loss-amp-optimizer"><a href="#5-4-损失函数-amp-优化器-loss-amp-optimizer" class="headerlink" title="5.4 损失函数&amp;优化器(loss&amp;optimizer)"></a>5.4 损失函数&amp;优化器(loss&amp;optimizer)</h3><p>用Pytorch自带的损失函数Binary Corss Entropy(BCELoss),其定义如下：</p>
<p><img src="https://s2.ax1x.com/2019/11/08/MZXiH1.jpg" alt="image"></p>
<p>我们定义真图片real为1，假图片fake为0。同时设置两个优化器optimizer。在本例中<br>都是adam优化器，其学习率是0.0002且Beta1&#x3D;0.5。为了保持生成学习的过程，我们从一个高斯分布中生成一个修正的批量数据。同时在训练过程中，我们定期放入修正的噪音给生成器G以提高拟合能力。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Initialize BCELoss function</span></span><br><span class="line">criterion = nn.BCELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create batch of latent vectors that we will use to visualize</span></span><br><span class="line"><span class="comment">#  the progression of the generator</span></span><br><span class="line">fixed_noise = torch.randn(<span class="number">64</span>, nz, <span class="number">1</span>, <span class="number">1</span>, device=device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Establish convention for real and fake labels during training</span></span><br><span class="line">real_label = <span class="number">1</span></span><br><span class="line">fake_label = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup Adam optimizers for both G and D</span></span><br><span class="line">optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, <span class="number">0.999</span>))</span><br><span class="line">optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, <span class="number">0.999</span>))</span><br></pre></td></tr></table></figure>


<h3 id="5-5-训练"><a href="#5-5-训练" class="headerlink" title="5.5 训练"></a>5.5 训练</h3><p>训练GAN是一种艺术，用不好超参数容易造成模式崩溃。我们通过D建立不同批次图片的真假差异，以及构建生成G函数以最大化logD(G(z))。</p>
<h4 id="5-5-1-判别器D"><a href="#5-5-1-判别器D" class="headerlink" title="5.5.1 判别器D"></a>5.5.1 判别器D</h4><p>训练判别器D的目的是让D能最大化识别真假图片的概率，通过随机梯度上升(ascending its stochastic gradient SGD)更新判别器。在实践中就是最大化log(D(x))+log(1-D(G(z)))。</p>
<p>以上步骤分为两步实现，第一步是从训练数据集中拿出一批真实图片作为样本，通过模型D，计算其loss即损失函数log(D(x))，然后再通过反向传播计算梯度更新损失函数。</p>
<p>第二步是通过生成器建立一批假样本，也通过D进行前向传播得到另一半loss值。即损失函数log(1-D（G(z))的值，同时也通过反向传播更新loss，通过1个batches的迭代更新，我们称为一次D的优化(optimizer)</p>
<h4 id="5-5-2-生成器G"><a href="#5-5-2-生成器G" class="headerlink" title="5.5.2 生成器G"></a>5.5.2 生成器G</h4><p>在GAN原始版本中G的实现是通过最小化log(1-D(G(z)))以增加更好的造假能力。值得注意的是原始版本并没有提供足够的梯度更新策略，特别在早期的训练学习过程中。作为修正，我们用最大化log(D(G(z)))来替代原先的策略。其中关键名词如下:</p>
<ul>
<li>Loss_D <blockquote>
<p>计算所以批次的真假图片的判别函数，即loss&#x3D; log(D(x))+log(D(G(Z))</p>
</blockquote>
</li>
<li>Loss_G <blockquote>
<p>生成图片的损失函数即log(D(G(z)))</p>
</blockquote>
</li>
<li>D(x) <blockquote>
<p>输出真样本批次的为真概率，从一开始的1到理论上的拟合至0.5（即G训练好的时候）</p>
</blockquote>
</li>
<li>D(G(z)) <blockquote>
<p>判别输出生成图片为真的概率，从一开始的0到理论上拟合至0.5(同为G训练好的时候)</p>
</blockquote>
</li>
</ul>
<p>训练时间和训练整体样本的次数(epoch)，和样本的大小有关,代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Training Loop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists to keep track of progress</span></span><br><span class="line">img_list = []</span><br><span class="line">G_losses = []</span><br><span class="line">D_losses = []</span><br><span class="line">iters = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Starting Training Loop...&quot;</span>)</span><br><span class="line"><span class="comment"># For each epoch</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="comment"># For each batch in the dataloader</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader, <span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment">############################</span></span><br><span class="line">        <span class="comment"># (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))</span></span><br><span class="line">        <span class="comment">###########################</span></span><br><span class="line">        <span class="comment">## Train with all-real batch</span></span><br><span class="line">        netD.zero_grad()</span><br><span class="line">        <span class="comment"># Format batch</span></span><br><span class="line">        real_cpu = data[<span class="number">0</span>].to(device)</span><br><span class="line">        b_size = real_cpu.size(<span class="number">0</span>)</span><br><span class="line">        label = torch.full((b_size,), real_label, device=device)</span><br><span class="line">        <span class="comment"># Forward pass real batch through D</span></span><br><span class="line">        output = netD(real_cpu).view(-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Calculate loss on all-real batch</span></span><br><span class="line">        errD_real = criterion(output, label)</span><br><span class="line">        <span class="comment"># Calculate gradients for D in backward pass</span></span><br><span class="line">        errD_real.backward()</span><br><span class="line">        D_x = output.mean().item()</span><br><span class="line"></span><br><span class="line">        <span class="comment">## Train with all-fake batch</span></span><br><span class="line">        <span class="comment"># Generate batch of latent vectors</span></span><br><span class="line">        noise = torch.randn(b_size, nz, <span class="number">1</span>, <span class="number">1</span>, device=device)</span><br><span class="line">        <span class="comment"># Generate fake image batch with G</span></span><br><span class="line">        fake = netG(noise)</span><br><span class="line">        label.fill_(fake_label)</span><br><span class="line">        <span class="comment"># Classify all fake batch with D</span></span><br><span class="line">        output = netD(fake.detach()).view(-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Calculate D&#x27;s loss on the all-fake batch</span></span><br><span class="line">        errD_fake = criterion(output, label)</span><br><span class="line">        <span class="comment"># Calculate the gradients for this batch</span></span><br><span class="line">        errD_fake.backward()</span><br><span class="line">        D_G_z1 = output.mean().item()</span><br><span class="line">        <span class="comment"># Add the gradients from the all-real and all-fake batches</span></span><br><span class="line">        errD = errD_real + errD_fake</span><br><span class="line">        <span class="comment"># Update D</span></span><br><span class="line">        optimizerD.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment">############################</span></span><br><span class="line">        <span class="comment"># (2) Update G network: maximize log(D(G(z)))</span></span><br><span class="line">        <span class="comment">###########################</span></span><br><span class="line">        netG.zero_grad()</span><br><span class="line">        label.fill_(real_label)  <span class="comment"># fake labels are real for generator cost</span></span><br><span class="line">        <span class="comment"># Since we just updated D, perform another forward pass of all-fake batch through D</span></span><br><span class="line">        output = netD(fake).view(-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># Calculate G&#x27;s loss based on this output</span></span><br><span class="line">        errG = criterion(output, label)</span><br><span class="line">        <span class="comment"># Calculate gradients for G</span></span><br><span class="line">        errG.backward()</span><br><span class="line">        D_G_z2 = output.mean().item()</span><br><span class="line">        <span class="comment"># Update G</span></span><br><span class="line">        optimizerG.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Output training stats</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f&#x27;</span></span><br><span class="line">                  % (epoch, num_epochs, i, <span class="built_in">len</span>(dataloader),</span><br><span class="line">                     errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Save Losses for plotting later</span></span><br><span class="line">        G_losses.append(errG.item())</span><br><span class="line">        D_losses.append(errD.item())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check how the generator is doing by saving G&#x27;s output on fixed_noise</span></span><br><span class="line">        <span class="keyword">if</span> (iters % <span class="number">500</span> == <span class="number">0</span>) <span class="keyword">or</span> ((epoch == num_epochs-<span class="number">1</span>) <span class="keyword">and</span> (i == <span class="built_in">len</span>(dataloader)-<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                fake = netG(fixed_noise).detach().cpu()</span><br><span class="line">            img_list.append(vutils.make_grid(fake, padding=<span class="number">2</span>, normalize=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        iters += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Starting Training Loop...</span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">0</span>/<span class="number">1583</span>]   Loss_D: <span class="number">2.0937</span>  Loss_G: <span class="number">5.2060</span>  D(x): <span class="number">0.5704</span>    D(G(z)): <span class="number">0.6680</span> / <span class="number">0.0090</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">50</span>/<span class="number">1583</span>]  Loss_D: <span class="number">0.1916</span>  Loss_G: <span class="number">9.5846</span>  D(x): <span class="number">0.9472</span>    D(G(z)): <span class="number">0.0364</span> / <span class="number">0.0002</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">100</span>/<span class="number">1583</span>] Loss_D: <span class="number">4.0207</span>  Loss_G: <span class="number">21.2494</span> D(x): <span class="number">0.2445</span>    D(G(z)): <span class="number">0.0000</span> / <span class="number">0.0000</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">150</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5569</span>  Loss_G: <span class="number">3.1977</span>  D(x): <span class="number">0.7294</span>    D(G(z)): <span class="number">0.0974</span> / <span class="number">0.0609</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">200</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.2320</span>  Loss_G: <span class="number">3.3187</span>  D(x): <span class="number">0.9009</span>    D(G(z)): <span class="number">0.0805</span> / <span class="number">0.0659</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">250</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7203</span>  Loss_G: <span class="number">5.9229</span>  D(x): <span class="number">0.8500</span>    D(G(z)): <span class="number">0.3485</span> / <span class="number">0.0062</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">300</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6775</span>  Loss_G: <span class="number">4.0545</span>  D(x): <span class="number">0.8330</span>    D(G(z)): <span class="number">0.3379</span> / <span class="number">0.0353</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">350</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7549</span>  Loss_G: <span class="number">5.9064</span>  D(x): <span class="number">0.9227</span>    D(G(z)): <span class="number">0.4109</span> / <span class="number">0.0084</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">400</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.0655</span>  Loss_G: <span class="number">2.5097</span>  D(x): <span class="number">0.4933</span>    D(G(z)): <span class="number">0.0269</span> / <span class="number">0.1286</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">450</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6321</span>  Loss_G: <span class="number">2.7811</span>  D(x): <span class="number">0.6453</span>    D(G(z)): <span class="number">0.0610</span> / <span class="number">0.1026</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">500</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5064</span>  Loss_G: <span class="number">4.1399</span>  D(x): <span class="number">0.9475</span>    D(G(z)): <span class="number">0.3009</span> / <span class="number">0.0350</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">550</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.3838</span>  Loss_G: <span class="number">4.0321</span>  D(x): <span class="number">0.8221</span>    D(G(z)): <span class="number">0.1218</span> / <span class="number">0.0331</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">600</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5549</span>  Loss_G: <span class="number">4.6055</span>  D(x): <span class="number">0.8230</span>    D(G(z)): <span class="number">0.2049</span> / <span class="number">0.0171</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">650</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.2821</span>  Loss_G: <span class="number">6.8137</span>  D(x): <span class="number">0.8276</span>    D(G(z)): <span class="number">0.0164</span> / <span class="number">0.0027</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">700</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6422</span>  Loss_G: <span class="number">5.0119</span>  D(x): <span class="number">0.8267</span>    D(G(z)): <span class="number">0.2827</span> / <span class="number">0.0146</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">750</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4332</span>  Loss_G: <span class="number">4.3659</span>  D(x): <span class="number">0.9239</span>    D(G(z)): <span class="number">0.2307</span> / <span class="number">0.0291</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">800</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5344</span>  Loss_G: <span class="number">3.4145</span>  D(x): <span class="number">0.7208</span>    D(G(z)): <span class="number">0.0891</span> / <span class="number">0.0744</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">850</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8094</span>  Loss_G: <span class="number">2.9318</span>  D(x): <span class="number">0.5903</span>    D(G(z)): <span class="number">0.0602</span> / <span class="number">0.0979</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">900</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.1598</span>  Loss_G: <span class="number">6.4141</span>  D(x): <span class="number">0.9228</span>    D(G(z)): <span class="number">0.0630</span> / <span class="number">0.0046</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">950</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5083</span>  Loss_G: <span class="number">5.5467</span>  D(x): <span class="number">0.9226</span>    D(G(z)): <span class="number">0.2916</span> / <span class="number">0.0112</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1000</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6738</span>  Loss_G: <span class="number">3.9958</span>  D(x): <span class="number">0.7622</span>    D(G(z)): <span class="number">0.2480</span> / <span class="number">0.0410</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1050</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.2155</span>  Loss_G: <span class="number">3.8838</span>  D(x): <span class="number">0.9092</span>    D(G(z)): <span class="number">0.0819</span> / <span class="number">0.0432</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1100</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.1708</span>  Loss_G: <span class="number">1.9610</span>  D(x): <span class="number">0.4709</span>    D(G(z)): <span class="number">0.0064</span> / <span class="number">0.2448</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1150</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7506</span>  Loss_G: <span class="number">6.9292</span>  D(x): <span class="number">0.8797</span>    D(G(z)): <span class="number">0.3728</span> / <span class="number">0.0019</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1200</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.2133</span>  Loss_G: <span class="number">5.5082</span>  D(x): <span class="number">0.9436</span>    D(G(z)): <span class="number">0.1272</span> / <span class="number">0.0102</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1250</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5156</span>  Loss_G: <span class="number">3.8660</span>  D(x): <span class="number">0.8073</span>    D(G(z)): <span class="number">0.1993</span> / <span class="number">0.0357</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1300</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.4848</span>  Loss_G: <span class="number">5.0770</span>  D(x): <span class="number">0.9170</span>    D(G(z)): <span class="number">0.2847</span> / <span class="number">0.0109</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1350</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6596</span>  Loss_G: <span class="number">4.7626</span>  D(x): <span class="number">0.8414</span>    D(G(z)): <span class="number">0.3232</span> / <span class="number">0.0145</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1400</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.2799</span>  Loss_G: <span class="number">5.1604</span>  D(x): <span class="number">0.9154</span>    D(G(z)): <span class="number">0.1494</span> / <span class="number">0.0156</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1450</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.4756</span>  Loss_G: <span class="number">2.9344</span>  D(x): <span class="number">0.8164</span>    D(G(z)): <span class="number">0.1785</span> / <span class="number">0.0955</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1500</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.3904</span>  Loss_G: <span class="number">2.3755</span>  D(x): <span class="number">0.7652</span>    D(G(z)): <span class="number">0.0587</span> / <span class="number">0.1328</span></span><br><span class="line">[<span class="number">0</span>/<span class="number">5</span>][<span class="number">1550</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.2817</span>  Loss_G: <span class="number">1.2689</span>  D(x): <span class="number">0.3769</span>    D(G(z)): <span class="number">0.0221</span> / <span class="number">0.3693</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">0</span>/<span class="number">1583</span>]   Loss_D: <span class="number">0.5365</span>  Loss_G: <span class="number">3.0092</span>  D(x): <span class="number">0.7437</span>    D(G(z)): <span class="number">0.1574</span> / <span class="number">0.0836</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">50</span>/<span class="number">1583</span>]  Loss_D: <span class="number">0.4959</span>  Loss_G: <span class="number">5.4086</span>  D(x): <span class="number">0.9422</span>    D(G(z)): <span class="number">0.2960</span> / <span class="number">0.0086</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">100</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.2685</span>  Loss_G: <span class="number">3.6553</span>  D(x): <span class="number">0.8455</span>    D(G(z)): <span class="number">0.0640</span> / <span class="number">0.0457</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">150</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6243</span>  Loss_G: <span class="number">4.6128</span>  D(x): <span class="number">0.8467</span>    D(G(z)): <span class="number">0.2878</span> / <span class="number">0.0203</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">200</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4369</span>  Loss_G: <span class="number">2.8268</span>  D(x): <span class="number">0.7591</span>    D(G(z)): <span class="number">0.0871</span> / <span class="number">0.0871</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">250</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4244</span>  Loss_G: <span class="number">3.7669</span>  D(x): <span class="number">0.8641</span>    D(G(z)): <span class="number">0.1952</span> / <span class="number">0.0369</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">300</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7487</span>  Loss_G: <span class="number">2.5417</span>  D(x): <span class="number">0.6388</span>    D(G(z)): <span class="number">0.0948</span> / <span class="number">0.1263</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">350</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5359</span>  Loss_G: <span class="number">2.9435</span>  D(x): <span class="number">0.6996</span>    D(G(z)): <span class="number">0.0836</span> / <span class="number">0.0864</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">400</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.3469</span>  Loss_G: <span class="number">2.7581</span>  D(x): <span class="number">0.8046</span>    D(G(z)): <span class="number">0.0755</span> / <span class="number">0.1036</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">450</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5065</span>  Loss_G: <span class="number">2.8547</span>  D(x): <span class="number">0.7491</span>    D(G(z)): <span class="number">0.1494</span> / <span class="number">0.0879</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">500</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.3959</span>  Loss_G: <span class="number">3.3236</span>  D(x): <span class="number">0.8292</span>    D(G(z)): <span class="number">0.1328</span> / <span class="number">0.0554</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">550</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6679</span>  Loss_G: <span class="number">5.8782</span>  D(x): <span class="number">0.9178</span>    D(G(z)): <span class="number">0.3802</span> / <span class="number">0.0075</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">600</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8844</span>  Loss_G: <span class="number">1.9449</span>  D(x): <span class="number">0.5367</span>    D(G(z)): <span class="number">0.0326</span> / <span class="number">0.1984</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">650</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8474</span>  Loss_G: <span class="number">2.0978</span>  D(x): <span class="number">0.6395</span>    D(G(z)): <span class="number">0.1883</span> / <span class="number">0.1803</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">700</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4682</span>  Loss_G: <span class="number">5.1056</span>  D(x): <span class="number">0.8963</span>    D(G(z)): <span class="number">0.2520</span> / <span class="number">0.0137</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">750</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4315</span>  Loss_G: <span class="number">4.0099</span>  D(x): <span class="number">0.8957</span>    D(G(z)): <span class="number">0.2441</span> / <span class="number">0.0304</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">800</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4492</span>  Loss_G: <span class="number">4.1587</span>  D(x): <span class="number">0.9090</span>    D(G(z)): <span class="number">0.2656</span> / <span class="number">0.0231</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">850</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7694</span>  Loss_G: <span class="number">1.2065</span>  D(x): <span class="number">0.5726</span>    D(G(z)): <span class="number">0.0254</span> / <span class="number">0.3785</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">900</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.3543</span>  Loss_G: <span class="number">4.0476</span>  D(x): <span class="number">0.8919</span>    D(G(z)): <span class="number">0.1873</span> / <span class="number">0.0284</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">950</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5111</span>  Loss_G: <span class="number">2.3574</span>  D(x): <span class="number">0.7082</span>    D(G(z)): <span class="number">0.0835</span> / <span class="number">0.1288</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1000</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5802</span>  Loss_G: <span class="number">5.4608</span>  D(x): <span class="number">0.9395</span>    D(G(z)): <span class="number">0.3649</span> / <span class="number">0.0077</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1050</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.0051</span>  Loss_G: <span class="number">2.4068</span>  D(x): <span class="number">0.5352</span>    D(G(z)): <span class="number">0.0322</span> / <span class="number">0.1486</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1100</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.3509</span>  Loss_G: <span class="number">3.6524</span>  D(x): <span class="number">0.9101</span>    D(G(z)): <span class="number">0.2070</span> / <span class="number">0.0387</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1150</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.9412</span>  Loss_G: <span class="number">5.4059</span>  D(x): <span class="number">0.9597</span>    D(G(z)): <span class="number">0.5325</span> / <span class="number">0.0080</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1200</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5332</span>  Loss_G: <span class="number">3.1298</span>  D(x): <span class="number">0.7943</span>    D(G(z)): <span class="number">0.2138</span> / <span class="number">0.0630</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1250</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6025</span>  Loss_G: <span class="number">3.5758</span>  D(x): <span class="number">0.8679</span>    D(G(z)): <span class="number">0.3182</span> / <span class="number">0.0428</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1300</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7154</span>  Loss_G: <span class="number">2.1555</span>  D(x): <span class="number">0.5657</span>    D(G(z)): <span class="number">0.0379</span> / <span class="number">0.1685</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1350</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.4168</span>  Loss_G: <span class="number">2.1878</span>  D(x): <span class="number">0.7452</span>    D(G(z)): <span class="number">0.0645</span> / <span class="number">0.1534</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1400</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8991</span>  Loss_G: <span class="number">5.3523</span>  D(x): <span class="number">0.9256</span>    D(G(z)): <span class="number">0.4967</span> / <span class="number">0.0074</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1450</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.4778</span>  Loss_G: <span class="number">3.8499</span>  D(x): <span class="number">0.8844</span>    D(G(z)): <span class="number">0.2655</span> / <span class="number">0.0350</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1500</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5049</span>  Loss_G: <span class="number">2.5450</span>  D(x): <span class="number">0.7880</span>    D(G(z)): <span class="number">0.1906</span> / <span class="number">0.1010</span></span><br><span class="line">[<span class="number">1</span>/<span class="number">5</span>][<span class="number">1550</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.0468</span>  Loss_G: <span class="number">1.9007</span>  D(x): <span class="number">0.4378</span>    D(G(z)): <span class="number">0.0346</span> / <span class="number">0.2260</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">0</span>/<span class="number">1583</span>]   Loss_D: <span class="number">0.5008</span>  Loss_G: <span class="number">3.5294</span>  D(x): <span class="number">0.9006</span>    D(G(z)): <span class="number">0.2844</span> / <span class="number">0.0466</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">50</span>/<span class="number">1583</span>]  Loss_D: <span class="number">0.5024</span>  Loss_G: <span class="number">2.3252</span>  D(x): <span class="number">0.7413</span>    D(G(z)): <span class="number">0.1450</span> / <span class="number">0.1267</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">100</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7520</span>  Loss_G: <span class="number">2.0230</span>  D(x): <span class="number">0.5753</span>    D(G(z)): <span class="number">0.0835</span> / <span class="number">0.1797</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">150</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.3734</span>  Loss_G: <span class="number">2.7221</span>  D(x): <span class="number">0.8502</span>    D(G(z)): <span class="number">0.1689</span> / <span class="number">0.0889</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">200</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5891</span>  Loss_G: <span class="number">2.6314</span>  D(x): <span class="number">0.7453</span>    D(G(z)): <span class="number">0.2076</span> / <span class="number">0.1032</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">250</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.1471</span>  Loss_G: <span class="number">3.5814</span>  D(x): <span class="number">0.8959</span>    D(G(z)): <span class="number">0.5563</span> / <span class="number">0.0545</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">300</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5756</span>  Loss_G: <span class="number">3.1905</span>  D(x): <span class="number">0.8738</span>    D(G(z)): <span class="number">0.3128</span> / <span class="number">0.0605</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">350</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5971</span>  Loss_G: <span class="number">2.9928</span>  D(x): <span class="number">0.8177</span>    D(G(z)): <span class="number">0.2657</span> / <span class="number">0.0739</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">400</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6856</span>  Loss_G: <span class="number">3.8514</span>  D(x): <span class="number">0.8880</span>    D(G(z)): <span class="number">0.3835</span> / <span class="number">0.0298</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">450</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6088</span>  Loss_G: <span class="number">1.7919</span>  D(x): <span class="number">0.6660</span>    D(G(z)): <span class="number">0.1227</span> / <span class="number">0.2189</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">500</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7147</span>  Loss_G: <span class="number">2.6453</span>  D(x): <span class="number">0.8321</span>    D(G(z)): <span class="number">0.3531</span> / <span class="number">0.1007</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">550</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5759</span>  Loss_G: <span class="number">2.9074</span>  D(x): <span class="number">0.8269</span>    D(G(z)): <span class="number">0.2833</span> / <span class="number">0.0738</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">600</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5678</span>  Loss_G: <span class="number">2.6149</span>  D(x): <span class="number">0.7928</span>    D(G(z)): <span class="number">0.2516</span> / <span class="number">0.0956</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">650</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.9501</span>  Loss_G: <span class="number">1.1814</span>  D(x): <span class="number">0.5916</span>    D(G(z)): <span class="number">0.2322</span> / <span class="number">0.3815</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">700</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4551</span>  Loss_G: <span class="number">2.5074</span>  D(x): <span class="number">0.8331</span>    D(G(z)): <span class="number">0.2047</span> / <span class="number">0.1129</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">750</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4560</span>  Loss_G: <span class="number">2.3947</span>  D(x): <span class="number">0.7525</span>    D(G(z)): <span class="number">0.1240</span> / <span class="number">0.1147</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">800</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.1853</span>  Loss_G: <span class="number">5.1657</span>  D(x): <span class="number">0.9202</span>    D(G(z)): <span class="number">0.6049</span> / <span class="number">0.0091</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">850</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5514</span>  Loss_G: <span class="number">3.0085</span>  D(x): <span class="number">0.8497</span>    D(G(z)): <span class="number">0.2890</span> / <span class="number">0.0685</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">900</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6882</span>  Loss_G: <span class="number">1.8971</span>  D(x): <span class="number">0.6970</span>    D(G(z)): <span class="number">0.2332</span> / <span class="number">0.1909</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">950</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.1220</span>  Loss_G: <span class="number">0.7904</span>  D(x): <span class="number">0.4095</span>    D(G(z)): <span class="number">0.0570</span> / <span class="number">0.4975</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1000</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.3335</span>  Loss_G: <span class="number">0.3115</span>  D(x): <span class="number">0.3347</span>    D(G(z)): <span class="number">0.0262</span> / <span class="number">0.7661</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1050</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.7281</span>  Loss_G: <span class="number">0.8212</span>  D(x): <span class="number">0.2437</span>    D(G(z)): <span class="number">0.0261</span> / <span class="number">0.5179</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1100</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.9401</span>  Loss_G: <span class="number">3.7894</span>  D(x): <span class="number">0.9033</span>    D(G(z)): <span class="number">0.5104</span> / <span class="number">0.0349</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1150</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8078</span>  Loss_G: <span class="number">3.9862</span>  D(x): <span class="number">0.9178</span>    D(G(z)): <span class="number">0.4608</span> / <span class="number">0.0286</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1200</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5182</span>  Loss_G: <span class="number">3.1859</span>  D(x): <span class="number">0.8568</span>    D(G(z)): <span class="number">0.2787</span> / <span class="number">0.0554</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1250</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5092</span>  Loss_G: <span class="number">2.3530</span>  D(x): <span class="number">0.8015</span>    D(G(z)): <span class="number">0.2122</span> / <span class="number">0.1188</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1300</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.2668</span>  Loss_G: <span class="number">0.5543</span>  D(x): <span class="number">0.3424</span>    D(G(z)): <span class="number">0.0165</span> / <span class="number">0.6271</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1350</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7197</span>  Loss_G: <span class="number">3.8595</span>  D(x): <span class="number">0.9043</span>    D(G(z)): <span class="number">0.4208</span> / <span class="number">0.0299</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1400</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5428</span>  Loss_G: <span class="number">2.6526</span>  D(x): <span class="number">0.8873</span>    D(G(z)): <span class="number">0.3056</span> / <span class="number">0.0961</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1450</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6610</span>  Loss_G: <span class="number">4.2385</span>  D(x): <span class="number">0.9272</span>    D(G(z)): <span class="number">0.3985</span> / <span class="number">0.0211</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1500</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8172</span>  Loss_G: <span class="number">3.2164</span>  D(x): <span class="number">0.8811</span>    D(G(z)): <span class="number">0.4422</span> / <span class="number">0.0612</span></span><br><span class="line">[<span class="number">2</span>/<span class="number">5</span>][<span class="number">1550</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6449</span>  Loss_G: <span class="number">3.8452</span>  D(x): <span class="number">0.9130</span>    D(G(z)): <span class="number">0.3813</span> / <span class="number">0.0325</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">0</span>/<span class="number">1583</span>]   Loss_D: <span class="number">0.7677</span>  Loss_G: <span class="number">1.7745</span>  D(x): <span class="number">0.5928</span>    D(G(z)): <span class="number">0.1388</span> / <span class="number">0.2182</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">50</span>/<span class="number">1583</span>]  Loss_D: <span class="number">0.7981</span>  Loss_G: <span class="number">2.9624</span>  D(x): <span class="number">0.8315</span>    D(G(z)): <span class="number">0.4131</span> / <span class="number">0.0735</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">100</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5679</span>  Loss_G: <span class="number">1.8958</span>  D(x): <span class="number">0.7173</span>    D(G(z)): <span class="number">0.1667</span> / <span class="number">0.1914</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">150</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8576</span>  Loss_G: <span class="number">1.5904</span>  D(x): <span class="number">0.5391</span>    D(G(z)): <span class="number">0.1158</span> / <span class="number">0.2699</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">200</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8644</span>  Loss_G: <span class="number">1.6487</span>  D(x): <span class="number">0.5868</span>    D(G(z)): <span class="number">0.1933</span> / <span class="number">0.2319</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">250</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5331</span>  Loss_G: <span class="number">3.0401</span>  D(x): <span class="number">0.8831</span>    D(G(z)): <span class="number">0.3022</span> / <span class="number">0.0608</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">300</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.2449</span>  Loss_G: <span class="number">2.9489</span>  D(x): <span class="number">0.8759</span>    D(G(z)): <span class="number">0.5865</span> / <span class="number">0.0828</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">350</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.7188</span>  Loss_G: <span class="number">0.5466</span>  D(x): <span class="number">0.2664</span>    D(G(z)): <span class="number">0.0539</span> / <span class="number">0.6320</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">400</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5794</span>  Loss_G: <span class="number">2.7556</span>  D(x): <span class="number">0.7984</span>    D(G(z)): <span class="number">0.2640</span> / <span class="number">0.0787</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">450</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6916</span>  Loss_G: <span class="number">3.1434</span>  D(x): <span class="number">0.8813</span>    D(G(z)): <span class="number">0.3955</span> / <span class="number">0.0578</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">500</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8415</span>  Loss_G: <span class="number">1.9770</span>  D(x): <span class="number">0.6981</span>    D(G(z)): <span class="number">0.3120</span> / <span class="number">0.1639</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">550</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6394</span>  Loss_G: <span class="number">2.4790</span>  D(x): <span class="number">0.8093</span>    D(G(z)): <span class="number">0.2990</span> / <span class="number">0.1082</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">600</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7545</span>  Loss_G: <span class="number">1.6259</span>  D(x): <span class="number">0.6042</span>    D(G(z)): <span class="number">0.1454</span> / <span class="number">0.2401</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">650</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5494</span>  Loss_G: <span class="number">2.1957</span>  D(x): <span class="number">0.8292</span>    D(G(z)): <span class="number">0.2727</span> / <span class="number">0.1414</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">700</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.5095</span>  Loss_G: <span class="number">5.1368</span>  D(x): <span class="number">0.9269</span>    D(G(z)): <span class="number">0.6897</span> / <span class="number">0.0095</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">750</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4714</span>  Loss_G: <span class="number">2.1401</span>  D(x): <span class="number">0.8137</span>    D(G(z)): <span class="number">0.2101</span> / <span class="number">0.1501</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">800</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7118</span>  Loss_G: <span class="number">3.2356</span>  D(x): <span class="number">0.8190</span>    D(G(z)): <span class="number">0.3579</span> / <span class="number">0.0540</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">850</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6392</span>  Loss_G: <span class="number">1.6740</span>  D(x): <span class="number">0.6650</span>    D(G(z)): <span class="number">0.1402</span> / <span class="number">0.2391</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">900</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5303</span>  Loss_G: <span class="number">2.8854</span>  D(x): <span class="number">0.7900</span>    D(G(z)): <span class="number">0.2204</span> / <span class="number">0.0740</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">950</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6333</span>  Loss_G: <span class="number">2.1030</span>  D(x): <span class="number">0.6946</span>    D(G(z)): <span class="number">0.1882</span> / <span class="number">0.1572</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1000</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8715</span>  Loss_G: <span class="number">1.6630</span>  D(x): <span class="number">0.5222</span>    D(G(z)): <span class="number">0.0890</span> / <span class="number">0.2590</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1050</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6139</span>  Loss_G: <span class="number">3.1772</span>  D(x): <span class="number">0.8609</span>    D(G(z)): <span class="number">0.3400</span> / <span class="number">0.0558</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1100</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6673</span>  Loss_G: <span class="number">3.4143</span>  D(x): <span class="number">0.9044</span>    D(G(z)): <span class="number">0.3910</span> / <span class="number">0.0435</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1150</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6554</span>  Loss_G: <span class="number">3.4282</span>  D(x): <span class="number">0.8429</span>    D(G(z)): <span class="number">0.3347</span> / <span class="number">0.0484</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1200</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6184</span>  Loss_G: <span class="number">1.7371</span>  D(x): <span class="number">0.6531</span>    D(G(z)): <span class="number">0.1177</span> / <span class="number">0.2132</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1250</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8293</span>  Loss_G: <span class="number">3.1246</span>  D(x): <span class="number">0.7821</span>    D(G(z)): <span class="number">0.3883</span> / <span class="number">0.0594</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1300</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5211</span>  Loss_G: <span class="number">2.0112</span>  D(x): <span class="number">0.7308</span>    D(G(z)): <span class="number">0.1503</span> / <span class="number">0.1637</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1350</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7389</span>  Loss_G: <span class="number">1.4238</span>  D(x): <span class="number">0.5854</span>    D(G(z)): <span class="number">0.1181</span> / <span class="number">0.2935</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1400</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6608</span>  Loss_G: <span class="number">3.1928</span>  D(x): <span class="number">0.7803</span>    D(G(z)): <span class="number">0.2922</span> / <span class="number">0.0580</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1450</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6381</span>  Loss_G: <span class="number">3.4123</span>  D(x): <span class="number">0.8340</span>    D(G(z)): <span class="number">0.3337</span> / <span class="number">0.0450</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1500</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7027</span>  Loss_G: <span class="number">3.1943</span>  D(x): <span class="number">0.9058</span>    D(G(z)): <span class="number">0.4113</span> / <span class="number">0.0556</span></span><br><span class="line">[<span class="number">3</span>/<span class="number">5</span>][<span class="number">1550</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6849</span>  Loss_G: <span class="number">2.9714</span>  D(x): <span class="number">0.8258</span>    D(G(z)): <span class="number">0.3499</span> / <span class="number">0.0704</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">0</span>/<span class="number">1583</span>]   Loss_D: <span class="number">0.7685</span>  Loss_G: <span class="number">1.7204</span>  D(x): <span class="number">0.5788</span>    D(G(z)): <span class="number">0.1084</span> / <span class="number">0.2252</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">50</span>/<span class="number">1583</span>]  Loss_D: <span class="number">0.6194</span>  Loss_G: <span class="number">1.4702</span>  D(x): <span class="number">0.6214</span>    D(G(z)): <span class="number">0.0700</span> / <span class="number">0.2812</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">100</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5243</span>  Loss_G: <span class="number">2.4332</span>  D(x): <span class="number">0.8206</span>    D(G(z)): <span class="number">0.2515</span> / <span class="number">0.1099</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">150</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8506</span>  Loss_G: <span class="number">1.0129</span>  D(x): <span class="number">0.5094</span>    D(G(z)): <span class="number">0.0647</span> / <span class="number">0.4126</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">200</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.1715</span>  Loss_G: <span class="number">2.5120</span>  D(x): <span class="number">0.5642</span>    D(G(z)): <span class="number">0.3481</span> / <span class="number">0.1214</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">250</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4317</span>  Loss_G: <span class="number">2.7731</span>  D(x): <span class="number">0.8405</span>    D(G(z)): <span class="number">0.2088</span> / <span class="number">0.0791</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">300</span>/<span class="number">1583</span>] Loss_D: <span class="number">1.2310</span>  Loss_G: <span class="number">0.4177</span>  D(x): <span class="number">0.3812</span>    D(G(z)): <span class="number">0.0576</span> / <span class="number">0.6799</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">350</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5565</span>  Loss_G: <span class="number">2.7405</span>  D(x): <span class="number">0.8525</span>    D(G(z)): <span class="number">0.3005</span> / <span class="number">0.0810</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">400</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.4918</span>  Loss_G: <span class="number">3.5705</span>  D(x): <span class="number">0.8863</span>    D(G(z)): <span class="number">0.2833</span> / <span class="number">0.0371</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">450</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6403</span>  Loss_G: <span class="number">2.7691</span>  D(x): <span class="number">0.8543</span>    D(G(z)): <span class="number">0.3406</span> / <span class="number">0.0812</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">500</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5944</span>  Loss_G: <span class="number">1.4696</span>  D(x): <span class="number">0.6849</span>    D(G(z)): <span class="number">0.1325</span> / <span class="number">0.2682</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">550</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8678</span>  Loss_G: <span class="number">4.1990</span>  D(x): <span class="number">0.9529</span>    D(G(z)): <span class="number">0.5105</span> / <span class="number">0.0202</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">600</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8326</span>  Loss_G: <span class="number">1.1841</span>  D(x): <span class="number">0.5175</span>    D(G(z)): <span class="number">0.0679</span> / <span class="number">0.3628</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">650</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5198</span>  Loss_G: <span class="number">2.4393</span>  D(x): <span class="number">0.7668</span>    D(G(z)): <span class="number">0.1943</span> / <span class="number">0.1148</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">700</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8029</span>  Loss_G: <span class="number">4.0836</span>  D(x): <span class="number">0.8791</span>    D(G(z)): <span class="number">0.4448</span> / <span class="number">0.0229</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">750</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.8636</span>  Loss_G: <span class="number">2.0386</span>  D(x): <span class="number">0.5234</span>    D(G(z)): <span class="number">0.0899</span> / <span class="number">0.1846</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">800</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5041</span>  Loss_G: <span class="number">3.0354</span>  D(x): <span class="number">0.8302</span>    D(G(z)): <span class="number">0.2301</span> / <span class="number">0.0609</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">850</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.7514</span>  Loss_G: <span class="number">1.2513</span>  D(x): <span class="number">0.5578</span>    D(G(z)): <span class="number">0.0899</span> / <span class="number">0.3480</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">900</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.6650</span>  Loss_G: <span class="number">1.2806</span>  D(x): <span class="number">0.6675</span>    D(G(z)): <span class="number">0.1925</span> / <span class="number">0.3201</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">950</span>/<span class="number">1583</span>] Loss_D: <span class="number">0.5754</span>  Loss_G: <span class="number">3.0898</span>  D(x): <span class="number">0.8730</span>    D(G(z)): <span class="number">0.3233</span> / <span class="number">0.0597</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1000</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.9327</span>  Loss_G: <span class="number">0.7588</span>  D(x): <span class="number">0.4674</span>    D(G(z)): <span class="number">0.0434</span> / <span class="number">0.5174</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1050</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.9255</span>  Loss_G: <span class="number">0.9513</span>  D(x): <span class="number">0.5029</span>    D(G(z)): <span class="number">0.1161</span> / <span class="number">0.4196</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1100</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.6573</span>  Loss_G: <span class="number">3.4663</span>  D(x): <span class="number">0.8755</span>    D(G(z)): <span class="number">0.3674</span> / <span class="number">0.0403</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1150</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.9803</span>  Loss_G: <span class="number">1.2451</span>  D(x): <span class="number">0.4602</span>    D(G(z)): <span class="number">0.0978</span> / <span class="number">0.3432</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1200</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5560</span>  Loss_G: <span class="number">2.5421</span>  D(x): <span class="number">0.7617</span>    D(G(z)): <span class="number">0.2097</span> / <span class="number">0.1020</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1250</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.7573</span>  Loss_G: <span class="number">1.9034</span>  D(x): <span class="number">0.6477</span>    D(G(z)): <span class="number">0.2158</span> / <span class="number">0.1890</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1300</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.4733</span>  Loss_G: <span class="number">2.7071</span>  D(x): <span class="number">0.8271</span>    D(G(z)): <span class="number">0.2169</span> / <span class="number">0.0882</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1350</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.0812</span>  Loss_G: <span class="number">1.1500</span>  D(x): <span class="number">0.5225</span>    D(G(z)): <span class="number">0.2278</span> / <span class="number">0.3626</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1400</span>/<span class="number">1583</span>]        Loss_D: <span class="number">1.5454</span>  Loss_G: <span class="number">5.2881</span>  D(x): <span class="number">0.9620</span>    D(G(z)): <span class="number">0.7085</span> / <span class="number">0.0089</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1450</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.3576</span>  Loss_G: <span class="number">3.1023</span>  D(x): <span class="number">0.8687</span>    D(G(z)): <span class="number">0.1726</span> / <span class="number">0.0584</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1500</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.5330</span>  Loss_G: <span class="number">1.9979</span>  D(x): <span class="number">0.7277</span>    D(G(z)): <span class="number">0.1597</span> / <span class="number">0.1680</span></span><br><span class="line">[<span class="number">4</span>/<span class="number">5</span>][<span class="number">1550</span>/<span class="number">1583</span>]        Loss_D: <span class="number">0.8927</span>  Loss_G: <span class="number">4.1379</span>  D(x): <span class="number">0.9345</span>    D(G(z)): <span class="number">0.5081</span> / <span class="number">0.0224</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-结果"><a href="#5-6-结果" class="headerlink" title="5.6 结果"></a>5.6 结果</h3><p>从三个不同方面看实验结果:</p>
<ul>
<li>看G和D两个损失函数的变化</li>
<li>看每轮epoch训练G生成图片的结果</li>
<li>对比一批生成图片和一批真实图片(64张)</li>
</ul>
<p>a.loss变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">plt.title(<span class="string">&quot;Generator and Discriminator Loss During Training&quot;</span>)</span><br><span class="line">plt.plot(G_losses,label=<span class="string">&quot;G&quot;</span>)</span><br><span class="line">plt.plot(D_losses,label=<span class="string">&quot;D&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;iterations&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/11/08/MZXZ9O.jpg" alt="image"></p>
<p>b.图片生成变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%%capture</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">ims = [[plt.imshow(np.transpose(i,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)), animated=<span class="literal">True</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> img_list]</span><br><span class="line">ani = animation.ArtistAnimation(fig, ims, interval=<span class="number">1000</span>, repeat_delay=<span class="number">1000</span>, blit=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">HTML(ani.to_jshtml())</span><br></pre></td></tr></table></figure>
<p>c.对比真假图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Grab a batch of real images from the dataloader</span></span><br><span class="line">real_batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataloader))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the real images</span></span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">15</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Real Images&quot;</span>)</span><br><span class="line">plt.imshow(np.transpose(vutils.make_grid(real_batch[<span class="number">0</span>].to(device)[:<span class="number">64</span>], padding=<span class="number">5</span>, normalize=<span class="literal">True</span>).cpu(),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the fake images from the last epoch</span></span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Fake Images&quot;</span>)</span><br><span class="line">plt.imshow(np.transpose(img_list[-<span class="number">1</span>],(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.ax1x.com/2019/11/08/MZLqJO.jpg" alt="image"></p>
<h2 id="6-下一步"><a href="#6-下一步" class="headerlink" title="6.下一步"></a>6.下一步</h2><ul>
<li>Train for longer to see how good the results get<blockquote>
<p>多训练几次，如增加epoch看效果</p>
</blockquote>
</li>
<li>Modify this model to take a different dataset and possibly change the size of the images and the model architecture<blockquote>
<p>换其他数据集、或者调整一些模型结构</p>
</blockquote>
</li>
<li>Check out some other cool GAN projects here<blockquote>
<p>试试其他有趣的GAN应用–<a href="https://github.com/nashory/gans-awesome-applications">https://github.com/nashory/gans-awesome-applications</a></p>
</blockquote>
</li>
<li>Create GANs that generate music<blockquote>
<p>用GAN生成音乐</p>
</blockquote>
</li>
</ul>
<h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考:"></a>7.参考:</h2><p><a href="https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#">https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#</a></p>
<p><a href="https://github.com/soumith/ganhacks#authors">https://github.com/soumith/ganhacks#authors</a></p>
]]></content>
      <categories>
        <category>AI</category>
        <category>GAN</category>
      </categories>
      <tags>
        <tag>GAN</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow 1.简介</title>
    <url>/2019/06/02/AI/tf/1.tf/</url>
    <content><![CDATA[<h1 id="TensorFlow基础介绍"><a href="#TensorFlow基础介绍" class="headerlink" title="TensorFlow基础介绍"></a>TensorFlow基础介绍</h1><span id="more"></span>

<h2 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h2><ul>
<li>计算图graph</li>
</ul>
<p>表示计算任务</p>
<ul>
<li>会话Session</li>
</ul>
<p>表示执行计算图的上下文，执行时需要初始化所有变量(initializer)，会话完成时需要关闭(sess.close)</p>
<ul>
<li>张量(Tensor)</li>
</ul>
<p>表示数据，图中的线条。包括常量constant,变量variable,以及通过占位符(placeholder),其中占位符只在运行时才放入具体的值</p>
<ul>
<li>操作(op)</li>
</ul>
<p>图中的节点,构建图包括构建数据(因为本身不保存数据)和完成计算，因此定义一个Tensor也是一个计算。</p>
<h2 id="2-代码及运行方式"><a href="#2-代码及运行方式" class="headerlink" title="2.代码及运行方式"></a>2.代码及运行方式</h2><blockquote>
<p>tf本身不完成运算，而是定义图来描述计算，把计算放在Python之外进行以提高计算效率</p>
</blockquote>
<h3 id="2-1-Tensor-张量"><a href="#2-1-Tensor-张量" class="headerlink" title="2.1 Tensor(张量)"></a>2.1 Tensor(张量)</h3><p>张量是tensorflow里面的数据结构，可分为常量和变量，所有的数据都通过张量来表示，可以简短理解为多维数组。那么0阶张量表示一个数，1阶张量表示一个向量(即一维数组)，n阶张量表示n维数组。</p>
<blockquote>
<p>张量主要保存了三个属性:1.名字，2.维度，3.类型</p>
</blockquote>
<blockquote>
<p>张量中并不是直接保存数据，而是保存数据的计算过程。如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>],name=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>,<span class="number">3.0</span>],name=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">result = tf.ddd(a,b,name=<span class="string">&quot;add&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果为:</span></span><br><span class="line"><span class="comment">#&lt;tf.Tensor &#x27;add:0&#x27; shape=(2,) dtype=float32&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1.0</span>,<span class="number">2</span>,<span class="number">0</span>],name=<span class="string">&#x27;a&#x27;</span>)<span class="comment">#定义常量a</span></span><br><span class="line">b = tf.constant([<span class="number">2.0</span>,<span class="number">3.0</span>],name=<span class="string">&#x27;b&#x27;</span>)<span class="comment">#定义常量b</span></span><br><span class="line"></span><br><span class="line">result = tf.add(a,b,name=<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>变量<blockquote>
<p>变量的声明函数tf.Variable()是一个运算，是一种特殊的张量</p>
</blockquote>
</li>
</ul>
<p>神经网络中的参数是神经网络实现分类或者回归问题中的重要部分，变量的作用就是保存和更新神经网络中的参数(边)。</p>
<p>tf.Variable是一个运算，运算的输出结果是一个张量，所以变量是一种特殊的张量。</p>
<p>定义一个2*3矩阵变量(元素值默认为0，标准差为2的随机数):</p>
<blockquote>
<p>weights&#x3D;tf.Variable(tf.random_normal([2,3],stddev&#x3D;2))</p>
</blockquote>
<p>变量一个小应用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">x = tf.constant([<span class="number">0.7</span>,<span class="number">0.9</span>])</span><br><span class="line"></span><br><span class="line">a = tf.matmul(x,w1)</span><br><span class="line">y = tf.matmul(a,w2)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">sess.run(w1.initializer)</span><br><span class="line">sess.run(w2.initializer)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sess.run(y))</span><br><span class="line">sess.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-Session-会话"><a href="#2-2-Session-会话" class="headerlink" title="2.2 Session(会话)"></a>2.2 Session(会话)</h3><p>会话作用是执行定义好的运算，会话可以管理tensorflow运行时的所有资源。当所以计算完成后需要关闭会话回收资源。包含三个要点:</p>
<ul>
<li>定义会话对象(tf.Session)</li>
<li>启动会话完成计算(run)</li>
<li>会话关闭(sess.close())</li>
</ul>
<p>使用会话如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(...)</span><br><span class="line">ses.close()</span><br></pre></td></tr></table></figure>

<p>可以使用python上下文管理机制自动关闭会话:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Sesssion() <span class="keyword">as</span> sess():</span><br><span class="line">    sess.run(...)</span><br></pre></td></tr></table></figure>
<p>总结:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run()</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上代码等同于</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess()</span><br><span class="line">    sess.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-placeholder-占位符"><a href="#2-3-placeholder-占位符" class="headerlink" title="2.3 placeholder(占位符)"></a>2.3 placeholder(占位符)</h3><p>反向传播的机制就是迭代(循环执行某一个流程图)<br><img src="https://i.loli.net/2019/07/02/5d1ac8df7afd322985.png" alt="image"><br>如果每一次迭代都要用到常量，计算量就过大(一个神经元网络的训练过程需要几百万轮甚至几亿轮迭代)，placeholder相当于定义了一个位置，这个位置中的数据在程序运行时再指定。和张量一样，placeholder的类型也是不可以改变的。</p>
<ul>
<li>无placeholder的代码:<br><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/EtDHbyBvhMsGfGVAhU03t2rs647l2rUjJHsNmgoCeOg!/b/dFMBAAAAAAAA&bo=bgNgAgAAAAADBy0!&rf=viewer_4" alt="在这里插入图片描述"></li>
<li>有placeholder:<br><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/zcwRLJAE9mpUUK.CQ0IDV1buoe9rwTKH*xmTNUEVpKY!/b/dL8AAAAAAAAA&bo=cANAAgAAAAADBxM!&rf=viewer_4" alt="image"></li>
<li>总结:</li>
</ul>
<blockquote>
<p>placeholder通过一个指针来表示该节点的输入数据，这样可以在运行时再计算该节点的数据</p>
</blockquote>
<blockquote>
<p>比直接用张量来作为输入数据节省内存</p>
</blockquote>
<blockquote>
<p>需要在Session的run()中通过字典类型参数feed_dict赋值</p>
</blockquote>
<h3 id="2-4-initializer-初始化"><a href="#2-4-initializer-初始化" class="headerlink" title="2.4 initializer(初始化)"></a>2.4 initializer(初始化)</h3><blockquote>
<p>tf中变量是保存和更新神经网络参数的值，变量的操作分为变量定义和变量初始化</p>
</blockquote>
<blockquote>
<p>需要注意的是变量定义时只是给出变量赋值的方法，并没有被真正执行，需要通过会话初始化变量已完成赋值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],stddev=<span class="number">2</span>)) <span class="comment">#随机数定义</span></span><br><span class="line">biases = tf.Variable(tf.zeors([<span class="number">3</span>])) <span class="comment"># 常数定义</span></span><br><span class="line"></span><br><span class="line">w2 = tf.Variable(weights.initialized_Value()) <span class="comment">#通过其他变量定义</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(w1.initializer) <span class="comment">#初始化</span></span><br><span class="line">sess.run(w2.initializer) </span><br></pre></td></tr></table></figure>

<h3 id="2-5-graph-计算图"><a href="#2-5-graph-计算图" class="headerlink" title="2.5 graph(计算图)"></a>2.5 graph(计算图)</h3><p>计算图是tensorflow计算的流程图，里面包括数据和计算，其中节点代表数据，节点和节点直接的连线代表计算。可以通过不同的计算图来管理模型。</p>
<p>以下代码会发现不同计算图的变量值不一样，就说明不同的图是一独立的运算流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个计算图g1，其中变量v的值为0</span></span><br><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">    v = tf.get_variable(<span class="string">&quot;v&quot;</span>, shape=[<span class="number">1</span>], initializer=tf.zeros_initializer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个计算图g2，其中变量v的值为1</span></span><br><span class="line">g2 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g2.as_default():</span><br><span class="line">    v = tf.get_variable(<span class="string">&quot;v&quot;</span>,shape=[<span class="number">1</span>],initializer=tf.ones_initializer)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#读取计算图g1中v的值</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=g1) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;&quot;</span>,reuse=<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(sess.run(tf.get.variable(<span class="string">&quot;v&quot;</span>)))</span><br><span class="line">        </span><br><span class="line"><span class="comment">#读取计算图g2中v的值</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=g2) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&quot;&quot;</span>,reuse=<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(sess.run(tf.get.variable(<span class="string">&quot;v&quot;</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>计算框架(AI)</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST 1.简介&amp;可视化</title>
    <url>/2019/06/02/AI/mnist/1.mnist/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>MNIST 数据集来自美国国家标准与技术研究所, 是NIST(National Institute of Standards and Technology)的缩小版，训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员，测试集(test set) 也是同样比例的手写数字数据.</p>
<span id="more"></span>

<p>MNIST 数据集可在 <a href="http://yann.lecun.com/exdb/mnist/">http://yann.lecun.com/exdb/mnist/</a> 获取, 图片是以字节的形式进行存储，它包含了四个部分:</p>
<ul>
<li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li>
<li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li>
<li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li>
<li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li>
</ul>
<p>此数据集中，训练样本：共60000个，其中55000个用于训练，另外5000个用于验证。测试样本：共10000个，验证数据比例相同。</p>
<p>数据集中像素值<br>a）使用python读取二进制文件方法读取mnist数据集，则读进来的图像像素值为0-255之间；标签是0-9的数值。<br>b）采用TensorFlow的封装的函数读取mnist，则读进来的图像像素值为0-1之间；标签是0-1值组成的大小为1*10的行向量。</p>
<h2 id="2-读取mnist到numpy"><a href="#2-读取mnist到numpy" class="headerlink" title="2.读取mnist到numpy"></a>2.读取mnist到numpy</h2><p>load_mnist 函数返回两个数组, 第一个是一个 n x m 维的 NumPy array(images), 这里的 n 是样本数(行数), m 是特征数(列数). 训练数据集包含 60,000 个样本, 测试数据集包含 10,000 样本.</p>
<p>在 MNIST 数据集中的每张图片由 28 x 28 个像素点构成, 每个像素点用一个灰度值表示. 在这里, 我们将 28 x 28 的像素展开为一个一维的行向量, 这些行向量就是图片数组里的行(每行 784 个值, 或者说每行就是代表了一张图片). </p>
<p>load_mnist 函数返回的第二个数组(labels) 包含了相应的目标变量, 也就是手写数字的类标签(整数 0-9).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mport os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_mnist</span>(<span class="params">path, kind=<span class="string">&#x27;train&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Load MNIST data from `path`&quot;&quot;&quot;</span></span><br><span class="line">    labels_path = os.path.join(path,<span class="string">&#x27;%s-labels-idx1-ubyte&#x27;</span>% kind)</span><br><span class="line">    </span><br><span class="line">    images_path = os.path.join(path,<span class="string">&#x27;%s-images-idx3-ubyte&#x27;</span>% kind)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(labels_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> lbpath:</span><br><span class="line">        magic, n = struct.unpack(<span class="string">&#x27;&gt;II&#x27;</span>,lbpath.read(<span class="number">8</span>))</span><br><span class="line">        labels = np.fromfile(lbpath,dtype=np.uint8)</span><br><span class="line">    <span class="comment">#读入magic是一个文件协议的描述,也是调用fromfile 方法将字节读入NumPy的array之前在文件缓冲中的item数(n). </span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(images_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> imgpath:</span><br><span class="line">        magic, num, rows, cols = struct.unpack(<span class="string">&#x27;&gt;IIII&#x27;</span>,imgpath.read(<span class="number">16</span>))</span><br><span class="line">        images = np.fromfile(imgpath,dtype=np.uint8).reshape(<span class="built_in">len</span>(labels), <span class="number">784</span>)</span><br><span class="line">    <span class="keyword">return</span> images, labels</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.</span><br><span class="line">&gt;这是指大端(用来定义字节是如何存储的，关于大小端, 更多内容可见&lt;&lt;深入理解计算机系统 – <span class="number">2.1</span> 节信息存储&gt;&gt;)</span><br><span class="line"><span class="number">2</span>.</span><br><span class="line">I: 这是指一个无符号整数.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-查看tensorflow集成的mnist"><a href="#3-查看tensorflow集成的mnist" class="headerlink" title="3.查看tensorflow集成的mnist"></a>3.查看tensorflow集成的mnist</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">minit = input_data.read_data_sets(<span class="string">&quot;../MNIST_data&quot;</span>)</span><br><span class="line"><span class="comment">#如果该路径没有会自动下载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Training data size&quot;</span>,minit.train.num_examples)</span><br><span class="line"><span class="comment">#训练数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Training data size&quot;</span>,minit.validatation.num_examples)</span><br><span class="line"><span class="comment">#验证数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Training data size&quot;</span>,minit.test.num_examples)</span><br><span class="line"><span class="comment">#测试数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Example training data size&quot;</span>,minit.train.image[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#样例训练数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>（“Example training data label”,minist.train.labels[<span class="number">0</span>]）</span><br><span class="line"><span class="comment">#样例训练数据标签 </span></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">x,y = mnist.train.next_batch(batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x shape:&#x27;</span>,x.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y shape:&#x27;</span>,y.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-可视化"><a href="#4-可视化" class="headerlink" title="4.可视化"></a>4.可视化</h2><h3 id="4-1-plt的方法"><a href="#4-1-plt的方法" class="headerlink" title="4.1 plt的方法"></a>4.1 plt的方法</h3><p> 从 feature matrix 中将 784-像素值 的向量 reshape 为之前的 28*28 的形状, 然后通过 matplotlib 的 imshow 函数进行绘制,不能进行one-hot编码:</p>
<ul>
<li>读单个图片<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#from tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets</span></span><br><span class="line"><span class="comment">#mnist = read_data_sets(&#x27;MNIST_data&#x27;, one_hot=False)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&quot;./MNIST_data&quot;</span>,one_hot=<span class="literal">False</span>)</span><br><span class="line">x, y = mnist.test.next_batch(<span class="number">1</span>)</span><br><span class="line">x = x.reshape([<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"> </span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># Method1 </span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">ax1.imshow(x, cmap=plt.cm.gray)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Method2: 反转色</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax2.imshow(x, cmap=plt.cm.gray_r) <span class="comment"># r表示reverse</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Method3（等价于Method1）</span></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">223</span>)</span><br><span class="line">ax3.imshow(x, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Method4（等价于Method2）</span></span><br><span class="line">ax4 = fig.add_subplot(<span class="number">224</span>)</span><br><span class="line">ax4.imshow(x, cmap=<span class="string">&#x27;gray_r&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure></li>
<li>读多个图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&quot;./MNIST_data&quot;</span>,one_hot=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">fig, ax_big = plt.subplots()</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment">#读一百张</span></span><br><span class="line">	x,y = mnist.test.next_batch(<span class="number">1</span>)</span><br><span class="line">	x = x.reshape([<span class="number">28</span>,<span class="number">28</span>])</span><br><span class="line">	ax = fig.add_subplot(<span class="number">10</span>,<span class="number">10</span>,i+<span class="number">1</span>) <span class="comment">#10行10列</span></span><br><span class="line">	ax.imshow(x, cmap=plt.cm.gray)</span><br><span class="line">	ax.set_xticks([])              </span><br><span class="line">	ax.set_yticks([])</span><br><span class="line">	<span class="comment">#隐藏子图坐标轴刻度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax_big.set_xticks([])                                   </span><br><span class="line"><span class="comment"># 隐藏坐标轴刻度</span></span><br><span class="line">ax_big.set_yticks([])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#plt.savefig(&quot;路径.png&quot;, dpi=150)</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-torchvision-amp-scipy方法"><a href="#4-2-torchvision-amp-scipy方法" class="headerlink" title="4.2 torchvision&amp;scipy方法"></a>4.2 torchvision&amp;scipy方法</h3><p>其实数据集里的图片就是一个带有像素值的二维数组，可以画出这个数组的库有很多。包括<a href="https://baijiahao.baidu.com/s?id=1625418330981941428&wfr=spider&for=pc">机器学习库torch</a>，其中的torchvision也可以。具体方法如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision   </span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> Data </span><br><span class="line"><span class="keyword">import</span> scipy.misc</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DOWNLOAD_MNIST = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.MNIST(root=<span class="string">&#x27;./MNIST_data2/&#x27;</span>,train=<span class="literal">True</span>,transform=torchvision.transforms.ToTensor(),download=DOWNLOAD_MNIST)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把原始图片保存至MNIST_data/raw/下</span></span><br><span class="line">save_dir=<span class="string">&quot;mnist/raw/&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(save_dir) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    os.makedirs(save_dir)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    image_array,_=train_data[i]<span class="comment">#打印第i个</span></span><br><span class="line">    image_array=image_array.resize(<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">    filename=save_dir + <span class="string">&#x27;mnist_train_%d.jpg&#x27;</span> % i<span class="comment">#保存文件的格式</span></span><br><span class="line">    <span class="built_in">print</span>(filename)</span><br><span class="line">    <span class="built_in">print</span>(train_data.train_labels[i])<span class="comment">#打印出标签</span></span><br><span class="line">    scipy.misc.toimage(image_array,cmin=<span class="number">0.0</span>,cmax=<span class="number">1.0</span>).save(filename)<span class="comment">#保存图像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果输出如下：</p>
<p><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/zngT3kDSse*gvdD1Nls8nq6h8SJU56z7o9*Qgn5e6ek!/b/dMAAAAAAAAAA&bo=pAdiAwAAAAADB.A!&rf=viewer_4" alt="image"></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>MNIST</tag>
        <tag>图片识别</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST 2.最简单的识别模型</title>
    <url>/2019/06/02/AI/mnist/2.mnist/</url>
    <content><![CDATA[<ul>
<li><p>该模型是tensorflow官方文档首个模型,没有使用卷积网络</p>
</li>
<li><p>关键是构建一个公式</p>
</li>
</ul>
<blockquote>
<p>公式为y&#x3D;wx+b，带有二维像素值的数组(图片)作为输入x，标签(图片结果)作为输出y</p>
</blockquote>
<blockquote>
<p>用正向传播把数据(x，y)带入训练，再反向传播提升梯度来不断调整参数(w,b)，使得公式的输出尽量准确。</p>
</blockquote>
<ul>
<li>正确率约为92%</li>
</ul>
<span id="more"></span>

<h2 id="一、模型构建-计算公式实现"><a href="#一、模型构建-计算公式实现" class="headerlink" title="一、模型构建(计算公式实现)"></a>一、模型构建(计算公式实现)</h2><p>为了得到一章图片(28*28&#x3D;784个像素值)属于某个特定数字类的特征，我们对像素值进行加权求和。如果结果特征即加权值为负，就不属于该类，为正就属于该类。</p>
<h3 id="1-特征值-需要学习参数W、b"><a href="#1-特征值-需要学习参数W、b" class="headerlink" title="1.特征值(需要学习参数W、b)"></a>1.特征值(需要学习参数W、b)</h3><p><img src="http://m.qpic.cn/psb?/V13eBt6k3qUwrV/9KIokAcGSsY17tIcV6FaPfh2aAqNNuwOpazZU0q0GAE!/b/dL4AAAAAAAAA&bo=5AK2AAAAAAADF2I!&rf=viewer_4" alt="image"></p>
<h3 id="2-softmax转换特征值为概率-0-1之间"><a href="#2-softmax转换特征值为概率-0-1之间" class="headerlink" title="2.softmax转换特征值为概率(0-1之间):"></a>2.softmax转换特征值为概率(0-1之间):</h3><p><img src="http://m.qpic.cn/psb?/V13eBt6k3qUwrV/4BO8EBRwzsWxHzQVjugLpOQ3Fxn1tSuDAOHkhWI3ffY!/b/dL8AAAAAAAAA&bo=ggKQAAAAAAADFyI!&rf=viewer_4" alt="image"></p>
<p>其中xi是输入数据，evidencei是特征,y为通过特征softmax后得到的最终概率，</p>
<p>而参数W和b是我们要学习得到的数据，Wi是一个[784,10]的数据，bi是一个[10]的数据，就是模型(也是一个计算公式)的核心部分。</p>
<blockquote>
<p>代码：y&#x3D;tf.nn.softmax(tf.matmul(x,W)+b)</p>
</blockquote>
<h3 id="3-构建交叉熵"><a href="#3-构建交叉熵" class="headerlink" title="3.构建交叉熵"></a>3.构建交叉熵</h3><p>可以将W和b初始化为全0向量(或随意设置)，通过迭代输入变量的计算结果反向传播(bp),从而使用梯度下降算法(gradient descent algorithm)完成最优化参数W和b，最优化的结果可以计算出最终的模型准球率</p>
<p>梯度下降需要设置学习率即学习的速率,还需要一个损失函数(最长见的是交叉熵cross-entropy),该函数得到一个loss值来刻画模型训练的结果(准确率)</p>
<p><img src="http://m.qpic.cn/psb?/V13eBt6k3qUwrV/YoY5U*g0eEUed6EXl61fkkAszYrnzTWo12dOjhsxu64!/b/dLgAAAAAAAAA&bo=pgK.AAAAAAADFyg!&rf=viewer_4" alt="image"></p>
<blockquote>
<p>y是预测的分布，y&#96;是实际的分布，</p>
</blockquote>
<blockquote>
<p>代码:cross_entropy &#x3D; -tf.reduce_sum(y_*tf.log(y))</p>
</blockquote>
<h3 id="4-训练-BP和反向传播-学习过程"><a href="#4-训练-BP和反向传播-学习过程" class="headerlink" title="4.训练(BP和反向传播,学习过程)"></a>4.训练(BP和反向传播,学习过程)</h3><p>训练是一系列计算，包括1.计算梯度 2.每个参数的步长变化 3.更新参数</p>
<blockquote>
<p>train_step &#x3D; tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)</p>
</blockquote>
<p>train_step是一个对象，计算时会使用梯度下降来更新参数，通过反复运行该对象完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    train_step.run(feed_ditc=&#123;x:batch[<span class="number">0</span>],y:batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="comment">#x,y为具体数据，替代占位符(placeholder)</span></span><br><span class="line">    <span class="comment">#等价于:</span></span><br><span class="line">    <span class="comment">#train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)</span></span><br><span class="line">    <span class="comment">#sess.run(train_step,feed_ditc=&#123;x:batch[0],y:batch[1]&#125;)</span></span><br></pre></td></tr></table></figure>

<h2 id="二、实现代码"><a href="#二、实现代码" class="headerlink" title="二、实现代码:"></a>二、实现代码:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&quot;./MNIST_data/&quot;</span>,one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mnist.train.images)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(mnist.train.images))</span><br><span class="line"><span class="built_in">print</span>(mnist.train.images.shape)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mnist.train.labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(mnist.train.labels))</span><br><span class="line"><span class="built_in">print</span>(mnist.train.labels.shape)</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">784</span>]) <span class="comment">#该占位符第一维可以是任意长度，表示图像数据可以是28*28=784的n张图</span></span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"><span class="comment">#w和b是需要学习的值，初始化为0</span></span><br><span class="line"></span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W)+b)</span><br><span class="line"><span class="comment">#模型即计算公式,y是预测值</span></span><br><span class="line"></span><br><span class="line">y_ = tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment">#y_是真实值</span></span><br><span class="line"></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))</span><br><span class="line"><span class="comment">#计算交叉熵</span></span><br><span class="line"></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line"><span class="comment">#优化器，计算梯度，并将梯度作用于变量.</span></span><br><span class="line"><span class="comment">#使用minimize()操作，该操作不仅可以优化更新训练的模型参数，也可以为全局步骤(global step)计数</span></span><br><span class="line"></span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    batch_xs,batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step,feed_dict=&#123;x:batch_xs,y_:batch_ys&#125;)</span><br><span class="line">    </span><br><span class="line">correct_predict = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line"><span class="comment">#y是一个含有10个元素的标签</span></span><br><span class="line"><span class="comment">#argmax(a,b)返回集合a中和数值b相同的索引值</span></span><br><span class="line"></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_predict,<span class="string">&quot;float&quot;</span>))</span><br><span class="line"><span class="comment">#tf.cast将bool值转化为浮点数</span></span><br><span class="line"><span class="comment">#tf.reduce_mean可以取平均值,如[1,0,1,1]为0.75</span></span><br><span class="line"></span><br><span class="line">sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y_:mnist.test.labels&#125;) </span><br><span class="line">sess.close()</span><br><span class="line"><span class="comment">#准确率为0.9129</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三、实现代码2"><a href="#三、实现代码2" class="headerlink" title="三、实现代码2"></a>三、实现代码2</h2><p>增加了测试过程的准确率，以1000次为一步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&quot;./MNIST_data/&quot;</span>,one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">784</span>]) <span class="comment">#该占位符第一维可以是任意长度，表示图像数据可以是28*28=784的n张图</span></span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"><span class="comment">#w和b是需要学习的值，初始化为0</span></span><br><span class="line"></span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W)+b)</span><br><span class="line"><span class="comment">#模型即计算公式,y是预测值</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line"><span class="comment">#y_是真实值</span></span><br><span class="line"></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">correct_predict = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_predict,<span class="string">&quot;float&quot;</span>))</span><br><span class="line"></span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    batch_xs,batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step,feed_dict=&#123;x:batch_xs,y_:batch_ys&#125;)</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">    	acc=sess.run(accuracy,feed_dict=&#123;x:mnist.validation.images,y_:mnist.validation.labels&#125;)</span><br><span class="line">    	<span class="comment">#训练1000次后(更新的参数W,b)，对整体validation的测试</span></span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&#x27;step %d is %g&#x27;</span>%(i,acc))</span><br><span class="line">    	<span class="comment">#上两行代码等价于:</span></span><br><span class="line">    	<span class="comment">#print(accuracy.eval(feed_dict=&#123;x:mnist.validation.images,y_:mnist.validation.labels&#125;))</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">accFinal=sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y_:mnist.test.labels&#125;) </span><br><span class="line"><span class="built_in">print</span>(accFinal)</span><br><span class="line">sess.close()</span><br><span class="line"><span class="comment">#准确率为0.9129</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>MNIST</tag>
        <tag>图片识别</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST 4.改进的cnn模型</title>
    <url>/2019/06/02/AI/mnist/4.mnist/</url>
    <content><![CDATA[<blockquote>
<p>该模型是TF书中97页的改进版，来源于CSDN,模型使用<br>tf框架的范围管理scope技术来优化参数设定，最终准确率为0.984</p>
</blockquote>
<span id="more"></span>

<p>这里主要引入较多参数来改进原有的cnn模型：</p>
<ul>
<li>使用激活函数去线性化</li>
<li>使用隐藏层即加深层数以解决复杂问题</li>
<li>使用学习率调整更新参数的频度</li>
<li>使用滑动平均模型来调整模型结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载数据，打印数据信息</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&#x27;/MNIST_data/&#x27;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Training data size: &quot;</span>, mnist.train.num_examples)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Validating data size: &quot;</span>, mnist.validation.num_examples)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing data size: &quot;</span>, mnist.test.num_examples)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Example training data: &quot;</span>, mnist.train.images[<span class="number">0</span>] )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Example training data label: &quot;</span>, mnist.train.labels[<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 声明全局变量</span></span><br><span class="line">INPUT_NODE = <span class="number">784</span>  <span class="comment"># 输入层节点数，图片是28*28*1的格式，每个像素点对应一个节点就是784</span></span><br><span class="line">OUTPUT_NODE = <span class="number">10</span>  <span class="comment"># 输出层节点数，0-9十个数字</span></span><br><span class="line"> </span><br><span class="line">LAYER1_NODE = <span class="number">500</span>  <span class="comment"># 第一个隐藏层的节点数</span></span><br><span class="line"> </span><br><span class="line">BATCH_SIZE = <span class="number">100</span>  <span class="comment"># batch的大小，越大训练过程越接近梯度下降，越小越接近随机梯度下降</span></span><br><span class="line"> </span><br><span class="line">LEARNING_RATE_BASE = <span class="number">0.8</span>  <span class="comment"># 基础的学习率</span></span><br><span class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span>  <span class="comment"># 学习率的衰减值</span></span><br><span class="line"> </span><br><span class="line">REGULARIZATION_RATE = <span class="number">0.0001</span>  <span class="comment"># 正则化的λ系数</span></span><br><span class="line">TRAINING_STEPS = <span class="number">30000</span>  <span class="comment"># 训练的轮数</span></span><br><span class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span>  <span class="comment"># 滑动平均衰减率</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weight_variable</span>(<span class="params">shape, regualrizer</span>):</span><br><span class="line">    <span class="comment"># get_variable()获取这个参数的现有变量或创建一个新变量。获取的参数根据&quot;name&quot;指定</span></span><br><span class="line">    <span class="comment"># 生成的值服从具有指定平均值和标准偏差的正态分布，</span></span><br><span class="line">    <span class="comment"># 如果生成的值大于平均值2个标准偏差的值则丢弃重新选择。</span></span><br><span class="line">    <span class="comment"># stddev 要生成的随机值的标准偏差</span></span><br><span class="line">    weights = tf.get_variable(<span class="string">&quot;weights&quot;</span>, shape, </span><br><span class="line">                              initializer=tf.random_normal_initializer(stddev=<span class="number">0.1</span>))</span><br><span class="line">    <span class="keyword">if</span> regualrizer != <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># 传入的参数regualrizer是一个函数</span></span><br><span class="line">        <span class="comment"># 如果定义了正则化函数（L1或者L2），则计算weights的正则化参数，并加入</span></span><br><span class="line">        <span class="comment"># 名为“losses”的集合</span></span><br><span class="line">        tf.add_to_collection(<span class="string">&quot;losses&quot;</span>, regualrizer(weights))</span><br><span class="line">    <span class="keyword">return</span> weights</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inference</span>(<span class="params">x, regularizer</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    辅助函数，给定神经网络的输入和所有参数，计算向前传播的结果</span></span><br><span class="line"><span class="string">    定义了一个relu激活的三层全连接网络(输入层，隐藏层，输出层)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># variable_scope()用于定义创建变量（层）的操作的上下文管理器。此上下文管理器验证（可选）的</span></span><br><span class="line">    <span class="comment"># values来自同一图形，确保图形是默认图形，并推送名称范围和变量范围</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer1&#x27;</span>, reuse = <span class="literal">False</span>):</span><br><span class="line">        weights = get_weight_variable([INPUT_NODE, LAYER1_NODE], regularizer)</span><br><span class="line">        biases = tf.get_variable(<span class="string">&quot;biases&quot;</span>, [LAYER1_NODE], </span><br><span class="line">                                 initializer=tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line">        layer1 = tf.nn.relu(tf.matmul(x, weights) + biases)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;layer2&#x27;</span>, reuse = <span class="literal">False</span>):</span><br><span class="line">        weights = get_weight_variable([LAYER1_NODE, OUTPUT_NODE], regularizer)</span><br><span class="line">        biases = tf.get_variable(<span class="string">&quot;biases&quot;</span>, [OUTPUT_NODE], </span><br><span class="line">                                 initializer=tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line">        layer2 = tf.matmul(layer1, weights) + biases</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> layer2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">mnist</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;训练模型&quot;&quot;&quot;</span></span><br><span class="line">    x = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, INPUT_NODE], name=<span class="string">&quot;x-input&quot;</span>)</span><br><span class="line">    y_ = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, OUTPUT_NODE], name=<span class="string">&quot;y-input&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 定义正则化的函数</span></span><br><span class="line">    regularizer = tf.contrib.layers.l2_regularizer(REGULARIZATION_RATE)</span><br><span class="line">    <span class="comment"># 向前传播求出y</span></span><br><span class="line">    y = inference(x, regularizer)</span><br><span class="line">    <span class="comment"># 定义训练的轮数，需要用trainable=False参数指定不训练这个变量，</span></span><br><span class="line">    <span class="comment"># 这样同时也可以避免这个变量被计算滑动平均值</span></span><br><span class="line">    global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 给定滑动平均衰减速率和训练轮数，初始化滑动平均类</span></span><br><span class="line">    variable_averages = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY,</span><br><span class="line">                                                          global_step)</span><br><span class="line">    <span class="comment"># 用tf.trainable_variable()获取所有可以训练的变量列表，全部使用滑动平均</span></span><br><span class="line">    variables_averages_op = variable_averages.apply(tf.trainable_variables())</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 定义损失函数</span></span><br><span class="line">    <span class="comment"># 因为标准答案是一个长度为10的一维数组，argmax可以从这个矩阵（y_）的轴为1的部分取最大值的序号</span></span><br><span class="line">    <span class="comment"># 在sparse_softmax_cross_entropy_with_logits()中，要将原来为one-hot形式的labels</span></span><br><span class="line">    <span class="comment"># 转换为数字标签[1],[2],...的格式。</span></span><br><span class="line">    <span class="comment"># tf.argmax(Y,asix)，axis = 0 或 1，分别表示按列或按行返回最大值的序号。</span></span><br><span class="line">    cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y,</span><br><span class="line">                                                                   labels=tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 获取总损失平均值</span></span><br><span class="line">    cross_entropy_mean = tf.reduce_mean(cross_entropy)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 给损失加上正则化的损失</span></span><br><span class="line">    <span class="comment"># 使用get_collection获取losses集合的全部值的列表，然后用add_n求列表的所有值的和</span></span><br><span class="line">    loss = cross_entropy_mean + tf.add_n(tf.get_collection(<span class="string">&quot;losses&quot;</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 求加上指数衰减的学习率</span></span><br><span class="line">    learning_rate = tf.train.exponential_decay(</span><br><span class="line">        LEARNING_RATE_BASE,</span><br><span class="line">        global_step,</span><br><span class="line">        mnist.train.num_examples / BATCH_SIZE,</span><br><span class="line">        LEARNING_RATE_DECAY,</span><br><span class="line">        staircase = <span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 优化损失函数</span></span><br><span class="line">    <span class="comment"># global_step初始值为0，在loss更新后会+1，用来记录更新的次数</span></span><br><span class="line">    <span class="comment"># 返回值是训练之后的梯度，会随着global_step递增</span></span><br><span class="line">    train_step = tf.train.GradientDescentOptimizer(</span><br><span class="line">        learning_rate).minimize(loss, global_step=global_step)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 反向传播更新参数之后需要更新每一个参数的滑动平均值，用下面的代码可以一次完成这两个操作</span></span><br><span class="line">    <span class="comment"># train_step计算所有参数的梯度，variables_averages_op对所有参数进行滑动平均（利用train_step）</span></span><br><span class="line">    <span class="keyword">with</span> tf.control_dependencies([train_step, variables_averages_op]):</span><br><span class="line">        train_op = tf.no_op(name=<span class="string">&quot;train&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># y是计算得出的预测答案，而y_是正确答案，用argmax获取答案的序号（也即是数字的值）</span></span><br><span class="line">    <span class="comment"># equal()判断两个答案是否相等，是就返回True，否就返回False</span></span><br><span class="line">    correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># cast()把一个布尔类型的数转换为实数，然后用reduce_mean计算平均值，获取准确率</span></span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化全局变量</span></span><br><span class="line">        tf.global_variables_initializer().run()</span><br><span class="line">        </span><br><span class="line">        validate_feed = &#123;x: mnist.validation.images, y_: mnist.validation.labels&#125;</span><br><span class="line">        test_feed = &#123;x: mnist.test.images, y_: mnist.test.labels&#125;</span><br><span class="line">        <span class="comment"># 开始迭代</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(TRAINING_STEPS):</span><br><span class="line">            xs, ys = mnist.train.next_batch(BATCH_SIZE)</span><br><span class="line">            sess.run(train_op, feed_dict=&#123;x:xs, y_:ys&#125;)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># tensorflow的数据集特有的一种batch_size获取方法</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 获取计算之后的loss和global_step</span></span><br><span class="line">                validate_acc = sess.run(accuracy, feed_dict=validate_feed)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;After %d traing times, validate accuracy using average model is %g&quot;</span></span><br><span class="line">                     % (i, validate_acc)) </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 使用模型训练测试集，获取最终的准确率</span></span><br><span class="line">        test_acc = sess.run(accuracy, feed_dict=test_feed)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After %d traing times, test accuracy using average model is %g&quot;</span> </span><br><span class="line">              % (TRAINING_STEPS, test_acc))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 主函数定义</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv=<span class="literal">None</span></span>):</span><br><span class="line">    tf.reset_default_graph()</span><br><span class="line">    mnist = input_data.read_data_sets(<span class="string">&#x27;/MNIST_data/&#x27;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    train(mnist)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考文献：<a href="https://blog.csdn.net/lovefreewind/article/d">https://blog.csdn.net/lovefreewind/article/d</a></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>MNIST</tag>
        <tag>图片识别</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST 3.cnn实现</title>
    <url>/2019/06/02/AI/mnist/3.mnist/</url>
    <content><![CDATA[<ul>
<li>该模型是tensorflow官方文档的第二个模型，使用了cnn卷积网络</li>
</ul>
<span id="more"></span>

<ul>
<li>该技术源于最早的lenet模型，细分计算过程，算上输入和输出，过程可分为卷积、池化、卷积、池化、全联接，总共七层。</li>
</ul>
<blockquote>
<p>卷积是用一个卷积核(比二维图像更小的一个二维数组)去扫一遍(就是矩阵积运算)图像，卷积计算可以提取带有卷积核的特征图像</p>
</blockquote>
<blockquote>
<p>池化是放大原图像局部特征，如3*3的像素值数组，突出最大像素值，清零其他像素值。达到放大特征，类似数据清洗，也可以减少计算量</p>
</blockquote>
<blockquote>
<p>全联接就是把图像值输出到结果值的万能公式y &#x3D; wx+b得到输出的过程</p>
</blockquote>
<ul>
<li>该模型正确率约为99.2%</li>
</ul>
<p><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/9iZfxS0kSLiozSI1bUzv8tIfLKGNk.7HHLoPAerUrsE!/b/dMUAAAAAAAAA&bo=igayAgAAAAADBx4!&rf=viewer_4" alt="image"></p>
<p>各层原理暂不详说，代码中有详细注释，先放两个传送门去多了解吧:</p>
<ul>
<li><a href="https://www.jianshu.com/p/fabf52b35a08">https://www.jianshu.com/p/fabf52b35a08</a></li>
<li><a href="https://blog.csdn.net/hwl19951007/article/details/81126699">https://blog.csdn.net/hwl19951007/article/details/81126699</a></li>
</ul>
<p>以下是MNIST代码实现(注意最好当前文件夹下有MNIST_data这个本地包可以免去下载):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&quot;./MNIST_data/&quot;</span>,one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line"><span class="comment">#交互式session，可以边构建运算图边执行sess，如果是普通session，需要构建完整的运算图后才可以运行sess</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">784</span>])</span><br><span class="line">y_= tf.placeholder(<span class="string">&#x27;float&#x27;</span>,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W)+b)</span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))</span><br><span class="line"></span><br><span class="line"><span class="comment">##1.参数初始化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weight_variable</span>(<span class="params">shape</span>):</span><br><span class="line">    initial = tf.truncated_normal(shape,stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bias_variable</span>(<span class="params">shape</span>):</span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>,shape=shape)</span><br><span class="line">    <span class="comment">#第二个参数为该常量的维度</span></span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="comment">##2.卷积层和池化层</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conv2d</span>(<span class="params">x,W</span>):</span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x,W,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_pool_2_2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x,ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">##3.第一层</span></span><br><span class="line"></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">32</span>])</span><br><span class="line"><span class="comment">#[5，5，1，32]表示为卷积核为5*5，卷积输入为1，输出为32(32个卷积核)</span></span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">x_image = tf.reshape(x,[-<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#最后一维是通道数，这里是灰度图所以为1</span></span><br><span class="line"></span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1)</span><br><span class="line"><span class="comment">#[-1,28,28,1]用[5,5,1,32]卷积,得到图片28*28*32(因为有32个卷积核所以有32个特征图),具体为[-1,28,28,32]</span></span><br><span class="line">h_pool1 = max_pool_2_2(h_conv1)</span><br><span class="line"><span class="comment">#池化,池化步长x和y轴都是2，所以图片缩小一半得到14*14*32，即[-1,14,14,32]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##4.第二层</span></span><br><span class="line"></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line"><span class="comment">#[5，5，1，32]表示为卷积核为5*5，卷积输入通道为32，输出通道为64</span></span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line"></span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2)+b_conv2)</span><br><span class="line"><span class="comment">#[-1,14,14,32]被[5,5,32,64]卷积32个通道输出为64个通道(卷积核)，具体为[-1,14,14,64]</span></span><br><span class="line">h_pool2 = max_pool_2_2(h_conv2)</span><br><span class="line"><span class="comment">#池化后图片数据量减一半，最终为1024个特征向量[-1,7,7,64]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##5.全连接层</span></span><br><span class="line"></span><br><span class="line">W_conv3 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>,<span class="number">1024</span>])<span class="comment">#[4096,1024]</span></span><br><span class="line">b_conv3 = bias_variable([<span class="number">1024</span>])</span><br><span class="line"></span><br><span class="line">h_conv3_flat = tf.reshape(h_pool2,[-<span class="number">1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line"><span class="comment">#[-1,7,7,64]reshape为[-1,7*7*64]</span></span><br><span class="line">h_conv3_fc1 = tf.nn.relu(tf.matmul(h_conv3_flat,W_conv3)+b_conv3)</span><br><span class="line"><span class="comment">#[-1,7*7*64]*[7*7*64,1024]+[1014]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##6.dropout防止过拟合</span></span><br><span class="line">keep_prob = tf.placeholder(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line">h_conv3_drop = tf.nn.dropout(h_conv3_fc1,keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment">##7.输出</span></span><br><span class="line"></span><br><span class="line">W_output = weight_variable([<span class="number">1024</span>,<span class="number">10</span>])</span><br><span class="line">b_output = bias_variable([<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">y_conv = tf.nn.softmax(tf.matmul(h_conv3_drop,W_output)+b_output)</span><br><span class="line"><span class="comment">#[-1,1024]*[1024,10]+[10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##8.评估模型</span></span><br><span class="line"></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y_conv))</span><br><span class="line"></span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_conv,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">&quot;float&quot;</span>))</span><br><span class="line"></span><br><span class="line">sess.run(tf.initialize_all_variables())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20000</span>):</span><br><span class="line">  batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">  <span class="keyword">if</span> i%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">    train_accuracy = accuracy.<span class="built_in">eval</span>(feed_dict=&#123;</span><br><span class="line">        x:batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step %d, training accuracy %g&quot;</span>%(i, train_accuracy))</span><br><span class="line">  train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test accuracy %g&quot;</span>%accuracy.<span class="built_in">eval</span>(feed_dict=&#123;</span><br><span class="line">    x: mnist.test.images, y_: mnist.test.labels, keep_prob: <span class="number">1.0</span>&#125;))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终准确率：<br><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/RauRy1HVXIvLIy4a23o.xmn4ZZIbzm6ivd6DDvPsaBY!/b/dFQBAAAAAAAA&bo=PAbGAwAAAAADN.0!&rf=viewer_4" alt="image"></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>MNIST</tag>
        <tag>图片识别</tag>
      </tags>
  </entry>
  <entry>
    <title>CIFAR 1.简介&amp;可视化</title>
    <url>/2019/06/02/AI/cifar/1.cifar/</url>
    <content><![CDATA[<h1 id="cifar"><a href="#cifar" class="headerlink" title="cifar"></a>cifar</h1><p>CIFAR数据集是 <a href="http://groups.csail.mit.edu/vision/TinyImages/">Visual Dictionary<br>(Teaching computers to recognize objects)</a> 的子集，由三个教授收集，主要来自google和各类搜索引擎的图片。</p>
<span id="more"></span>

<p>备注：<a href="http://www.cs.toronto.edu/~kriz/cifar.html">cifar官网</a></p>
<h2 id="1-cifar10"><a href="#1-cifar10" class="headerlink" title="1.cifar10"></a>1.cifar10</h2><p>由10个类的60000的32*32彩色图像组成，每个类有6000个图像。有50000个训练图像和10000个测试图像。</p>
<p>类型如下:<br><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/olV9rA*CpkCt11In.qobQwYhNTG7GbFSZPZ38g*E9g8!/b/dEABAAAAAAAA&bo=sAPQAgAAAAADB0M!&rf=viewer_4" alt="image"></p>
<h2 id="2-cifar100"><a href="#2-cifar100" class="headerlink" title="2.cifar100"></a>2.cifar100</h2><p>这个数据集和cifar10类似，它有100个类，每个类包含600个图像，600个图像中有500个训练图像和100个测试图像。100类实际是由20个类(每个类又包含5个子类)构成(5*20&#x3D;100)。</p>
<p>类型如下：</p>
<p><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/VVHWqrUzZu9IsNn0B3m4No3TNnHpL9cEjiZesN7jkYA!/b/dLYAAAAAAAAA&bo=5AW.AwAAAAADB34!&rf=viewer_4" alt="image"></p>
<h2 id="3-数据结构-Python版本"><a href="#3-数据结构-Python版本" class="headerlink" title="3.数据结构(Python版本)"></a>3.数据结构(Python版本)</h2><ul>
<li>cifar10</li>
</ul>
<p>数据格式如下：</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;1×标签&gt;</span> <span class="attribute">&lt;3072×像素&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="attribute">&lt;1×标签&gt;</span> <span class="attribute">&lt;3072×像素&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个字节是第一个图像的标签，它是一个0-9范围内的数字。接下来的3072个字节是图像像素的值。前1024个字节是红色通道值，下1024个绿色，最后1024个蓝色。</p>
<ul>
<li>CIFAR-100</li>
</ul>
<p>二进制版本与CIFAR-10的二进制版本相似，只是每个图像都有两个标签字节（粗略和细小）和3072像素字节，所以二进制文件如下所示：</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">&lt;1 x粗标签&gt;</span> <span class="attribute">&lt;1 x精标签&gt;</span> <span class="attribute">&lt;3072 x像素&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="attribute">&lt;1 x粗标签&gt;</span> <span class="attribute">&lt;1 x精标签&gt;</span> <span class="attribute">&lt;3072 x像素&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看cifar100 python版本的数据结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpickle</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fo:</span><br><span class="line">        <span class="built_in">dict</span> = pickle.load(fo, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span></span><br><span class="line"><span class="built_in">dict</span>.keys()</span><br><span class="line"><span class="comment">#dict_keys([b&#x27;data&#x27;, b&#x27;coarse_labels&#x27;, b&#x27;fine_labels&#x27;, b&#x27;filenames&#x27;, b&#x27;batch_label&#x27;])</span></span><br></pre></td></tr></table></figure>

<h2 id="4-可视化"><a href="#4-可视化" class="headerlink" title="4.可视化"></a>4.可视化</h2><ul>
<li>pickle模块</li>
</ul>
<p>pickle模块实现了基本的数据序列化和反序列化。</p>
<blockquote>
<p>序列化过程将文本信息转变为二进制数据流，便于存储在硬盘之中，当需要读取文件的时候，从硬盘中读取数据。</p>
</blockquote>
<blockquote>
<p>反序列可以从文件中得到原始的数据，如字符串、列表、字典等数据。</p>
</blockquote>
<ul>
<li>PIL</li>
</ul>
<p>负责将三色像素合并为一张图片保存</p>
<ul>
<li>matplotlib.image</li>
</ul>
<p>负责将单色道二维数组保存为一张图片</p>
<h3 id="4-1-cifar10可视化"><a href="#4-1-cifar10可视化" class="headerlink" title="4.1 cifar10可视化:"></a>4.1 cifar10可视化:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> plimg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CHANNEL = <span class="number">3</span></span><br><span class="line">WIDTH = <span class="number">32</span></span><br><span class="line">HEIGHT = <span class="number">32</span></span><br><span class="line"> </span><br><span class="line">data = []</span><br><span class="line">labels=[]</span><br><span class="line">classification = [<span class="string">&#x27;airplane&#x27;</span>,<span class="string">&#x27;automobile&#x27;</span>,<span class="string">&#x27;bird&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;deer&#x27;</span>,<span class="string">&#x27;dog&#x27;</span>,<span class="string">&#x27;frog&#x27;</span>,<span class="string">&#x27;horse&#x27;</span>,<span class="string">&#x27;ship&#x27;</span>,<span class="string">&#x27;truck&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./cifar-10-batches-py/data_batch_&quot;</span>+ <span class="built_in">str</span>(i+<span class="number">1</span>),mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment">#数据集在当脚本前文件夹下</span></span><br><span class="line">        data_dict = pickle.load(file, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">        data+= <span class="built_in">list</span>(data_dict[<span class="string">b&#x27;data&#x27;</span>])</span><br><span class="line">        labels+= <span class="built_in">list</span>(data_dict[<span class="string">b&#x27;labels&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">img =  np.reshape(data,[-<span class="number">1</span>,CHANNEL, WIDTH, HEIGHT])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#代码创建文件夹，也可以自行创建 </span></span><br><span class="line">data_path = <span class="string">&quot;./pic3/&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(data_path):</span><br><span class="line">    os.makedirs(data_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    r = img[i][<span class="number">0</span>]</span><br><span class="line">    g = img[i][<span class="number">1</span>]</span><br><span class="line">    b = img[i][<span class="number">2</span>]</span><br><span class="line"> </span><br><span class="line">    plimg.imsave(<span class="string">&quot;./pic4/&quot;</span> +<span class="built_in">str</span>(i)+<span class="string">&quot;r&quot;</span>+<span class="string">&quot;.png&quot;</span>,r)</span><br><span class="line">    plimg.imsave(<span class="string">&quot;./pic4/&quot;</span> +<span class="built_in">str</span>(i)+<span class="string">&quot;g&quot;</span>+<span class="string">&quot;.png&quot;</span>,g)</span><br><span class="line">    plimg.imsave(<span class="string">&quot;./pic4/&quot;</span> +<span class="built_in">str</span>(i) +<span class="string">&quot;b&quot;</span>+<span class="string">&quot;.png&quot;</span>,b)</span><br><span class="line"></span><br><span class="line">    ir = Image.fromarray(r)</span><br><span class="line">    ig = Image.fromarray(g)</span><br><span class="line">    ib = Image.fromarray(b)</span><br><span class="line">    rgb = Image.merge(<span class="string">&quot;RGB&quot;</span>, (ir, ig, ib))</span><br><span class="line"> </span><br><span class="line">    name = <span class="string">&quot;img-&quot;</span> + <span class="built_in">str</span>(i) +<span class="string">&quot;-&quot;</span>+ classification[labels[i]]+ <span class="string">&quot;.png&quot;</span></span><br><span class="line">    rgb.save(data_path + name, <span class="string">&quot;PNG&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/7VV46P*hJ8FhYS2OxPWGqiW4EOa7V58WgvkqUviaL.U!/b/dL8AAAAAAAAA&bo=tAc4BAAAAAADB60!&rf=viewer_4" alt="image"></p>
<h3 id="4-2-cifar100"><a href="#4-2-cifar100" class="headerlink" title="4.2 cifar100"></a>4.2 cifar100</h3><p>cifar100的文件结构和cifar10不同，数据只有一个文件夹里面有50000个图片，且有两个标签，可以从返回的dict的key查看其标签(前文有提到)。</p>
<p>知道其与cifar10后，改写前段代码即可实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> p</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> plimg</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_CIFAR_batch</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; load single batch of cifar &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">        datadict = p.load(f,encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">        <span class="comment">#X = datadict[b&#x27;data&#x27;]</span></span><br><span class="line">        <span class="comment">#Y = datadict[b&#x27;labels&#x27;]</span></span><br><span class="line">        <span class="comment">#X = X.reshape(10000, 3, 32, 32)</span></span><br><span class="line">        X = datadict[<span class="string">b&#x27;data&#x27;</span>]</span><br><span class="line">        Y = datadict[<span class="string">b&#x27;coarse_labels&#x27;</span>]+datadict[<span class="string">b&#x27;fine_labels&#x27;</span>]</span><br><span class="line">        X = X.reshape(<span class="number">50000</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">        Y = np.array(Y)</span><br><span class="line">        <span class="keyword">return</span> X, Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#imgX, imgY = load_CIFAR_batch(&quot;./cifar-10-batches-py/data_batch_1&quot;)</span></span><br><span class="line">    imgX, imgY = load_CIFAR_batch(<span class="string">&quot;./cifar-100-python/train&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(imgX.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在保存图片:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(imgX.shape[<span class="number">0</span>]):</span><br><span class="line">        imgs = imgX[i]</span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">100</span>:<span class="comment">#只循环100张图片,这句注释掉可以便利出所有的图片,图片较多,可能要一定的时间</span></span><br><span class="line">            img0 = imgs[<span class="number">0</span>]</span><br><span class="line">            img1 = imgs[<span class="number">1</span>]</span><br><span class="line">            img2 = imgs[<span class="number">2</span>]</span><br><span class="line">            i0 = Image.fromarray(img0)</span><br><span class="line">            i1 = Image.fromarray(img1)</span><br><span class="line">            i2 = Image.fromarray(img2)</span><br><span class="line">            img = Image.merge(<span class="string">&quot;RGB&quot;</span>,(i0,i1,i2))</span><br><span class="line">            name = <span class="string">&quot;img&quot;</span> + <span class="built_in">str</span>(i)+<span class="string">&quot;.png&quot;</span></span><br><span class="line">            img.save(<span class="string">&quot;./pic1/&quot;</span>+name,<span class="string">&quot;png&quot;</span>)<span class="comment">#文件夹下是RGB融合后的图像</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(imgs.shape[<span class="number">0</span>]):</span><br><span class="line">                img = imgs[j]</span><br><span class="line">                name = <span class="string">&quot;img&quot;</span> + <span class="built_in">str</span>(i) + <span class="built_in">str</span>(j) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正在保存图片&quot;</span> + name)</span><br><span class="line">                plimg.imsave(<span class="string">&quot;./pic2/&quot;</span> + name, img)<span class="comment">#文件夹下是RGB分离的图像</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;保存完毕.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://m.qpic.cn/psb?/V13eBt6k2MYzwW/g2UGfoSOvCdg9qNOXwItPwk8duEF8s21NEhqoqiJkUw!/b/dL4AAAAAAAAA&bo=pwc4BAAAAAADR*4!&rf=viewer_4" alt="image"></p>
<p>注:在另一个文件夹还保存了三色的单通道图</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>图片识别</tag>
        <tag>CIFAR</tag>
      </tags>
  </entry>
</search>
